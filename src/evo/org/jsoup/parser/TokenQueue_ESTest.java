/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:27:57 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = TokenQueue.unescape("e{N5c&]pz");
      assertNotNull(string0);
      assertEquals("e{N5c&]pz", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("yij\"co");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('y', tokenQueue0.peek());
      assertEquals("yij\"co", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("\"co", tokenQueue0.toString());
      assertEquals("yij", string0);
      
      String string1 = tokenQueue0.chompBalanced('\u0018', '3');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('c', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("co", tokenQueue0.toString());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'");
      assertNotNull(tokenQueue0);
      assertEquals('\'', tokenQueue0.peek());
      assertEquals("'", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.chompBalanced('(', '.');
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertEquals('!', tokenQueue0.peek());
      
      tokenQueue0.addFirst("!_=@<m07yi v/7");
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("!_=@<m07yi v/7!_=@<m07yi v/7", tokenQueue0.toString());
      assertEquals('!', tokenQueue0.peek());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_=@<m07yi v/7!_=@<m07yi v/7", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompTo("!_=@<m07yi v/7");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals("_=@<m07yi v/7", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("0k>j%'?n[uHF(.|7");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("0k>j%'?n[uHF(.|7", tokenQueue0.toString());
      assertEquals('0', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      tokenQueue0.consume("0k>j%'?n[uHF(.|7");
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompTo("!_=@<m07yi v/7");
      assertNotNull(string0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      
      tokenQueue0.consume("");
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("2Sy>O");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('2', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("2Sy>O", tokenQueue0.toString());
      
      String string0 = tokenQueue0.consumeTagName();
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(">O", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('>', tokenQueue0.peek());
      assertEquals("2Sy", string0);
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(">O", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('>', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = TokenQueue.unescape("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("S");
      assertNotNull(tokenQueue0);
      assertEquals("S", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('S', tokenQueue0.peek());
      
      tokenQueue0.advance();
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      
      String string0 = tokenQueue0.toString();
      assertNotNull(string0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                 ", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompTo("                 ");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      
      String string1 = tokenQueue0.remainder();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("96O48J&NTnb");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("96O48J&NTnb", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('9', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      char char0 = tokenQueue0.peek();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("96O48J&NTnb", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('9', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      boolean boolean0 = tokenQueue0.matchesCS("");
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      
      boolean boolean0 = tokenQueue0.matchesCS("org.jsoup.parser.TokenQueue");
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matches("?*B&*_K:j");
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('D', tokenQueue0.peek());
      assertEquals("Did not find balanced marker at '", tokenQueue0.toString());
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("id not find balanced marker at '", tokenQueue0.toString());
      assertEquals('i', tokenQueue0.peek());
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompTo("!_=@<m07yi v/7");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("_=@<m07yi v/7", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenQueue.unescape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[Nx!)nM");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("[Nx!)nM", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('[', tokenQueue0.peek());
      
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ek`kQOEUce.~{U");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('e', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("ek`kQOEUce.~{U", tokenQueue0.toString());
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      
      // Undeclared exception!
      try { 
        tokenQueue0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        tokenQueue0.matchChomp((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      assertNotNull(tokenQueue0);
      assertEquals('D', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("Did not find balanced marker at '", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Y0(?Q>p!,;3");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("Y0(?Q>p!,;3", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('Y', tokenQueue0.peek());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeToAny((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("w");
      assertNotNull(tokenQueue0);
      assertEquals('w', tokenQueue0.peek());
      assertEquals("w", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("oig)dO r0aZ!ll^qk");
      assertNotNull(tokenQueue0);
      assertEquals("oig)dO r0aZ!ll^qk", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.chompTo("                 ");
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"^\"/[544hz7sJ5m$N3#");
      assertNotNull(tokenQueue0);
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("\"^\"/[544hz7sJ5m$N3#", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("              ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals("              ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompToIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("H`WChzSEv_:J");
      assertNotNull(tokenQueue0);
      assertEquals("H`WChzSEv_:J", tokenQueue0.toString());
      assertEquals('H', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("[s'xP 'LT_~?}7");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("[s'xP 'LT_~?}7", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('[', tokenQueue0.peek());
      
      // Undeclared exception!
      try { 
        tokenQueue0.addFirst((Character) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = null;
      try {
        tokenQueue0 = new TokenQueue((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("h!dI|VJ0F");
      assertNotNull(tokenQueue0);
      assertEquals("h!dI|VJ0F", tokenQueue0.toString());
      assertEquals('h', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.consumeToIgnoreCase("U;'>9qUV|hA_> `Q8");
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("h!dI|VJ0F", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("..|SmV5,gWZh");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('.', tokenQueue0.peek());
      assertEquals("..|SmV5,gWZh", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.consumeToIgnoreCase("..|SmV5,gWZh");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('.', tokenQueue0.peek());
      assertEquals("..|SmV5,gWZh", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("   ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("   ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeTo("   ");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("   ", tokenQueue0.toString());
      assertEquals(' ', tokenQueue0.peek());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("'{N");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("'{N", tokenQueue0.toString());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("'{N", tokenQueue0.toString());
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("099+q?kDnl\"`qt");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('0', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("099+q?kDnl\"`qt", tokenQueue0.toString());
      
      boolean boolean0 = tokenQueue0.matchesWord();
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('0', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("099+q?kDnl\"`qt", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                   ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                   ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("                   ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("oig)dO r0aZ!ll^qk");
      assertNotNull(tokenQueue0);
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("oig)dO r0aZ!ll^qk", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertEquals('o', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("oig)dO r0aZ!ll^qk", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("                 ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("                 ", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.chompTo("                 ");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("", string0);
      
      boolean boolean0 = tokenQueue0.matchesWhitespace();
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("';(ZO2<m_nxZ^CfgEm");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\'', tokenQueue0.peek());
      assertEquals("';(ZO2<m_nxZ^CfgEm", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      boolean boolean0 = tokenQueue0.matchChomp("Queue not long enough to consume sequence");
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('\'', tokenQueue0.peek());
      assertEquals("';(ZO2<m_nxZ^CfgEm", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.matchChomp("");
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-'<-go&");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('-', tokenQueue0.peek());
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      
      char[] charArray0 = new char[1];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('-', tokenQueue0.peek());
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      char[] charArray0 = new char[8];
      tokenQueue0.addFirst((Character) '\u0000');
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("\u0000", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("\u0000", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-'<-go&");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertEquals('-', tokenQueue0.peek());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertEquals('-', tokenQueue0.peek());
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ZLk()5,VMa|)T6";
      boolean boolean0 = tokenQueue0.matchesAny(stringArray0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("   ");
      assertNotNull(tokenQueue0);
      assertEquals("   ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.isEmpty();
      assertEquals("   ", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("ek`kQOEUce.~{U");
      assertNotNull(tokenQueue0);
      assertEquals("ek`kQOEUce.~{U", tokenQueue0.toString());
      assertEquals('e', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.matches("");
      assertEquals("ek`kQOEUce.~{U", tokenQueue0.toString());
      assertEquals('e', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("N(g]j4DjoAuaz6R2G");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('N', tokenQueue0.peek());
      assertEquals("N(g]j4DjoAuaz6R2G", tokenQueue0.toString());
      
      Character character0 = new Character('1');
      assertNotNull(character0);
      assertEquals('1', (char)character0);
      
      String string0 = tokenQueue0.consumeWord();
      assertNotNull(string0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("(g]j4DjoAuaz6R2G", tokenQueue0.toString());
      assertEquals('(', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("N", string0);
      
      tokenQueue0.addFirst(character0);
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('1', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("1(g]j4DjoAuaz6R2G", tokenQueue0.toString());
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("(g]j4DjoAuaz6R2G", tokenQueue0.toString());
      assertEquals('(', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('1', char0);
      
      String string1 = tokenQueue0.chompBalanced('.', '1');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("g]j4DjoAuaz6R2G", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('g', tokenQueue0.peek());
      assertEquals("", string1);
      
      String string2 = tokenQueue0.consumeAttributeKey();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("]j4DjoAuaz6R2G", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(']', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("g", string2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hL1R5=ze");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('h', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("hL1R5=ze", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.consumeTo("org.jsoup.helper.StringUtil$1");
      assertNotNull(string0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("hL1R5=ze", string0);
      
      String string1 = tokenQueue0.consumeAttributeKey();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-", tokenQueue0.toString());
      assertEquals('-', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('_', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeElementSelector();
      assertNotNull(string0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("i*NHG~bx$KN9x92CT");
      assertNotNull(tokenQueue0);
      assertEquals("i*NHG~bx$KN9x92CT", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('i', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.chompToIgnoreCase("i*NHG~bx$KN9x92CT");
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string0);
      
      String string1 = tokenQueue0.consumeElementSelector();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hL1R5=ze");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('h', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("hL1R5=ze", tokenQueue0.toString());
      assertTrue(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeTo("org.jsoup.helper.StringUtil$1");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertEquals("hL1R5=ze", string0);
      
      String string1 = tokenQueue0.consumeTagName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-'<-go&");
      assertNotNull(tokenQueue0);
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('-', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeAttributeKey();
      assertNotNull(string0);
      assertEquals('\'', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("'<-go&", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-", string0);
      
      String string1 = tokenQueue0.chompBalanced('!', 'p');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<-go&", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('<', tokenQueue0.peek());
      assertEquals("", string1);
      
      String string2 = tokenQueue0.chompBalanced('p', 'h');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("-go&", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('-', tokenQueue0.peek());
      assertEquals("", string2);
      
      String string3 = tokenQueue0.chompBalanced('!', '!');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("go&", tokenQueue0.toString());
      assertEquals('g', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", string3);
      
      String string4 = tokenQueue0.consumeWord();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals('&', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("&", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("go", string4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%X");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('%', tokenQueue0.peek());
      assertEquals("%X", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      
      Character character0 = Character.valueOf('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("J%X", tokenQueue0.toString());
      assertEquals('J', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.chompBalanced('n', 'J');
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('%', tokenQueue0.peek());
      assertEquals("%X", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("yij\"co");
      assertNotNull(tokenQueue0);
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('y', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("yij\"co", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      Character character0 = new Character('\"');
      assertNotNull(character0);
      assertEquals('\"', (char)character0);
      
      tokenQueue0.addFirst(character0);
      assertEquals("\"yij\"co", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', '3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'yij\"co'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("yij\"co");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("yij\"co", tokenQueue0.toString());
      assertEquals('y', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("\"co", tokenQueue0.toString());
      assertEquals('\"', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("yij", string0);
      
      String string1 = tokenQueue0.chompBalanced('4', '4');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('c', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("co", tokenQueue0.toString());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('_', tokenQueue0.peek());
      assertEquals("_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      
      String string0 = tokenQueue0.consumeTagName();
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('=', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("_", string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('=', '=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '@<m07yi v/7'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("jceU87yYw+0 m>^@");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals("jceU87yYw+0 m>^@", tokenQueue0.toString());
      assertEquals('j', tokenQueue0.peek());
      
      String string0 = tokenQueue0.consumeToIgnoreCase("8|bxFQmA,");
      assertNotNull(string0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("", tokenQueue0.toString());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("jceU87yYw+0 m>^@", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("i*NHG~bx$KN9x92CT");
      assertNotNull(tokenQueue0);
      assertEquals('i', tokenQueue0.peek());
      assertEquals("i*NHG~bx$KN9x92CT", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertTrue(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertNotNull(string0);
      assertEquals('*', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("*NHG~bx$KN9x92CT", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("i", string0);
      
      String string1 = tokenQueue0.chompToIgnoreCase("i*NHG~bx$KN9x92CT");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('\u0000', tokenQueue0.peek());
      assertEquals("*NHG~bx$KN9x92CT", string1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("_", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      
      String[] stringArray0 = new String[0];
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertNotNull(string0);
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertEquals(0, stringArray0.length);
      assertEquals("_", string0);
      
      // Undeclared exception!
      try { 
        tokenQueue0.consume("_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      
      tokenQueue0.consume("");
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".'<qgo&");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('.', tokenQueue0.peek());
      assertEquals(".'<qgo&", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompToIgnoreCase("-");
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals(".'<qgo&", string0);
      
      tokenQueue0.advance();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hL1R5=ze");
      assertNotNull(tokenQueue0);
      assertEquals("hL1R5=ze", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('h', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.consumeTo("org.jsoup.helper.StringUtil$1");
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals("hL1R5=ze", string0);
      
      String string1 = tokenQueue0.consumeWord();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("        ");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals(' ', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("        ", tokenQueue0.toString());
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertTrue(tokenQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('!', tokenQueue0.peek());
      
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("!_=@<m07yi v/7");
      assertNotNull(tokenQueue0);
      assertEquals("!_=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals('!', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('_', tokenQueue0.peek());
      assertEquals("_=@<m07yi v/7", tokenQueue0.toString());
      
      String string0 = tokenQueue0.consumeTagName();
      assertNotNull(string0);
      assertEquals("=@<m07yi v/7", tokenQueue0.toString());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('=', tokenQueue0.peek());
      assertEquals("_", string0);
      
      char char0 = tokenQueue0.consume();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("@<m07yi v/7", tokenQueue0.toString());
      assertEquals('@', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals('=', char0);
      
      tokenQueue0.advance();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("<m07yi v/7", tokenQueue0.toString());
      assertEquals('<', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesStartTag());
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("<m07yi v/7", tokenQueue0.toString());
      assertEquals('<', tokenQueue0.peek());
      assertTrue(tokenQueue0.matchesStartTag());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-'<-go&");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertEquals('-', tokenQueue0.peek());
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(tokenQueue0.isEmpty());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("-'<-go&", tokenQueue0.toString());
      assertEquals('-', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("i*NHG~bx$KN9x92CT");
      assertNotNull(tokenQueue0);
      assertFalse(tokenQueue0.matchesStartTag());
      assertTrue(tokenQueue0.matchesWord());
      assertEquals('i', tokenQueue0.peek());
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("i*NHG~bx$KN9x92CT", tokenQueue0.toString());
      
      String string0 = tokenQueue0.chompToIgnoreCase("i*NHG~bx$KN9x92CT");
      assertNotNull(string0);
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertEquals("", string0);
      
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(tokenQueue0.isEmpty());
      assertEquals('\u0000', tokenQueue0.peek());
      assertFalse(tokenQueue0.matchesStartTag());
      assertEquals("", tokenQueue0.toString());
      assertFalse(tokenQueue0.matchesWord());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-'<-go&");
      tokenQueue0.consumeAttributeKey();
      tokenQueue0.chompBalanced('!', 'p');
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertEquals('<', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("..|SmV5,gWZh");
      tokenQueue0.consumeTo("Z)yEn5rzI]4C[G`&");
      char[] charArray0 = new char[6];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"^\"/[544hz7sJ5m$N3#");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"^\"/[544hz7sJ5m$N3#";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertEquals('\"', tokenQueue0.peek());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".'<qgo&");
      tokenQueue0.consumeElementSelector();
      assertEquals('.', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(".'<qgo&");
      tokenQueue0.chompToIgnoreCase("-");
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      char char0 = tokenQueue0.peek();
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"^\"/[544hz7sJ5m$N3#");
      assertEquals("\"^\"/[544hz7sJ5m$N3#", tokenQueue0.toString());
      
      tokenQueue0.remainder();
      assertTrue(tokenQueue0.isEmpty());
      
      String string0 = tokenQueue0.consumeCssIdentifier();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("%X");
      tokenQueue0.consume();
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("hL1R5=ze");
      String string0 = tokenQueue0.toString();
      assertEquals("hL1R5=ze", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      // Undeclared exception!
      try { 
        tokenQueue0.matchesCS((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
