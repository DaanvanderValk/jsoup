/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:46:17 GMT 2018
 */

package org.jsoup;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Jsoup_ESTest extends Jsoup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      File file0 = MockFile.createTempFile("title", "org.jsoup.Jsoup", (File) mockFile0);
      Jsoup.parse(file0, (String) null, "org.jsoup.Jsoup");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(inputStream0).available();
      doReturn(1769, 1769, 0, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      Jsoup.parse(inputStream0, (String) null, "video");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2187), 66);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "nav", ":)\"lT3k+Kt-S");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = ".3[t_HH<5}3mYOVEb6";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ".3[t_HH<5}3mYOVEb6", uRLStreamHandler0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        Jsoup.parse(uRL1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      // Undeclared exception!
      try { 
        Jsoup.parse(uRL0, (-3630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "title";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1);
      // Undeclared exception!
      try { 
        Jsoup.clean("title", "title", (Whitelist) null, document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      String string1 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      try { 
        Jsoup.parse(uRL0, 0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("", "org.jsoup.Jsoup");
      mockFile0.setReadOnly();
      mockFile0.getAbsolutePath();
      mockFile0.setWritable(true, true);
      try { 
        Jsoup.parse((File) mockFile0, "EJ(#K'apM");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      Whitelist whitelist0 = null;
      // Undeclared exception!
      try { 
        Jsoup.clean("", "", (Whitelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "U4c92v3";
      String string1 = "FR95F4O|!";
      String string2 = "";
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("U4c92v3", "FR95F4O|!", (File) mockFile0);
      mockFile0.mkdirs();
      mockFile0.setExecutable(false);
      String string3 = "aIQxb{.EA";
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "", "aIQxb{.EA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "org.jsoup.Jsoup";
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parser0.settings(parseSettings0);
      Jsoup.parse((InputStream) null, "org.jsoup.Jsoup", "(m^i~!&@~", parser0);
      String string1 = "xN)J>w";
      File file0 = MockFile.createTempFile("xN)J>w", "xN)J>w");
      String string2 = "gT";
      try { 
        Jsoup.parse(file0, "gT");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte) (-34));
      String string0 = "&lt;";
      byteArrayInputStream0.read(byteArray0);
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "&lt;", "&lt;");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "org.jsoup.select.NodeFilter$FilterResult", "org.jsoup.select.NodeFilter$FilterResult", parser1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = ">TTh*hWC.MdHPU";
      // Undeclared exception!
      try { 
        Jsoup.parse(">TTh*hWC.MdHPU", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Jsoup.parse("org.jsoup.select.StructuralEvaluator$Parent");
      MockFile mockFile0 = new MockFile("org.jsoup.select.StructuralEvaluator$Parent");
      mockFile0.getCanonicalPath();
      mockFile0.mkdir();
      mockFile0.getCanonicalPath();
      String string0 = "*?G1RC{;S";
      try { 
        Jsoup.parse((File) mockFile0, "-L!!I$:}kZ',29eU?", "*?G1RC{;S");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4hM)u";
      stringArray0[1] = "4hM)u";
      stringArray0[2] = "4hM)u";
      stringArray0[3] = "4hM)u";
      stringArray0[4] = "4hM)u";
      stringArray0[5] = "4hM)u";
      whitelist0.removeAttributes("4hM)u", stringArray0);
      Whitelist.simpleText();
      Jsoup.clean("4hM)u", "4hM)u", whitelist0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      try { 
        Jsoup.parse((InputStream) pushbackInputStream0, "4hM)u", "4hM)u", (Parser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "content";
      Whitelist whitelist0 = Whitelist.simpleText();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Jsoup.clean("content", "content", whitelist0, document_OutputSettings3);
      Document document0 = Jsoup.parse("content");
      Charset charset0 = document0.charset();
      document_OutputSettings1.charset(charset0);
      MockFile mockFile0 = new MockFile("org.jsoup.parser.ParseError");
      MockFile mockFile1 = new MockFile(mockFile0, "content");
      File file0 = MockFile.createTempFile("content", "content", (File) mockFile1);
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "n7&{DM:";
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist.basicWithImages();
      Jsoup.clean("n7&{DM:", whitelist0);
      Jsoup.clean("", whitelist0);
      Parser parser0 = Parser.xmlParser();
      int int0 = 0;
      parser0.setTrackErrors(0);
      Jsoup.parse("n7&amp;{DM:", "sT1oG3,;Ic|&YSgAw2", parser0);
      Jsoup.parse("&gt;", "&gt;");
      String string1 = null;
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null, (String) null, parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "";
      Jsoup.parse("");
      String string1 = "^\\PM2E'`58RcFUIQ";
      Whitelist whitelist0 = Whitelist.basic();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document_OutputSettings1.outline(false);
      int int0 = 2635;
      document_OutputSettings1.clone();
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings1.indentAmount(2635);
      document_OutputSettings1.charset((Charset) null);
      // Undeclared exception!
      try { 
        Jsoup.clean("^PM2E'`58RcFUIQ", "[%s!=%s]", whitelist0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "org.jsoup.Jsoup";
      Parser parser0 = Parser.xmlParser();
      Jsoup.parse("org.jsoup.Jsoup", "org.jsoup.Jsoup", parser0);
      String string1 = "";
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.getCanonicalFile();
      File file0 = MockFile.createTempFile("5ww+@au_TD[OOC+", "org.jsoup.Jsoup", (File) mockFile0);
      mockFile0.deleteOnExit();
      mockFile0.setWritable(true, true);
      try { 
        Jsoup.parse(file0, "5ww+@au_TD[OOC+", "B");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "org.jsoup.Jsoup";
      Jsoup.parseBodyFragment("org.jsoup.Jsoup");
      String string1 = "Vp|vGiO";
      Jsoup.parse("Vp|vGiO", "Vp|vGiO");
      Jsoup.parse("Vp|vGiO", "Vp|vGiO");
      Whitelist whitelist0 = null;
      // Undeclared exception!
      try { 
        Jsoup.clean("org.jsoup.Jsoup", (Whitelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      Jsoup.isValid("Xvs", whitelist1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Jsoup.parse((InputStream) bufferedInputStream0, (String) null, "Xvs");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Jsoup.parse(":%s(%dn)");
      Jsoup.parse((InputStream) null, ":only-of-type", "Scwf'{tj>hB");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "_L\\09'dup!-v";
      Jsoup.parseBodyFragment("_L\u00009'dup!-v", "org.jsoup.nodes.Element");
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[4];
      Whitelist.basicWithImages();
      stringArray0[0] = "_L\u00009'dup!-v";
      stringArray0[1] = "org.jsoup.nodes.Element";
      stringArray0[2] = "'f:H@}y7s''#\"Vw";
      stringArray0[3] = "_L\u00009'dup!-v";
      Whitelist whitelist1 = whitelist0.addAttributes("'f:H@}y7s''#\"Vw", stringArray0);
      Jsoup.isValid("Sl++-l(&sMb8V7", whitelist1);
      Jsoup.parse("org.jsoup.nodes.Element", "Bi7h6i7G<*PrQNtc");
      MockFile mockFile0 = new MockFile("Bi7h6i7G<*PrQNtc", "c9=~j75#ne@5/@");
      File file0 = MockFile.createTempFile("-9LC#^+ET'z_1", "-9LC#^+ET'z_1", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2845);
      Parser parser0 = Parser.htmlParser();
      Jsoup.parse((InputStream) bufferedInputStream0, (String) null, "Sl++-l(&sMb8V7", parser0);
      try { 
        Jsoup.parse((InputStream) mockFileInputStream0, "org.jsoup.nodes.Element", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Jsoup.parseBodyFragment("4TN4");
      Jsoup.parseBodyFragment("select", "menu");
      Jsoup.parse("org.jsoup.Jsoup", "org.jsoup.Jsoup");
      Jsoup.parse("menu", "r*t&Gjh1=ho!nl$JUmk");
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.Jsoup", "jx|_.!>\"d__>", "menu");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Jsoup.clean("", "menu", whitelist1, document_OutputSettings0);
      Jsoup.clean("org.jsoup.Jsoup", "menu", whitelist1);
      Jsoup.clean("", "jx|_.!>\"d__>", whitelist1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Jsoup.clean("", "", whitelist0, document_OutputSettings0);
      Jsoup.parse("", "");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Jsoup.parse("", "", parser1);
      // Undeclared exception!
      try { 
        Jsoup.parse("}C", (String) null, parser1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "org.jsoup.Jsoup";
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "org.jsoup.Jsoup");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)67;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-978), 1);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(3224);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser2 = parser1.settings(parseSettings0);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "3:@TA,w3", "", parser2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "W7rtwnW";
      String string1 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "W7rtwnW";
      // Undeclared exception!
      try { 
        Jsoup.isValid("", (Whitelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "/Z9iie]dl}";
      Whitelist whitelist0 = new Whitelist();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      Jsoup.clean("/Z9iie]dl}", "!f0Bv}/\"Y9", whitelist0, document_OutputSettings4);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) dataInputStream0, "/Z9iie]dl}", "/Z9iie]dl}", parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      Whitelist whitelist0 = Whitelist.basic();
      // Undeclared exception!
      try { 
        Jsoup.clean((String) null, whitelist0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Jsoup.parseBodyFragment("4TNc4");
      Whitelist whitelist0 = new Whitelist();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Jsoup.clean("4TNc4", "4TNc4", whitelist0, document_OutputSettings0);
      Jsoup.parse("4TNc4");
      Jsoup.parse("4TNc4");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Jsoup.parseBodyFragment("");
      URL uRL0 = MockURL.getHttpExample();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      try { 
        Jsoup.parse(uRL0, 99);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      Jsoup.parseBodyFragment("");
      String string1 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Whitelist whitelist0 = Whitelist.simpleText();
      // Undeclared exception!
      try { 
        Jsoup.isValid((String) null, whitelist0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Jsoup.parseBodyFragment("ggE_o0vsOw'");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)0);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "", "", parser1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-878), 0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) sequenceInputStream0, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      mockFile0.deleteOnExit();
      mockFile0.createNewFile();
      File file0 = MockFile.createTempFile("Initial", "Initial", (File) mockFile0);
      mockFile0.setReadOnly();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "<cuoQY}E5]p&7";
      mockFile0.setWritable(true, true);
      try { 
        Jsoup.parse(file0, "<cuoQY}E5]p&7", "org.jsoup.Jsoup");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      Whitelist whitelist0 = Whitelist.basic();
      // Undeclared exception!
      try { 
        Jsoup.clean((String) null, "", whitelist0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Jsoup.parseBodyFragment("_L\u00009'dup!-v", "org.jsoup.nodes.Elemen2");
      Whitelist whitelist0 = Whitelist.simpleText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("B\\i7h6i7G<\\*PrQNtc\\c9=~j75#ne@5\\@\\-9LC#^+ET'z_10-9LC#^+ET'z_1");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.jsoup.nodes.Elemen2");
      String[] stringArray0 = new String[4];
      Whitelist.basicWithImages();
      stringArray0[0] = "_L\u00009'dup!-v";
      stringArray0[1] = "org.jsoup.nodes.Elemen2";
      stringArray0[2] = "'f:H@}y7s''#\"VG'w";
      stringArray0[3] = "_L\u00009'dup!-v";
      Whitelist whitelist1 = whitelist0.addAttributes("'f:H@}y7s''#\"VG'w", stringArray0);
      Jsoup.isValid("[IZi9|k^i%686<$", whitelist1);
      Jsoup.parse("org.jsoup.nodes.Elemen2", "Bi7h6i7G<*PrQNtc");
      MockFile mockFile0 = new MockFile("Bi7h6i7G<*PrQNtc", "org.jsoup.nodes.Elemen2");
      File file0 = MockFile.createTempFile("-9LC#^+ET'z_1", "-9LC#^+ET'z_1", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2845);
      Parser parser0 = Parser.xmlParser();
      Jsoup.parse((InputStream) bufferedInputStream0, (String) null, "[IZi9|k^i%686<$", parser0);
      try { 
        Jsoup.parse((InputStream) mockFileInputStream0, "org.jsoup.nodes.Elemen2", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Whitelist.none();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        Jsoup.parse((InputStream) dataInputStream0, ";<;:h]L%Q|.ryD#", "[\"']");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "I\\Hi/3Ff";
      String string1 = "";
      MockFile mockFile0 = new MockFile("IHi/3Ff", "");
      mockFile0.createNewFile();
      String string2 = "LT-k[tlBQALE";
      mockFile0.setReadable(true, true);
      mockFile0.setWritable(true, true);
      String string3 = "org.jsoup.Jsoup";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.Jsoup");
      mockFile0.setWritable(true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.toURL();
      try { 
        Jsoup.parse((File) mockFile0, "LT-k[tlBQALE");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      try { 
        Jsoup.parse(uRL0, 50);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFile mockFile0 = new MockFile("h%4|R6Vv");
      try { 
        Jsoup.parse((File) mockFile0, "", "h%4|R6Vv");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      try { 
        Jsoup.parse((File) mockFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis((-2307L));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      document_OutputSettings2.outline(false);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.URL("", "", 0, "", uRLStreamHandler0);
      try { 
        Jsoup.parse(uRL0, 0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      StringReader stringReader0 = new StringReader("");
      parser0.parseInput((Reader) stringReader0, "");
      Parser parser1 = parser0.settings(parseSettings0);
      Parser.unescapeEntities("", true);
      Parser.htmlParser();
      parser1.settings(parseSettings0);
      String string0 = "";
      Parser.parseBodyFragment("exJdv8.H'SR9Q ~r", "");
      parser1.setTrackErrors(1167);
      Jsoup.parse("", "", parser1);
      String string1 = "5 T~NHJ#j<A<,3{Q[";
      Jsoup.parse("5 T~NHJ#j<A<,3{Q[");
      Whitelist whitelist0 = Whitelist.none();
      Jsoup.clean(",#j", whitelist0);
      // Undeclared exception!
      try { 
        Jsoup.connect("5 T~NHJ#j<A<,3{Q[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 5 T~NHJ#j<A<,3{Q[
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "]]>";
      Jsoup.parse("]]>");
      Whitelist whitelist0 = Whitelist.none();
      Jsoup.clean("]]>", whitelist0);
      File file0 = MockFile.createTempFile("]]>", "]]>");
      try { 
        Jsoup.parse(file0, "]]>", "]]>");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Jsoup.parseBodyFragment("4TN4");
      Jsoup.parseBodyFragment("4TN4", "menu");
      Jsoup.parse("org.jsoup.Jsoup", "org.jsoup.Jsoup");
      Jsoup.parse("menu", "r*t&Gjh1=ho!nl$JUmk");
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("org.jsoup.Jsoup", "jx|_.!>\"d__>", "menu");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Jsoup.clean("", "menu", whitelist1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Jsoup.isValid("_L\u00009'dup!-v", whitelist0);
      Jsoup.parse("org.jsoup.nodes.Elemen2", "_L\u00009'dup!-v");
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Elemen2", "org.jsoup.nodes.Elemen2");
      File file0 = MockFile.createTempFile("_L\u00009'dup!-v", "_L\u00009'dup!-v", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2845);
      Parser parser0 = Parser.xmlParser();
      Jsoup.parse((InputStream) bufferedInputStream0, (String) null, "org.jsoup.nodes.Elemen2", parser0);
      try { 
        Jsoup.parse((InputStream) mockFileInputStream0, "_L\u00009'dup!-v", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
