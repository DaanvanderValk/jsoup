/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:42:07 GMT 2018
 */

package org.jsoup.examples;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.examples.HtmlToPlainText;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HtmlToPlainText_ESTest extends HtmlToPlainText_ESTest_scaffolding {

  @Ignore
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("dt", (String) null).when(element0).nodeName();
      doReturn((Node) null).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&]7%6@8rD?";
      stringArray0[1] = "1";
      stringArray0[2] = "h1";
      String string0 = "";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("h2", (String) null).when(element0).nodeName();
      doReturn((Node) null).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      Element element1 = null;
      htmlToPlainText0.getPlainText((Element) null);
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("a", (String) null).when(element0).nodeName();
      doReturn((String) null).when(element0).absUrl(anyString());
      doReturn((Node) null).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element2).nodeName();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("9nD~Pi1/?*%=", (String) null).when(element0).nodeName();
      doReturn((Node) null).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "aside";
      stringArray0[1] = "rb8";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: aside
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element0).nodeName();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        HtmlToPlainText.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.examples.HtmlToPlainText", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "E=%K ";
      stringArray0[2] = "SBRjZrl9t@2Qv";
      stringArray0[3] = "";
      stringArray0[4] = "org.jsoup.select.Evaluator$Class";
      stringArray0[5] = "bQJ(7<";
      stringArray0[6] = "#%s";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = null;
      htmlToPlainText0.getPlainText((Element) null);
      htmlToPlainText0.getPlainText((Element) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1757)).when(element0).childNodeSize();
      doReturn("dt", "h5").when(element0).nodeName();
      doReturn(node0).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&]7%6@8rD?";
      stringArray0[1] = "1";
      stringArray0[2] = "h1";
      String string0 = "";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("li", (String) null).when(element0).nodeName();
      doReturn((Node) null).when(element0).nextSibling();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "li";
      stringArray0[0] = "li";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: li
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1995168072)).when(element0).childNodeSize();
      doReturn("a", "a").when(element0).nodeName();
      doReturn("St_<x^<Pz#").when(element0).absUrl(anyString());
      doReturn(node0).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1816)).when(element1).childNodeSize();
      doReturn("{y", " <St_<x^<Pz#>").when(element1).nodeName();
      doReturn(node1).when(element1).nextSibling();
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1995168072)).when(element2).childNodeSize();
      doReturn("Il0?", "\n").when(element2).nodeName();
      doReturn(node2).when(element2).nextSibling();
      htmlToPlainText0.getPlainText(element2);
      htmlToPlainText0.getPlainText(element1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = " <St_<x^<Pz#>";
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1995168072)).when(element0).childNodeSize();
      doReturn("a", "a").when(element0).nodeName();
      doReturn(">:B~9]D1TtLQRuM").when(element0).absUrl(anyString());
      doReturn(node0).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1995168072)).when(element1).childNodeSize();
      doReturn(":eq(%d)", ">:B~9]D1TtLQRuM").when(element1).nodeName();
      doReturn((Node) null).when(element1).nextSibling();
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1995168072)).when(element2).childNodeSize();
      doReturn("Il0?", ":eq(%d)").when(element2).nodeName();
      doReturn(node1).when(element2).nextSibling();
      htmlToPlainText0.getPlainText(element2);
      htmlToPlainText0.getPlainText(element1);
      Element element3 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element3).nodeName();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(1822).when(element0).childNodeSize();
      doReturn("7kGs'yZS~(a+d").when(element0).nodeName();
      doReturn((Node) null).when(element0).childNode(anyInt());
      htmlToPlainText0.getPlainText(element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element1).childNodeSize();
      doReturn("h5", (String) null).when(element1).nodeName();
      doReturn((Node) null).when(element1).nextSibling();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("X", (String) null).when(element0).nodeName();
      doReturn((Node) null).when(element0).nextSibling();
      htmlToPlainText0.getPlainText((Element) null);
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-826)).when(element0).childNodeSize();
      doReturn("h2", "h2").when(element0).nodeName();
      doReturn(node0).when(element0).nextSibling();
      htmlToPlainText0.getPlainText(element0);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
