/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:31:12 GMT 2018
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.helper.StringUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringUtil_ESTest extends StringUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = StringUtil.isActuallyWhitespace(1224);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      StringUtil.join(stringArray0, "");
      StringUtil.isActuallyWhitespace(1224);
      StringUtil.resolve("", "java.lang.String@0000000001");
      StringUtil.padding(1902);
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringUtil.join((Collection) linkedList0, "<[+SE");
      StringUtil.join((Collection) linkedList0, "       ");
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "java.lang.String@0000000001", false);
      StringUtil.stringBuilder();
      StringUtil.isActuallyWhitespace(1902);
      boolean boolean1 = StringUtil.in("", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      StringUtil.join((Collection) linkedList0, "");
      StringUtil.padding(21);
      StringUtil.isActuallyWhitespace(1224);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringUtil.normaliseWhitespace("?Btx");
      StringUtil.resolve("?Btx", "?Btx");
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringUtil.isNumeric("    ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "?Btx";
      stringArray0[2] = "";
      stringArray0[3] = "?Btx";
      stringArray0[4] = "";
      stringArray0[5] = "?Btx";
      stringArray0[6] = "?Btx";
      stringArray0[7] = "    ";
      stringArray0[8] = "";
      StringUtil.join(stringArray0, "{=>I3L+rAp)*");
      StringUtil.padding(32);
      StringUtil.isActuallyWhitespace(32);
      StringUtil.normaliseWhitespace("7");
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      linkedList0.add(stringBuilder0);
      StringUtil.join((Collection) linkedList0, "?V(M~>{0rrLINi8y,NB");
      StringUtil.isBlank("0xepZ0Bz+J8ATs-w-");
      StringUtil.isBlank("");
      StringUtil.isBlank("?Btx");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList1.descendingIterator();
      StringUtil.join(iterator0, "dF{Mq*KX0$>{");
      StringUtil.isWhitespace(32);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringUtil.isActuallyWhitespace(46);
      StringUtil.padding(987);
      StringUtil.normaliseWhitespace("=$`");
      StringUtil.isNumeric("=$`");
      StringUtil.isWhitespace(46);
      StringUtil.resolve("=$`", "                 ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=$`";
      stringArray
      stringArray0[2] = "";
      StringUtil.join(stringArray0, (String) null);
      StringUtil.isActuallyWhitespace(41);
      StringUtil.resolve("W!s*E_+^~=:ScEll$i
      StringUtil.isActuallyWhitespace((-379));
      StringUtil.resolve("=$`", "L");
      String string0 = StringUtil.join(stringArray0, "D&");
      StringUtil.join(stringArray0, "D&");
      StringUtil.isInvisibleChar(8204);
      StringUtil.isInvisibleChar(46);
      StringUtil.resolve(string0, "9k@Y%ntXp-|?aR");
      StringUtil.isActuallyWhitespace(41);
      StringUtil.padding(987);
      StringUtil.isBlank("");
      StringUtil.isBlank("D&");
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringUtil.isNumeric("[2XnS=>~X,nT_|");
      StringUtil.isActuallyWhitespace(477);
      StringUtil.resolve("[2XnS=>~X,nT_|", "java.net.URL@0000000001");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.net.URL@0000000001";
      stringArray0[1] = "java.net.URL@0000000001";
      stringArray0[2] = "[2XnS=>~X,nT_|";
      stringArray0[3] = "";
      StringUtil.in("[2XnS=>~X,nT_|", stringArray0);
      StringUtil.isActuallyWhitespace(160);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 9;
      StringUtil.isActuallyWhitespace(9);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.remove(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringUtil.isBlank("");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      linkedList0.stream();
      Object object1 = new Object();
      linkedList0.add(object1);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      StringUtil.join(iterator0, "-n_;@");
      StringUtil.join(iterator0, "");
      StringUtil.padding(0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "-n_;@";
      stringArray0[2] = "b6\"jAX@!BQx@";
      stringArray0[3] = "&gCLX";
      stringArray0[4] = "";
      StringUtil.join(stringArray0, "    ");
      StringUtil.normaliseWhitespace("b6\"jAX@!BQx@");
      StringUtil.isActuallyWhitespace((-711));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = "";
      stringArray0[1] = "iQ";
      stringArray0[2] = ")D";
      stringArray0[3] = ")$=v4Xj+U'r<8";
      String string1 = "zg)M^,)Pc{fJG%V";
      stringArray0[4] = "zg)M^,)Pc{fJG%V";
      StringUtil.join(stringArray0, "");
      StringUtil.isWhitespace(13);
      StringUtil.in("iQ", stringArray0);
      String string2 = "V(M~>{0rrLINi8y,NB";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("V(M~>{0rrLINi8y,NB", "h&peVg.G+@v1Jf", (-246), "", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-246
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 8203;
      StringUtil.isInvisibleChar(8203);
      StringUtil.isNumeric("                 ");
      StringBuilder stringBuilder0 = new StringBuilder();
      int int1 = (-2097);
      char char0 = 'J';
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2, (long) (-2097));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringUtil.stringBuilder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "    ";
      StringUtil.join(stringArray0, "    ");
      StringUtil.in("%,v)", stringArray0);
      StringUtil.stringBuilder();
      int int0 = 12;
      StringUtil.isWhitespace(12);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        linkedList0.listIterator(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtil.resolve("", "");
      StringUtil.isInvisibleChar(8237);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      StringUtil.join(stringArray0, "Tp.}qd");
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "java.lang.String@0000000001Tp.}qdTp.}qdTp.}qd");
      stringBuilder1.append((-1.0F));
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace(stringBuilder1, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringUtil.normaliseWhitespace("H)4r#az8GU");
      StringUtil.isBlank("H)4r#az8GU");
      StringUtil.isInvisibleChar(1536);
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "H)4r#az8GU");
      URL uRL2 = StringUtil.resolve(uRL1, "H)4r#az8GU");
      StringUtil.isInvisibleChar(10);
      StringUtil.isNumeric("H)4r#az8GU");
      StringUtil.isActuallyWhitespace((-1748));
      StringUtil.appendNormalisedWhitespace((StringBuilder) null, "", false);
      StringUtil.normaliseWhitespace("? ");
      StringUtil.resolve("? ", ":jO$|*=&gChN");
      StringUtil.normaliseWhitespace("H)4r#az8GU");
      StringUtil.resolve(uRL2, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H)4r#az8GU";
      StringUtil.join(stringArray0, "");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringUtil.normaliseWhitespace("org.jsoup.helper.StringUtil");
      StringUtil.isNumeric("ia");
      StringUtil.isBlank("Pr5)k%_mInDp@");
      StringUtil.resolve("org.jsoup.helper.StringUtil", "org.jsoup.helper.StringUtil");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jsoup.helper.StringUtil";
      stringArray0[1] = "Pr5)k%_mInDp@";
      stringArray0[2] = "ia";
      StringUtil.in("]]&GCn>/Pg9TiiW)", stringArray0);
      StringUtil.in(">-7RLX", stringArray0);
      StringUtil.inSorted("", stringArray0);
      StringUtil.isBlank("");
      StringUtil.resolve("xBYQsxlwg},Qo*#m8(K", "");
      StringUtil.inSorted("", stringArray0);
      StringUtil.isActuallyWhitespace(10);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringUtil.join((Collection) linkedList0, "N//L$A2^H14J<g4");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringUtil.normaliseWhitespace("org.jsoup.helper.StringUtil");
      StringUtil.isNumeric("ia");
      StringUtil.isBlank("Pr5)k%_mInDp@");
      StringUtil.resolve("org.jsoup.helper.StringUtil", "org.jsoup.helper.StringUtil");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jsoup.helper.StringUtil";
      stringArray0[1] = "Pr5)k%_mInDp@";
      stringArray0[2] = "ia";
      StringUtil.in("]]&GCn>/Pg9TiiW)", stringArray0);
      StringUtil.in(">-7RLX", stringArray0);
      StringUtil.inSorted("", stringArray0);
      StringUtil.isBlank("");
      StringUtil.resolve("xBYQsxlwg},Qo*#m8(K", "");
      StringUtil.inSorted("", stringArray0);
      StringUtil.isWhitespace(10);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringUtil.isWhitespace(0);
      StringUtil.normaliseWhitespace("");
      StringUtil.padding(0);
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      URL uRL2 = StringUtil.resolve(uRL1, "1>FM+!9q'qr-~fpFgL");
      StringUtil.resolve(uRL2, "");
      StringUtil.normaliseWhitespace("");
      StringUtil.padding(0);
      StringUtil.stringBuilder();
      StringUtil.isNumeric("");
      StringUtil.isWhitespace(9);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j";
      stringArray0[1] = "j";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "j";
      StringUtil.inSorted("j", stringArray0);
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn("j").when(iterator0).next();
      StringUtil.join(iterator0, "");
      StringUtil.isBlank(stringArray0[1]);
      int int0 = 0;
      StringUtil.isActuallyWhitespace(int0);
      int int1 = (-2923);
      // Undeclared exception!
      try { 
        StringUtil.padding(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringUtil.isActuallyWhitespace((-2937));
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '5';
      charArray0[2] = '=';
      charArray0[3] = '@';
      charArray0[4] = 'k';
      charArray0[5] = '8';
      stringBuilder0.insert(0, charArray0);
      StringUtil.appendNormalisedWhitespace(stringBuilder0, " bOZ", true);
      StringUtil.isWhitespace((-2937));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "               ";
      stringArray0[1] = "               ";
      stringArray0[2] = "               ";
      stringArray0[3] = "               ";
      stringArray0[4] = "               ";
      stringArray0[5] = "               ";
      stringArray0[6] = "               ";
      stringArray0[7] = "               ";
      stringArray0[0] = "               ";
      StringUtil.in("               ", stringArray0);
      URL uRL0 = MockURL.getHttpExample();
      StringUtil.resolve(uRL0, "               ");
      StringBuilder stringBuilder0 = new StringBuilder("V%Y`i(f&2");
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      StringUtil.appendNormalisedWhitespace(stringBuilder1, "               ", false);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringUtil.isInvisibleChar(0);
      StringUtil.isInvisibleChar(0);
      StringUtil.stringBuilder();
      StringUtil.isInvisibleChar(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "";
      stringArray0[3] = "";
      StringUtil.join(stringArray0, "");
      StringUtil.isNumeric("4");
      StringUtil.padding(0);
      StringUtil.isInvisibleChar(0);
      StringUtil.isNumeric("kp%^Ck*l3ewC 6b");
      StringUtil.inSorted("", stringArray0);
      StringUtil.isBlank("");
      StringUtil.inSorted("", stringArray0);
      StringUtil.padding(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clone();
      int int0 = 271;
      // Undeclared exception!
      try { 
        linkedList0.remove((-2425));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2425, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringUtil.isWhitespace((-1));
      StringUtil.isInvisibleChar((-1226));
      StringUtil.isNumeric((String) null);
      StringUtil.isWhitespace((-1226));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*#-)1_y[[9";
      StringUtil.in("*#-)1_y[[9", stringArray0);
      StringUtil.isBlank("*#-)1_y[[9");
      StringUtil stringUtil0 = new StringUtil();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "*#-)1_y[[9");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1226), (CharSequence) null, (-1), (-1226));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -1226
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringUtil.resolve("", "");
      StringUtil.isInvisibleChar(8205);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      StringUtil.join(stringArray0, "?");
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "java.lang.String@0000000001???");
      stringBuilder1.append((-1.0F));
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace(stringBuilder1, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringUtil.isInvisibleChar((-4131));
      StringUtil.isBlank("");
      int int0 = 6;
      StringUtil.padding(6);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "      ";
      stringArray0[1] = "";
      stringArray0[2] = "/F";
      stringArray0[3] = "";
      stringArray0[4] = "z*5rTj";
      stringArray0[5] = "      ";
      stringArray0[6] = "";
      stringArray0[7] = "5hQp9G>Z\"m";
      stringArray0[8] = "      ";
      StringUtil.in("z*5rTj", stringArray0);
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, "               ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringUtil.isActuallyWhitespace((-2937));
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '5';
      charArray0[2] = '=';
      charArray0[3] = '@';
      charArray0[4] = 'k';
      charArray0[5] = '8';
      stringBuilder0.insert(0, charArray0);
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "j bOZ", true);
      StringUtil.isWhitespace((-2937));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      StringUtil.join(iterator0, "*T`cN{CZk0");
      StringUtil.isBlank("java.lang.Object@0000000001");
      String string0 = null;
      StringUtil.join((Collection) linkedList0, (String) null);
      String string1 = "";
      StringUtil.join(iterator0, "");
      StringUtil.padding(8165);
      StringBuilder stringBuilder0 = new StringBuilder("java.lang.Object@0000000001");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 1;
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) stringBuffer0, 1, 8165);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 1, end 8165, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringUtil.resolve("              ", "SQN!7M.B(r");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      StringUtil.inSorted("              ", stringArray0);
      StringUtil.padding(1);
      StringUtil.padding(1);
      StringBuilder stringBuilder0 = new StringBuilder("");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(4718, (CharSequence) "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4718
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringUtil.padding(3);
      StringUtil.stringBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      linkedList0.add(integer0);
      StringUtil.join((Collection) linkedList0, "   ");
      StringUtil.normaliseWhitespace("                ");
      StringUtil.resolve("                ", "   ");
      try { 
        StringUtil.resolve((URL) null, "java.lang.Integer@0000000001");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: java.lang.Integer@0000000001
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringUtil.normaliseWhitespace("");
      StringUtil.resolve("j5 tn6xA}DHhxW{Vso", "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j5 tn6xA}DHhxW{Vso";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      StringUtil.join(stringArray0, "IO{$$$[T");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      StringUtil.join(stringArray1, "");
      // Undeclared exception!
      try { 
        StringUtil.join((Collection) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      String string0 = "{E2$Pg5gH6{5P<;%-:";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        StringUtil.appendNormalisedWhitespace((StringBuilder) null, "{E2$Pg5gH6{5P<;%-:", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "4 2R`E[mD.m4?]";
      StringUtil.resolve("4 2R`E[mD.m4?]", "4 2R`E[mD.m4?]");
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        StringUtil.join((String[]) null, "4 2R`E[mD.m4?]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      int int0 = 58;
      Integer integer0 = new Integer(58);
      linkedList0.add((Object) integer0);
      Object object0 = new Object();
      linkedList0.add(object0);
      int int1 = 0;
      linkedList0.removeFirst();
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      linkedList0.add((Object) listIterator0);
      String string0 = "*-";
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator) listIterator0, "*-");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringUtil.isActuallyWhitespace((-1094));
      StringUtil.normaliseWhitespace("");
      StringUtil.isWhitespace((-1094));
      StringUtil stringUtil0 = new StringUtil();
      LinkedList<StringBuilder> linkedList0 = new LinkedList<StringBuilder>();
      String string0 = null;
      StringUtil.join((Collection) linkedList0, (String) null);
      StringUtil.resolve("", "");
      StringUtil.normaliseWhitespace("");
      // Undeclared exception!
      try { 
        StringUtil.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "                    ";
      StringUtil.isBlank("                    ");
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      int int0 = 879;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(879, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 879
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringUtil.padding(0);
      StringUtil.normaliseWhitespace("");
      URL uRL0 = MockURL.getHttpExample();
      StringUtil.resolve(uRL0, "");
      StringUtil.padding(1474);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringUtil.normaliseWhitespace("w~I2!#Ds:HlXU/Y");
      StringUtil.isActuallyWhitespace(1);
      URL uRL0 = MockURL.getFileExample();
      StringUtil.resolve(uRL0, "w~I2!#Ds:HlXU/Y");
      StringUtil.normaliseWhitespace("w~I2!#Ds:HlXU/Y");
      // Undeclared exception!
      try { 
        StringUtil.inSorted("<eo", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringUtil.resolve("?", "--6O.<");
      StringUtil.padding(1);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator(0);
      StringUtil.join((Iterator) listIterator0, " ");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast(" ");
      linkedList0.push(" ");
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      StringUtil.join((Collection) linkedList1, "vU1Z\nf");
      StringUtil.isActuallyWhitespace(1739);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringUtil.isNumeric("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      StringUtil.inSorted("", stringArray0);
      StringUtil.isNumeric("");
      StringUtil.isNumeric("S5~]jT9");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringUtil.normaliseWhitespace("O&:Bb[?i6Cx");
      StringUtil.isWhitespace((-1044));
      StringUtil.isBlank("");
      try { 
        StringUtil.resolve((URL) null, "6pva");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 6pva
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringUtil.isBlank((String) null);
      StringUtil.padding(0);
      StringUtil.isActuallyWhitespace(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringUtil.isBlank("oF7bm");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringUtil.isActuallyWhitespace(0);
      StringUtil.resolve("", "");
      StringUtil.resolve("", "");
      StringUtil.isInvisibleChar(0);
      StringUtil.normaliseWhitespace("");
      // Undeclared exception!
      try { 
        StringUtil.join((Iterator) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringUtil.join((Collection) linkedList0, "46SW");
      int int0 = 0;
      StringUtil.isWhitespace(0);
      StringUtil.isNumeric("                ");
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "46SW", false);
      String string0 = "?";
      // Undeclared exception!
      try { 
        StringUtil.resolve((URL) null, "?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      StringUtil.resolve(uRL0, "");
      StringUtil stringUtil0 = new StringUtil();
      StringUtil.normaliseWhitespace("");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringUtil.resolve("`j=", "");
      StringUtil.resolve("`j=", "");
      StringUtil.normaliseWhitespace("                   ");
      int int0 = (-1);
      StringUtil.isInvisibleChar((-1));
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      StringUtil.in("u/", stringArray0);
      // Undeclared exception!
      try { 
        StringUtil.padding((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringUtil.normaliseWhitespace("      ");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " ");
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, ']');
      stringBuilder1.appendCodePoint(0);
      StringBuilder stringBuilder2 = stringBuilder0.append(0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1732, (char[]) null, 0, 85);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1732
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringUtil.normaliseWhitespace("^etH7h9>\"&)Rq CUG");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      StringUtil.stringBuilder();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "kQ\"";
      stringArray0[1] = "Cq[{6X!mTQ8iE";
      StringUtil.join(stringArray0, "");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringUtil.resolve("dZJ%1I", "kcd4wz/!}G^MG");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringUtil.resolve("!n$<wPXF;`s", "!n$<wPXF;`s");
      StringUtil.isNumeric("k");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!n$<wPXF;`s";
      stringArray0[1] = "k";
      StringUtil.in("!n$<wPXF;`s", stringArray0);
      StringUtil.stringBuilder();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList1.add((Object) linkedList0);
      linkedList1.offer(linkedList0);
      linkedList0.retainAll(linkedList1);
      linkedList0.pollFirst();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      StringUtil.join((Collection) linkedList0, "");
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      StringUtil.isActuallyWhitespace(0);
      String[] stringArray0 = new String[0];
      StringUtil.in("", stringArray0);
      StringUtil.resolve("", "bgN");
      StringUtil.padding(0);
      StringUtil.join(stringArray0, "i7*nWG");
      StringUtil.resolve("bgN", "");
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "W9T$", true);
      StringUtil.join((Collection) linkedList0, "");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringUtil.resolve("org.jsoup.helper.StringUtil", "org.jsoup.helper.StringUtil");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringUtil.stringBuilder();
      StringUtil.isNumeric("8sYN!d\"");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Q5-(G_GJ";
      stringArray0[1] = "Q5-(G_GJ";
      stringArray0[2] = "";
      stringArray0[3] = "Q5-(G_GJ";
      StringUtil.in("Q5-(G_GJ", stringArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringUtil.stringBuilder();
      // Undeclared exception!
      try { 
        StringUtil.in("tg,g9Ok/Uu{,0{>", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringUtil.isActuallyWhitespace(9);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("PIbm|P5>${R*q*mB{3@");
      linkedList0.pop();
      StringUtil.join((Collection) linkedList0, "sL` &)3rP<?5#wJ");
      StringUtil.isWhitespace(9);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        StringUtil.in("sL` &)3rP<?5#wJ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringUtil.isBlank((String) null);
      // Undeclared exception!
      try { 
        StringUtil.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-29);
      StringUtil.isInvisibleChar((-29));
      StringUtil.isInvisibleChar((-29));
      StringUtil.stringBuilder();
      StringUtil.isInvisibleChar((-29));
      String[] stringArray0 = new String[11];
      stringArray0[0] = "";
      String string0 = "4";
      stringArray0[1] = "4";
      stringArray0[2] = "";
      String string1 = "";
      stringArray0[3] = "";
      StringUtil.join(stringArray0, "");
      StringUtil.isNumeric("4");
      // Undeclared exception!
      try { 
        StringUtil.padding((-29));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      StringUtil.resolve(uRL0, "?qjJxJ1<klM");
      StringUtil.padding(8);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((Object) "?qjJxJ1<klM");
      stringBuilder0.append(':');
      stringBuilder0.appendCodePoint(8203);
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "        ", true);
      StringUtil.isNumeric("?qjJxJ1<klM");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringUtil.join((Collection) linkedList0, "9y8");
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      StringUtil.join(iterator0, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "?qjJxJ1<klM";
      stringArray0[1] = "";
      stringArray0[2] = "        ";
      StringUtil.in("", stringArray0);
      StringUtil.normaliseWhitespace("");
      StringUtil.resolve(uRL0, "9y8");
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "iQ";
      stringArray0[2] = ")D";
      stringArray0[3] = "";
      stringArray0[4] = "zg)M^,)Pc{fJG%V";
      StringUtil.isWhitespace(13);
      StringUtil.isActuallyWhitespace(13);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("iQ", "iQ", "zg)M^,)Pc{fJG%V");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: iq
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      StringUtil.padding(23);
      StringUtil.isNumeric("z");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringUtil.join((Collection) linkedList0, "9y8");
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      StringUtil.join(iterator0, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z";
      stringArray0[1] = "";
      stringArray0[2] = "                       ";
      StringUtil.in("", stringArray0);
      StringUtil.normaliseWhitespace("");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Iterator<Object> iterator1 = linkedList1.descendingIterator();
      StringUtil.join(iterator1, "");
      // Undeclared exception!
      try { 
        StringUtil.resolve(uRL0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringUtil.normaliseWhitespace("H)4r#az8GU");
      StringUtil.isBlank("H)4r#az8GU");
      StringUtil.isInvisibleChar(1536);
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "H)4r#az8GU");
      URL uRL2 = StringUtil.resolve(uRL1, "H)4r#az8GU");
      StringUtil.isInvisibleChar(10);
      StringUtil.isNumeric("H)4r#az8GU");
      StringUtil.isActuallyWhitespace((-1748));
      StringUtil.normaliseWhitespace("? ");
      StringUtil.resolve("? ", ":jO$|*=&gChN");
      StringUtil.normaliseWhitespace("H)4r#az8GU");
      StringUtil.resolve(uRL2, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H)4r#az8GU";
      StringUtil.join(stringArray0, "");
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringUtil.normaliseWhitespace("H)4r#az8GU");
      StringUtil.isBlank("H)4r#az8GU");
      StringUtil.isInvisibleChar(1536);
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "H)4r#az8GU");
      URL uRL2 = StringUtil.resolve(uRL1, "H)4r#az8GU");
      StringUtil.isInvisibleChar(10);
      StringUtil.isNumeric("H)4r#az8GU");
      StringUtil.isWhitespace(10);
      StringUtil.normaliseWhitespace("? ");
      StringUtil.resolve("? ", ":jO$|*=&gChN");
      StringUtil.normaliseWhitespace("H)4r#az8GU");
      StringUtil.resolve(uRL2, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "H)4r#az8GU";
      StringUtil.join(stringArray0, "");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = StringUtil.resolve(uRL0, "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) uRL1);
      StringUtil.join((Collection) linkedList0, "");
      StringUtil.isActuallyWhitespace(14);
      StringUtil.isActuallyWhitespace((-936));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?Btx";
      stringArray0[1] = "java.net.URL@0000000001";
      stringArray0[2] = "";
      linkedList0.add((Object) "?Btx");
      stringArray0[3] = "?Btx";
      stringArray0[4] = "";
      stringArray0[5] = "Kn|YE";
      stringArray0[6] = "";
      StringUtil.in(",~ RAhN.]", stringArray0);
      StringUtil.resolve("", (String) null);
      StringUtil.isWhitespace((-231));
      StringUtil.isNumeric("?Btx");
      StringUtil.normaliseWhitespace("b6\"jAX@!BQx@");
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      StringUtil.join(iterator0, (String) null);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringUtil.isActuallyWhitespace((-2937));
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = '+';
      charArray0[2] = 'w';
      charArray0[3] = 'N';
      charArray0[4] = 'x';
      charArray0[5] = '~';
      charArray0[6] = 'G';
      stringBuilder0.insert(0, charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = ',';
      charArray1[1] = ',';
      charArray1[2] = '=';
      charArray1[3] = '@';
      charArray1[4] = 'k';
      charArray1[5] = '8';
      stringBuilder0.insert(0, charArray1);
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "j bOZ", true);
      StringUtil.isWhitespace((-2937));
      StringUtil.isNumeric((String) null);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringUtil.isInvisibleChar(0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0I";
      stringArray0[0] = "0I";
      StringUtil.inSorted("0I", stringArray0);
      StringUtil stringUtil0 = new StringUtil();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList0.add(105, "0I");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 105, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringUtil.normaliseWhitespace("org.jsoup.helper.StringUtil");
      StringUtil.isNumeric("ia");
      StringUtil.isBlank("Pr5)k%_mInDp@");
      StringUtil.resolve("org.jsoup.helper.StringUtil", "org.jsoup.helper.StringUtil");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jsoup.helper.StringUtil";
      stringArray0[1] = "Pr5)k%_mInDp@";
      stringArray0[2] = "ia";
      StringUtil.in("]]&GCn>/Pg9TiiW)", stringArray0);
      StringUtil.in(">-7RLX", stringArray0);
      StringUtil.inSorted("", stringArray0);
      StringUtil.isBlank("");
      StringUtil.resolve("xBYQsxlwg},Qo*#m8(K", "]]&GCn>/Pg9TiiW)");
      StringUtil.inSorted("", stringArray0);
      StringUtil.isActuallyWhitespace(10);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      StringUtil.join((Collection) linkedList0, "N//L$A2^H14J<g4");
      StringUtil.isWhitespace(10);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "j";
      stringArray0[1] = "j";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "j";
      StringUtil.inSorted("j", stringArray0);
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      StringUtil.join(iterator0, "");
      StringUtil.isNumeric("");
      int int0 = 0;
      StringUtil.isWhitespace(0);
      int int1 = (-2923);
      // Undeclared exception!
      try { 
        StringUtil.padding((-2923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringUtil.padding(3);
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StringUtil.join((Collection) linkedList0, "   ");
      StringUtil.normaliseWhitespace("                ");
      StringUtil.resolve("                ", "   ");
      StringUtil stringUtil0 = new StringUtil();
      StringUtil.appendNormalisedWhitespace(stringBuilder0, "Ba%JO&)@x<Zr=x`", false);
      assertEquals(" Ba%JO&)@x<Zr=x`", stringBuilder0.toString());
      
      StringUtil.resolve(" ", "   ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      boolean boolean0 = StringUtil.inSorted("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringUtil.isInvisibleChar(8205);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      StringUtil.join(stringArray0, "?");
      StringBuilder stringBuilder0 = StringUtil.stringBuilder();
      stringBuilder0.append((CharSequence) "java.lang.String@0000000001??null?");
      // Undeclared exception!
      try { 
        stringBuilder0.insert(8205, 8205);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 8205
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
