/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:41:12 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_StartTag0.type = token_TokenType0;
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      StringBuilder stringBuilder0 = token_Comment0.data;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      token_StartTag0.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_EndTag0.attributes = null;
      charArray0[1] = 'w';
      token_StartTag1.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeName('u');
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.name("");
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      String string0 = token_StartTag1.tokenType();
      assertNotNull(string0);
      assertEquals("StartTag", string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      token_StartTag2.normalName = "";
      token_StartTag1.appendAttributeValue("");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      token_StartTag2.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      token_StartTag1.selfClosing = false;
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_StartTag2.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      token_Doctype0.forceQuirks = true;
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      String string0 = token_Doctype0.getPubSysKey();
      assertNull(string0);
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName('/');
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendTagName('/');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string1 = token_EndTag0.tokenType();
      assertNotNull(string1);
      assertEquals("EndTag", string1);
      assertSame(token_EndTag0, token_EndTag1);
      
      String string2 = token_EndTag1.tokenType();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("EndTag", string2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '/';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[3] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[5] = (int) '/';
      intArray0[6] = (int) '/';
      intArray0[7] = 47;
      intArray0[8] = 0;
      token_EndTag0.appendAttributeValue(intArray0);
      assertArrayEquals(new int[] {47, 47, 47, 47, 47, 47, 47, 47, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(token_EndTag0, token_EndTag1);
      
      String string3 = token_EndTag0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("<//>", string3);
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean0 = token_EndTag1.isComment();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string4 = token_Comment0.getData();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      Token.TokenType[] token_TokenTypeArray1 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray1);
      assertEquals(6, token_TokenTypeArray1.length);
      assertFalse(token_TokenTypeArray1.equals((Object)token_TokenTypeArray0));
      assertNotSame(token_TokenTypeArray1, token_TokenTypeArray0);
      
      Token.TokenType[] token_TokenTypeArray2 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray2);
      assertEquals(6, token_TokenTypeArray2.length);
      assertFalse(token_TokenTypeArray2.equals((Object)token_TokenTypeArray1));
      assertFalse(token_TokenTypeArray2.equals((Object)token_TokenTypeArray0));
      assertNotSame(token_TokenTypeArray2, token_TokenTypeArray1);
      assertNotSame(token_TokenTypeArray2, token_TokenTypeArray0);
      
      Token.EndTag token_EndTag3 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag2);
      
      String string5 = token_EndTag3.normalName();
      assertNull(string5);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag2);
      
      Token.Doctype token_Doctype1 = token_Doctype0.asDoctype();
      assertNotNull(token_Doctype1);
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertTrue(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      boolean boolean1 = token_StartTag0.isEOF();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEOF();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendAttributeName("Z4i");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName("Z4i");
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      String string0 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string0);
      
      String string1 = token_Doctype0.getSystemIdentifier();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string1);
      
      token_EndTag0.appendAttributeName("data-");
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean1 = token_EndTag1.isStartTag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      String string2 = token_Comment0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<!---->", string2);
      
      String string3 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        token_EndTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = token_Comment0.getData();
      assertNotNull(string0);
      assertEquals("", string0);
      
      Token.CData token_CData0 = new Token.CData("]'LnA");
      assertNotNull(token_CData0);
      
      String string1 = token_CData0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<![CDATA[]'LnA]]>", string1);
      
      String string2 = token_CData0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("<![CDATA[]'LnA]]>", string2);
      
      boolean boolean0 = token_Comment0.isComment();
      assertTrue(boolean0);
      
      Token token0 = token_CData0.reset();
      assertNotNull(token0);
      assertSame(token_CData0, token0);
      assertSame(token0, token_CData0);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.finaliseTag();
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EndTag0.type = token_TokenType0;
      token_EndTag0.tagName = ":c:nDp$";
      token_EndTag0.appendAttributeValue("18|!r |cQvht]");
      token_EndTag0.setEmptyAttributeValue();
      token_EndTag0.appendAttributeValue(":c:nDp$");
      token_EndTag0.selfClosing = true;
      token_EndTag0.appendAttributeValue('z');
      boolean boolean0 = token_EndTag0.isEOF();
      assertFalse(boolean0);
      
      String string0 = token_EndTag0.normalName();
      assertNull(string0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      boolean boolean1 = token_Doctype0.isForceQuirks();
      assertTrue(boolean1 == boolean0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = token_Doctype0.asDoctype();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      String string0 = "Wf";
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_Doctype0.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.TokenType token_TokenType1 = Token.TokenType.Doctype;
      token_Doctype1.type = token_TokenType1;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      token_Doctype0.pubSysKey = "Wf";
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      String string1 = token_Doctype1.tokenType();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("Doctype", string1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      String string2 = token_Doctype0.tokenType();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("Doctype", string2);
      assertSame(token_Doctype0, token_Doctype1);
      
      token_Doctype1.forceQuirks = false;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      token_Doctype1.forceQuirks = false;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      String string3 = token_Doctype1.tokenType();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("Doctype", string3);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      token_Doctype0.pubSysKey = null;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      boolean boolean0 = token_Doctype0.isDoctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertTrue(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      
      boolean boolean1 = token_Doctype0.isDoctype();
      assertTrue(boolean1 == boolean0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertTrue(boolean1);
      assertSame(token_Doctype0, token_Doctype1);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("#[L]^ewP");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      Token.EndTag token_EndTag3 = (Token.EndTag)token_EndTag2.name("Aza4[jD8Er_R^XX");
      assertNotNull(token_EndTag3);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag3);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag2);
      
      String string0 = token_EndTag2.toString();
      assertNotNull(string0);
      assertEquals("</Aza4[jD8Er_R^XX>", string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag3);
      assertSame(token_EndTag2, token_EndTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      String string1 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string1);
      
      token_EndTag3.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag3);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag2);
      
      boolean boolean0 = token_EndTag3.isCharacter();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag3);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag2);
      
      token_EndTag3.appendAttributeValue("#[L]^ewP");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag3);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag2);
      
      char char0 = 'd';
      token_EndTag1.appendTagName('d');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean1 = token_EndTag3.isEndTag();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag3);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag0);
      assertSame(token_EndTag3, token_EndTag1);
      assertSame(token_EndTag3, token_EndTag2);
      
      boolean boolean2 = token_EndTag1.isEndTag();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag3);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag3);
      assertSame(token_EndTag1, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag1.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.selfClosing = true;
      Token.Tag token_Tag0 = token_EndTag0.name("");
      assertNotNull(token_Tag0);
      assertSame(token_EndTag0, token_Tag0);
      assertSame(token_Tag0, token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_Tag0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_Tag0);
      assertSame(token_EndTag1, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag1.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag1.isSelfClosing();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.asStartTag();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = token_Doctype0.asDoctype();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype1.name;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      
      // Undeclared exception!
      try { 
        token_Doctype0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      
      boolean boolean1 = token_Doctype0.isEndTag();
      assertTrue(boolean1 == boolean0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean1);
      
      Token.CData token_CData0 = new Token.CData("Y{,'n");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("Y{,'n");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.reset();
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendTagName(":h-f\u0002ts!T#");
      boolean boolean2 = token_CData1.isCData();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData1, token_CData2);
      
      boolean boolean3 = token_CData1.isCData();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData1, token_CData2);
      
      String string0 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string0);
      
      token_StartTag0.appendTagName('6');
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      boolean boolean4 = token_Doctype0.isForceQuirks();
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean4);
      assertSame(token_Doctype0, token_Doctype1);
      
      // Undeclared exception!
      try { 
        token_CData0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("3k,1%Ifp!BsWy9s");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName('8');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.asComment();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment1.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      String string0 = token_Character0.getData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      Token.Character token_Character1 = (Token.Character)token_Character0.reset();
      assertNotNull(token_Character1);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character1, token_Character0);
      
      boolean boolean0 = token_Character0.isComment();
      assertFalse(boolean0);
      assertSame(token_Character0, token_Character1);
      
      Token.Character token_Character2 = (Token.Character)token_Character0.reset();
      assertNotNull(token_Character2);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character0, token_Character2);
      assertSame(token_Character2, token_Character0);
      assertSame(token_Character2, token_Character1);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      Token.Character token_Character3 = token_Character1.asCharacter();
      assertNotNull(token_Character3);
      assertSame(token_Character0, token_Character3);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character0, token_Character2);
      assertSame(token_Character1, token_Character0);
      assertSame(token_Character1, token_Character3);
      assertSame(token_Character1, token_Character2);
      assertSame(token_Character3, token_Character2);
      assertSame(token_Character3, token_Character1);
      assertSame(token_Character3, token_Character0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEndTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.normalName = "defer";
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        token_EndTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      Token.Character token_Character1 = token_Character0.data("l9G");
      assertNotNull(token_Character1);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character1, token_Character0);
      
      String string0 = token_Character0.toString();
      assertNotNull(string0);
      assertEquals("l9G", string0);
      assertSame(token_Character0, token_Character1);
      
      // Undeclared exception!
      try { 
        token_Character1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      char[] charArray0 = new char[4];
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      StringBuilder stringBuilder0 = token_Comment0.data;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      charArray0[0] = '^';
      charArray0[1] = 'i';
      token_EndTag0.appendAttributeName("selected");
      charArray0[2] = 'R';
      charArray0[3] = 'D';
      token_EndTag0.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'^', 'i', 'R', 'D'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      token_EndTag0.appendAttributeName('*');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      
      boolean boolean0 = token_EndTag0.isCharacter();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      
      // Undeclared exception!
      try { 
        Token.TokenType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.parser.Token.TokenType.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("fLP2.vzo");
      assertNotNull(token_CData0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("fLP2.vzo");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.reset();
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
      
      boolean boolean0 = token_CData1.isCharacter();
      assertTrue(boolean0);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData1, token_CData0);
      
      Token.Doctype token_Doctype1 = new Token.Doctype();
      assertNotNull(token_Doctype1);
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Doctype1.type = token_TokenType0;
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      String string0 = token_CData0.tokenType();
      assertNotNull(string0);
      assertEquals("CData", string0);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      
      String string1 = token_Doctype1.tokenType();
      assertNotNull(string1);
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("Doctype", string1);
      assertNotSame(token_Doctype1, token_Doctype0);
      
      Token.Doctype token_Doctype2 = (Token.Doctype)token_Doctype1.reset();
      assertNotNull(token_Doctype2);
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertFalse(token_Doctype2.equals((Object)token_Doctype0));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertNotSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      assertNotSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      
      String string2 = token_Doctype2.tokenType();
      assertNotNull(string2);
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertFalse(token_Doctype2.equals((Object)token_Doctype0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("Doctype", string2);
      assertNotSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      assertNotSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      
      String string3 = token_CData0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<![CDATA[null]]>", string3);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token_CData2);
      
      boolean boolean1 = token_Doctype1.isForceQuirks();
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertFalse(boolean1 == boolean0);
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertFalse(boolean1);
      assertNotSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_CData0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEOF();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendAttributeName("");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName("");
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      String string0 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string0);
      
      String string1 = token_Doctype0.getSystemIdentifier();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string1);
      
      token_EndTag0.appendAttributeName("data-");
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean1 = token_EndTag1.isStartTag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_StartTag0.type = token_TokenType0;
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      token_StartTag0.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_EndTag0.attributes = null;
      charArray0[1] = 'w';
      token_StartTag1.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeName('u');
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.name("");
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string0 = token_StartTag1.tokenType();
      assertNotNull(string0);
      assertEquals("StartTag", string0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag2.normalName = "";
      token_StartTag1.appendAttributeValue("");
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag2.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      
      token_StartTag1.selfClosing = false;
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      String string0 = token_CData0.toString();
      assertNotNull(string0);
      assertEquals("<![CDATA[]]>", string0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendTagName('}');
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char char0 = 'c';
      token_EndTag0.selfClosing = true;
      token_EndTag1.appendTagName('c');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string1 = token_EndTag1.name();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("c", string1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      // Undeclared exception!
      try { 
        token_EndTag1.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.finaliseTag();
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EndTag0.type = token_TokenType0;
      token_EndTag0.tagName = ":c:nDp$";
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeValue("18|!r |cQvht]");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName('8');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeValue(":c:nDp$");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.selfClosing = true;
      token_EndTag1.appendAttributeValue('z');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag1.isEOF();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.normalName();
      assertNotNull(string0);
      assertEquals("8", string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      boolean boolean1 = token_Doctype0.isForceQuirks();
      assertTrue(boolean1 == boolean0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEOF();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendAttributeName("");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName("");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendAttributeValue("^m|A7@V1C");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag0.appendAttributeName("data-");
      assertSame(token_EndTag0, token_EndTag1);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      boolean boolean0 = token_EOF0.isCData();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      token_EndTag0.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      String string0 = token_Doctype0.tokenType();
      assertNotNull(string0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("Doctype", string0);
      
      String string1 = token_Doctype0.getSystemIdentifier();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_Doctype1.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      
      Token.Doctype token_Doctype2 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype2);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      
      String string0 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      
      String string1 = token_Doctype2.tokenType();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("Doctype", string1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      
      String string2 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      
      boolean boolean0 = token_Doctype2.isComment();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertFalse(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_StartTag0.appendAttributeName("selected");
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("selected", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = token_StartTag1.nameAttr("selected", (Attributes) null);
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      boolean boolean0 = token_StartTag1.isComment();
      assertFalse(boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.CData token_CData0 = new Token.CData((String) null);
      assertNotNull(token_CData0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token token0 = token_CData0.reset();
      assertNotNull(token0);
      assertSame(token_CData0, token0);
      assertSame(token0, token_CData0);
      
      Token.reset((StringBuilder) null);
      token_StartTag2.appendAttributeValue('s');
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      String string0 = token_Doctype0.getName();
      assertNotNull(string0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.newAttribute();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.reset();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 5114;
      token_StartTag0.appendAttributeValue("");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      
      intArray0[1] = 2313;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      token_StartTag2.appendAttributeValue(intArray0);
      assertArrayEquals(new int[] {5114, 2313, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      
      Token.StartTag token_StartTag3 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeValue('U');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_StartTag0.type = token_TokenType0;
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      token_StartTag0.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_EndTag0.attributes = null;
      charArray0[1] = 'w';
      token_StartTag1.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.name("");
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      String string0 = token_StartTag1.tokenType();
      assertNotNull(string0);
      assertEquals("StartTag", string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      token_StartTag2.normalName = "";
      token_StartTag1.appendAttributeValue("");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      token_StartTag2.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      token_StartTag1.selfClosing = false;
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_EndTag1.type = token_TokenType0;
      boolean boolean0 = token_EndTag1.isStartTag();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeValue("z|$X#V+");
      assertSame(token_EndTag0, token_EndTag1);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeName('x');
      token_StartTag0.appendTagName('L');
      // Undeclared exception!
      try { 
        token_StartTag0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = token_StartTag0.normalName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      Token.Character token_Character0 = token_CData0.data("");
      assertNotNull(token_Character0);
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      
      boolean boolean0 = token_CData0.isEndTag();
      assertFalse(boolean0);
      assertSame(token_CData0, token_Character0);
      
      String string0 = token_CData0.tokenType();
      assertNotNull(string0);
      assertEquals("CData", string0);
      assertSame(token_CData0, token_Character0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_StartTag0.finaliseTag();
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag1.name("CData");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_Tag0, token_StartTag1);
      assertSame(token_Tag0, token_StartTag0);
      
      String string1 = token_StartTag1.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<CData>", string1);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_Tag0);
      
      Token.Tag token_Tag1 = token_StartTag1.reset();
      assertNotNull(token_Tag1);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_Tag0);
      assertSame(token_StartTag1, token_Tag1);
      assertSame(token_Tag1, token_StartTag1);
      assertSame(token_Tag1, token_Tag0);
      assertSame(token_Tag1, token_StartTag0);
      
      Token.Tag token_Tag2 = token_StartTag0.name((String) null);
      assertNotNull(token_Tag2);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_Tag2);
      assertSame(token_Tag2, token_StartTag1);
      assertSame(token_Tag2, token_Tag1);
      assertSame(token_Tag2, token_Tag0);
      assertSame(token_Tag2, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendTagName("muted");
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("crl((r");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_Comment1.type = token_TokenType0;
      String string0 = token_EndTag2.name();
      assertNotNull(string0);
      assertEquals("crl((r", string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        token_Character0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      boolean boolean0 = token_Comment0.isDoctype();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        token_Comment0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token token0 = token_EOF0.reset();
      assertNotNull(token0);
      assertSame(token_EOF0, token0);
      assertSame(token0, token_EOF0);
      
      // Undeclared exception!
      try { 
        token_EOF0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      // Undeclared exception!
      try { 
        token_EOF1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      // Undeclared exception!
      try { 
        token_EndTag0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = token_Doctype0.tokenType();
      assertNotNull(string0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("Doctype", string0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = token_Doctype0.publicIdentifier;
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertEquals("", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      
      Token.reset(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder1.toString());
      assertNotSame(stringBuilder1, stringBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      String string0 = token_Doctype0.getName();
      assertNotNull(string0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string0);
      
      String string1 = token_Doctype0.getPubSysKey();
      assertNull(string1);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("default", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Attributes attributes1 = token_StartTag1.getAttributes();
      assertNull(attributes1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      token_Doctype0.forceQuirks = true;
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertNotNull(token_Doctype1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_Doctype0.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      Token.TokenType token_TokenType1 = Token.TokenType.EndTag;
      token_Doctype1.type = token_TokenType1;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      boolean boolean0 = token_Doctype0.isDoctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      
      boolean boolean1 = token_Doctype1.isEOF();
      assertTrue(boolean1 == boolean0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertFalse(boolean1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      boolean boolean0 = token_EOF0.isDoctype();
      assertFalse(boolean0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      boolean boolean1 = token_EOF1.isEOF();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      // Undeclared exception!
      try { 
        token_EOF0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      char char0 = 'n';
      token_StartTag0.finaliseTag();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'n';
      intArray0[2] = (int) 'n';
      intArray0[3] = (int) 'n';
      intArray0[4] = (int) 'n';
      intArray0[5] = (int) 'n';
      token_StartTag0.appendAttributeValue(intArray0);
      assertArrayEquals(new int[] {110, 0, 110, 110, 110, 110}, intArray0);
      assertEquals(6, intArray0.length);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("org.jsoup.parser.Token$CData");
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EOF;
      token_EndTag0.type = token_TokenType0;
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      token_EndTag0.appendAttributeValue('O');
      boolean boolean0 = token_EndTag0.isEndTag();
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      token_EndTag0.appendAttributeValue(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = token_EndTag0.isSelfClosing();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      String string0 = token_Character0.tokenType();
      assertNotNull(string0);
      assertEquals("Character", string0);
      
      Token.Character token_Character1 = token_Character0.asCharacter();
      assertNotNull(token_Character1);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character1, token_Character0);
      
      Token.Character token_Character2 = token_Character0.asCharacter();
      assertNotNull(token_Character2);
      assertSame(token_Character0, token_Character2);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character2, token_Character1);
      assertSame(token_Character2, token_Character0);
      
      String string1 = token_Character1.toString();
      assertNull(string1);
      assertSame(token_Character0, token_Character2);
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character1, token_Character2);
      assertSame(token_Character1, token_Character0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EOF;
      token_Character2.type = token_TokenType0;
      // Undeclared exception!
      try { 
        token_Character2.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = "@!\"eU";
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.Tag token_Tag0 = token_EndTag0.reset();
      assertNotNull(token_Tag0);
      assertSame(token_EndTag0, token_Tag0);
      assertSame(token_Tag0, token_EndTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("@!\"eU", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string1 = token_StartTag1.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<@!\"eU>", string1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEOF();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendAttributeName("Z4i");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName("Z4i");
      assertSame(token_EndTag0, token_EndTag1);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      String string0 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string0);
      
      String string1 = token_Doctype0.getSystemIdentifier();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string1);
      
      token_EndTag0.appendAttributeName("data-");
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean1 = token_EndTag1.isStartTag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      String string2 = token_EndTag1.normalName();
      assertNull(string2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string3 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string3);
      
      String string4 = token_Doctype0.getName();
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertNotNull(token_TokenTypeArray0);
      assertEquals(6, token_TokenTypeArray0.length);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      token_Doctype0.forceQuirks = true;
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      String string0 = token_Doctype0.getPubSysKey();
      assertNull(string0);
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName('/');
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.appendTagName('/');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string1 = token_EndTag0.tokenType();
      assertNotNull(string1);
      assertEquals("EndTag", string1);
      assertSame(token_EndTag0, token_EndTag1);
      
      String string2 = token_EndTag1.tokenType();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("EndTag", string2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '/';
      intArray0[1] = (int) '/';
      intArray0[2] = (int) '/';
      intArray0[3] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[3] = (int) '/';
      intArray0[6] = (int) '/';
      intArray0[7] = 47;
      intArray0[8] = 0;
      token_EndTag0.appendAttributeValue(intArray0);
      assertArrayEquals(new int[] {47, 47, 47, 47, 47, 0, 47, 47, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertSame(token_EndTag0, token_EndTag1);
      
      String string3 = token_EndTag0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<//>", string3);
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean0 = token_EndTag1.isComment();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      token_Doctype0.pubSysKey = "0D3]G|kx$(9*Pv25";
      assertTrue(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      String string4 = token_Comment0.getData();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertSame(token_Comment0, token_Comment1);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      Token token0 = token_CData0.reset();
      assertNotNull(token0);
      assertSame(token_CData0, token0);
      assertSame(token0, token_CData0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token0.type = token_TokenType0;
      String string0 = token_CData0.toString();
      assertNotNull(string0);
      assertEquals("<![CDATA[null]]>", string0);
      assertSame(token_CData0, token0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.reset();
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token0);
      assertSame(token_CData1, token0);
      assertSame(token_CData1, token_CData0);
      
      boolean boolean0 = token_CData1.isStartTag();
      assertTrue(boolean0);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData0, token0);
      assertSame(token_CData1, token0);
      assertSame(token_CData1, token_CData0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      StringBuilder stringBuilder0 = token_Comment0.data;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      token_EndTag0.appendTagName('y');
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.toString();
      assertNotNull(string0);
      assertEquals("<![CDATA[]]>", string0);
      
      boolean boolean0 = token_EndTag0.isEndTag();
      assertTrue(boolean0);
      
      token_EndTag0.appendAttributeName('x');
      Token.reset((StringBuilder) null);
      String string1 = token_EndTag0.name();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("y", string1);
      
      token_EndTag0.newAttribute();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = token_Comment0.tokenType();
      assertNotNull(string0);
      assertEquals("Comment", string0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      StringBuilder stringBuilder0 = token_Comment0.data;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.CData token_CData0 = new Token.CData("Comment");
      assertNotNull(token_CData0);
      
      String string1 = token_CData0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<![CDATA[Comment]]>", string1);
      
      boolean boolean0 = token_EndTag0.isEndTag();
      assertTrue(boolean0);
      
      token_EndTag0.appendAttributeName('x');
      Token.reset((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_StartTag0.type = token_TokenType0;
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.getAttributes();
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      token_StartTag0.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_StartTag1);
      
      token_EndTag0.attributes = null;
      charArray0[1] = 'w';
      token_StartTag1.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeName('u');
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.name("");
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string0 = token_StartTag1.tokenType();
      assertNotNull(string0);
      assertEquals("StartTag", string0);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      token_StartTag2.normalName = "";
      token_StartTag1.appendAttributeValue("");
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag2.appendAttributeValue(charArray0);
      assertArrayEquals(new char[] {'x', 'w'}, charArray0);
      assertEquals(2, charArray0.length);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      token_StartTag1.selfClosing = false;
      Token.Doctype token_Doctype1 = new Token.Doctype();
      assertNotNull(token_Doctype1);
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      
      Token.Doctype token_Doctype2 = (Token.Doctype)token_Doctype1.reset();
      assertNotNull(token_Doctype2);
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertFalse(token_Doctype2.equals((Object)token_Doctype0));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertSame(token_Doctype1, token_Doctype2);
      assertNotSame(token_Doctype1, token_Doctype0);
      assertNotSame(token_Doctype2, token_Doctype0);
      assertSame(token_Doctype2, token_Doctype1);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = token_Doctype1.isForceQuirks();
      assertFalse(token_Doctype1.equals((Object)token_Doctype0));
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertFalse(boolean0);
      assertSame(token_Doctype1, token_Doctype2);
      assertNotSame(token_Doctype1, token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = token_Comment0.tokenType();
      assertNotNull(string0);
      assertEquals("Comment", string0);
      
      String string1 = token_Comment0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<!---->", string1);
      
      String string2 = token_Comment0.getData();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Token.CData token_CData0 = new Token.CData("fSZD#5{Csb$4|bkt0");
      assertNotNull(token_CData0);
      
      String string3 = token_CData0.tokenType();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("CData", string3);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EOF;
      token_CData0.type = token_TokenType0;
      Token.Character token_Character0 = token_CData0.data("fSZD#5{Csb$4|bkt0");
      assertNotNull(token_Character0);
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      String string4 = token_EOF0.tokenType();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("EOF", string4);
      assertSame(token_EOF0, token_EOF1);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendTagName("e2E?h,XVb");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_EOF1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEOF();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      
      String string0 = token_EndTag1.tokenType();
      assertNotNull(string0);
      assertEquals("EndTag", string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      String string1 = token_Doctype0.getName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string1);
      
      String string2 = token_Doctype0.getPublicIdentifier();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string2);
      
      token_EndTag0.appendAttributeName("edata-");
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean1 = token_EndTag1.isStartTag();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = new Token.StartTag();
      assertNotNull(token_StartTag1);
      assertFalse(token_StartTag1.equals((Object)token_StartTag0));
      
      Attributes attributes0 = token_EndTag1.getAttributes();
      assertNotNull(attributes0);
      assertEquals(1, attributes0.size());
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.StartTag token_StartTag2 = token_StartTag0.nameAttr("EndTag", attributes0);
      assertNotNull(token_StartTag2);
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertFalse(token_StartTag2.equals((Object)token_StartTag1));
      assertEquals(1, attributes0.size());
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag0);
      assertNotSame(token_StartTag2, token_StartTag1);
      
      String string3 = token_StartTag0.toString();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(token_StartTag0.equals((Object)token_StartTag1));
      assertEquals("<EndTag  edata->", string3);
      assertNotSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.finaliseTag();
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EndTag0.type = token_TokenType0;
      token_EndTag0.tagName = ":c:nDp$";
      token_EndTag0.appendAttributeValue("18|!r |cQvht]");
      token_EndTag0.setEmptyAttributeValue();
      token_EndTag0.appendTagName('8');
      token_EndTag0.appendAttributeValue(":c:nDp$");
      token_EndTag0.appendAttributeValue('z');
      token_EndTag0.isEOF();
      token_EndTag0.name(":c:nDp$");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      token_Doctype0.isForceQuirks();
      token_EndTag0.getAttributes();
      Attributes attributes0 = token_EndTag0.attributes;
      token_Doctype0.getPubSysKey();
      token_EndTag0.isStartTag();
      Token.TokenType.values();
      token_Doctype0.isForceQuirks();
      // Undeclared exception!
      try { 
        token_EndTag0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }
}
