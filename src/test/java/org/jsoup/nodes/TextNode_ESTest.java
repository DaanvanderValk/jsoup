/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:37:19 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(2738);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      textNode0.siblingIndex = 56;
      textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      TextNode textNode1 = textNode0.splitText(1);
      assertNotSame(textNode1, textNode0);
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("({", "({");
      // Undeclared exception!
      try { 
        textNode0.splitText(2738);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("X|-3$g+2 3i){qb|");
      textNode0.siblingIndex = 202;
      TextNode textNode1 = textNode0.text("s+");
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("JzT$ AMVv8~ E+\"?X", "JzT$ AMVv8~ E+\"?X");
      textNode0.siblingIndex = (-2382);
      TextNode textNode1 = textNode0.text("}1RPGOfnV");
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("V3t-aPZK.m5<H_B6(", "V3t-aPZK.m5<H_B6(");
      textNode0.reparentChild(textNode0);
      TextNode textNode1 = textNode0.text("V3t-aPZK.m5<H_B6(");
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("L,Nl6> ve5");
      TextNode textNode0 = cDataNode0.text((String) null);
      String string0 = textNode0.text();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      textNode0.text();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("{CfOLw7");
      assertEquals("{CfOLw7", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode(" > ");
      boolean boolean0 = textNode0.isBlank();
      assertFalse(boolean0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "org.jsoup.nodes.TextNode");
      String string0 = textNode0.getWholeText();
      assertNull(string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("");
      textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode("script", "");
      textNode0.reparentChild(textNode0);
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "label");
      DataNode dataNode0 = DataNode.createFromEncoded("", "");
      textNode0.setParentNode(dataNode0);
      textNode0.siblingIndex = (-1078);
      // Undeclared exception!
      try { 
        textNode0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1077
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, (String) null);
      // Undeclared exception!
      try { 
        textNode0.splitText(952);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("attributeNameCharsSorted", "attributeNameCharsSorted");
      textNode0.value = (Object) textNode0;
      // Undeclared exception!
      try { 
        textNode0.splitText(19);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Document document0 = new Document("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = document0.charset();
      Charset charset1 = Charset.defaultCharset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      ByteBuffer byteBuffer0 = charset1.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        cDataNode0.outerHtmlHead(charBuffer1, 24, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuffer0, 728, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      TextNode textNode1 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GJwj+Rv");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode1.parentNode = (Node) textNode0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuffer0, 0, document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("JzT$ AMVv8~ E+\"?X", "JzT$ AMVv8~ E+\"?X");
      String string0 = textNode0.nodeName();
      assertEquals("#text", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      String string0 = textNode0.getWholeText();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("GJwj+Rv", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("lWsR!H_!~rG");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, ' ');
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GJwj+Rv");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuffer0, 0, document_OutputSettings1);
      assertEquals("GJwj+RvGJwj+Rv", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GJwj+Rv");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(stringBuffer0, 0, document_OutputSettings1);
      assertEquals("GJwj+RvGJwj+Rv", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("VHB) Lc^il:k");
      // Undeclared exception!
      try { 
        cDataNode0.splitText((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("GJwj+Rv", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      TextNode textNode1 = textNode0.splitText(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GJwj+Rv");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode1.value = (Object) stringBuffer0;
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "org.jsoup.nodes.TextNode");
      // Undeclared exception!
      try { 
        textNode0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "GJwj+Rv");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode0.outerHtmlTail(stringBuffer0, 0, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("GJwj+Rv");
      assertEquals("GJwj+Rv", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.isBlank();
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("GJwj+Rv", "GJwj+Rv");
      textNode0.text();
  }
}
