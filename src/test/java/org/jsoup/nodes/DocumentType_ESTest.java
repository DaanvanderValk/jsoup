/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:38:00 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DocumentType_ESTest extends DocumentType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("GRV", "trI&zw={j", "!<0}");
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("*", "*", "*");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlTail(stringBuilder0, 0, document_OutputSettings0);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("POST", "POST", "POST", "POST");
      Object object0 = new Object();
      documentType0.value = object0;
      // Undeclared exception!
      try { 
        documentType0.setPubSysKey("/`F+S^MOgO");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("N7Vc_OO2V>>A7K", "pubSysKey", "N7Vc_OO2V>>A7K", "N7Vc_OO2V>>A7K", "pubSysKey");
      StringBuilder stringBuilder0 = new StringBuilder("N7Vc_OO2V>>A7K");
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(stringBuilder0, (-1234), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.DocumentType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentType documentType0 = null;
      try {
        documentType0 = new DocumentType("", "", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "1.0", "1.0", "*");
      String string0 = documentType0.nodeName();
      assertEquals("#doctype", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("quirks", "Ym\"8i", "quirks", "lkA?%*akW4?t'O", "lkA?%*akW4?t'O");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Ym\"8i");
      Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
      // Undeclared exception!
      try { 
        documentType0.outerHtmlHead(charBuffer0, 62, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "1.0", "1.0", "*");
      StringBuilder stringBuilder0 = new StringBuilder(66);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      documentType0.outerHtmlHead(stringBuilder0, 66, document_OutputSettings1);
      assertEquals("<!DOCTYPE PUBLIC \"1.0\" \"1.0\">", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("AfterDoctypeSystemIdentifier", "AfterDoctypeSystemIdentifier", (String) null, "AfterDoctypeSystemIdentifier", "AfterDoctypeSystemIdentifier");
      documentType0.setPubSysKey((String) null);
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("s", (String) null, (String) null, (String) null, (String) null);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(stringBuffer0, 0, document_OutputSettings0);
      assertEquals("<!doctype s>", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "OVGMQ`{R/7", "OVGMQ`{R/7");
      documentType0.outerHtml();
  }
}
