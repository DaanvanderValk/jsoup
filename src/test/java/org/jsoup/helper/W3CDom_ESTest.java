/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:43:42 GMT 2018
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.helper.W3CDom;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class W3CDom_ESTest extends W3CDom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Iterator<Attribute> iterator0 = (Iterator<Attribute>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(attributes0).iterator();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(attributes0).when(element0).attributes();
      doReturn("&V\"0x''(Zw_O~`l Z:H", "G-nl~b#sfk2J").when(element0).tagName();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("&V\"0x''(Zw_O~`l Z:H", "&V\"0x''(Zw_O~`l Z:H").when(document0).location();
      doReturn(element0).when(document0).child(anyInt());
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup((Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      // Undeclared exception!
      try { 
        w3CDom0.convert((Document) null, document1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Iterator<Attribute> iterator0 = (Iterator<Attribute>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(attributes0).iterator();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(attributes0).when(element0).attributes();
      doReturn("                  ", (String) null).when(element0).tagName();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("&V\"0x''(Zw_O~`l Z:H", "&V\"0x''(Zw_O~`l Z:H").when(document0).location();
      doReturn(element0).when(document0).child(anyInt());
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.tail(element0, 60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      Document document2 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document2).location();
      doReturn((Element) null).when(document2).child(anyInt());
      w3CDom0.convert(document2, document1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(".", (String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      Document document2 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(".", (String) null).when(document2).location();
      doReturn((Element) null).when(document2).child(anyInt());
      w3CDom0.convert(document2, document1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Iterator<Attribute> iterator0 = (Iterator<Attribute>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(attributes0).iterator();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(attributes0).when(element0).attributes();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("+>9X1^-r#5/d3-o'P", "").when(document0).location();
      doReturn(element0).when(document0).child(anyInt());
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      w3CDom_W3CBuilder0.tail(node0, 1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Iterator<Attribute> iterator0 = (Iterator<Attribute>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      Attributes attributes0 = mock(Attributes.class, new ViolatedAssumptionAnswer());
      doReturn(iterator0).when(attributes0).iterator();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(attributes0, (Attributes) null).when(element0).attributes();
      doReturn("&V\"0x''(Zw_O~`l Z:H", "{> 7.y%c71KaqU(l\"52", "map").when(element0).tagName();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn("&V\"0x''(Zw_O~`l Z:H", "&V\"0x''(Zw_O~`l Z:H").when(document0).location();
      doReturn(element0).when(document0).child(anyInt());
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      w3CDom_W3CBuilder0.head(node0, 60);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(".", (String) null).when(document0).location();
      doReturn((Element) null).when(document0).child(anyInt());
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      String string0 = w3CDom0.asString(document1);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", string0);
  }
}
