/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:39:35 GMT 2018
 */

package org.jsoup.helper;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(102);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("ForeignContent", 32768);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser((Parser) null);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("ForeignContent", "ForeignContent");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("ForeignContent");
      httpConnection_KeyVal1.value("5");
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal1);
      httpConnection_Request5.maxBodySize(187);
      // Undeclared exception!
      try { 
        httpConnection_Request5.postDataCharset("user-agent");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // user-agent
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("iiLU", 352);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(352);
      httpConnection_Request1.ignoreHttpErrors(true);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(104);
      httpConnection_Request1.header("OgRG @L{0", (String) null);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      httpConnection_Request1.proxy(proxy0);
      httpConnection_Request2.proxy("cuR{m]B", 352);
      Proxy proxy1 = Proxy.NO_PROXY;
      httpConnection_Request2.maxBodySize(352);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy1);
      httpConnection_Request3.requestBody("text/");
      // Undeclared exception!
      try { 
        httpConnection_Request3.postDataCharset("iiLU");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // iiLU
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(">IM]Eml:", 25);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(79);
      httpConnection_Request2.maxBodySize(79);
      httpConnection_Request1.header("Header name must not be empty", "application/x-www-form-urlencoded");
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("method", "H");
      httpConnection_Request0.removeHeader(">IM]Eml:");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("</");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1646);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) pipedInputStream0);
      httpConnection_KeyVal2.hasInputStream();
      httpConnection_Request2.followRedirects(true);
      httpConnection_KeyVal1.hasInputStream();
      httpConnection_KeyVal0.value();
      httpConnection_Request0.postDataCharset();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "^WJ";
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("^WJ");
      httpConnection_Response1.header("^WJ", "^WJ");
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpConnection.encodeUrl((URL) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset(",w1vMpF4{3Xr4hS4DZ");
      httpConnection_Response1.statusMessage();
      String string0 = "%;nnb_`!G8";
      httpConnection_Response1.cookie(",w1vMpF4{3Xr4hS4DZ", "%;nnb_`!G8");
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      httpConnection_Response1.method(connection_Method0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, "qQ+QDqfYTPhf{_d`rE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "4jhbCk3'P0");
      Document document1 = document0.normalise();
      Element element0 = document1.text("");
      Element element1 = element0.prependText("");
      stringReader0.close();
      Map<String, String> map0 = element1.dataset();
      httpConnection_Request0.cookies = map0;
      httpConnection_Request0.ignoreContentType();
      httpConnection_Request0.followRedirects(false);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.helper.HttpConnection$Response$2", "org.jsoup.helper.HttpConnection$Response$2", (InputStream) pipedInputStream0);
      httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(363);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser1 = parser0.settings(parseSettings0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy("Aq7:yn(VN[L9f~{", 363);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, 1330);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(proxy0);
      httpConnection_Request5.proxy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "rD&AP";
      String string1 = "9tj_rtTBjGY4";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("rD&AP", "9tj_rtTBjGY4");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      // Undeclared exception!
      try { 
        httpConnection_Request1.maxBodySize((-310));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "7C";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("&amp;", "7C");
      httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.key();
      String string1 = "Data input stream must not be null";
      HttpConnection.KeyVal.create("Data input stream must not be null", "org.jsoup.helper.StringUtil");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 2920;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(2920);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser((Parser) null);
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection_Request3.postDataCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "3dGm[xR2V>VRB |k)";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("EXG( 1CK0>;@o?@5dWG", "3dGm[xR2V>VRB |k)");
      httpConnection_KeyVal0.inputStream();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7DauU&hW3Ax5z3m*r/");
      mockFile0.getParentFile();
      String string0 = "BkHr>zsh~";
      MockFile mockFile1 = new MockFile((File) null, "BkHr>zsh~");
      mockFile1.setExecutable(true, false);
      URL uRL0 = mockFile1.toURL();
      HttpConnection.encodeUrl(uRL0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "org.jsoup.select.Evaluator$AttributeWithValueContaining";
      String string1 = "1eS5J@/)B";
      httpConnection_Response0.addHeader("org.jsoup.select.Evaluator$AttributeWithValueContaining", "1eS5J@/)B");
      httpConnection_Response0.cookie("org.jsoup.select.Evaluator$AttributeWithValueContaining", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      httpConnection_Response0.charset("org.jsoup.select.Evaluator$AttributeWithValueContaining");
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "bUFBV6D FEP^N'G]");
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("org.jsoup.helper.HttpConnection");
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertEquals("bUFBV6D FEP^N'G]", element0.baseUri());
      assertEquals("org.jsoup.helper.HttpConnection", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.attr("pn}z*DiFmr^`ksUD(Y;", false);
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertEquals("bUFBV6D FEP^N'G]", element0.baseUri());
      assertEquals("org.jsoup.helper.HttpConnection", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bUFBV6D FEP^N'G]", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      
      Element element2 = element1.toggleClass("");
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertEquals("bUFBV6D FEP^N'G]", element0.baseUri());
      assertEquals("org.jsoup.helper.HttpConnection", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bUFBV6D FEP^N'G]", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element1.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("bUFBV6D FEP^N'G]", element2.baseUri());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      
      Attributes attributes0 = element2.attributes();
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertEquals("bUFBV6D FEP^N'G]", element0.baseUri());
      assertEquals("org.jsoup.helper.HttpConnection", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bUFBV6D FEP^N'G]", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element1.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("bUFBV6D FEP^N'G]", element2.baseUri());
      assertEquals(1, attributes0.size());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertEquals("bUFBV6D FEP^N'G]", element0.baseUri());
      assertEquals("org.jsoup.helper.HttpConnection", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bUFBV6D FEP^N'G]", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element1.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("bUFBV6D FEP^N'G]", element2.baseUri());
      assertEquals(1, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(map0);
      
      httpConnection_Request0.cookies = map0;
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("#root", document0.tagName());
      assertEquals("bUFBV6D FEP^N'G]", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bUFBV6D FEP^N'G]", document0.location());
      assertEquals("bUFBV6D FEP^N'G]", element0.baseUri());
      assertEquals("org.jsoup.helper.HttpConnection", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.HttpConnection", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("bUFBV6D FEP^N'G]", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element1.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.helper.HttpConnection", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("org.jsoup.helper.HttpConnection", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("bUFBV6D FEP^N'G]", element2.baseUri());
      assertEquals(1, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertTrue(httpConnection_Request0.cookies.isEmpty());
      assertEquals(0, httpConnection_Request0.cookies.size());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(sSLSocketFactory0);
      
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("", 594);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      int int0 = httpConnection_Request1.timeout();
      assertEquals(30000, int0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("8EuK)Z", 0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotNull(httpConnection_Request2);
      
      boolean boolean0 = httpConnection_Request2.followRedirects();
      assertTrue(boolean0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Nnygzc4N@YL>Le.5", "Nnygzc4N@YL>Le.5");
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal0.value());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("Nnygzc4N@YL>Le.5");
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("Malformed URL: ");
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.value());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.addHeader("Malformed URL: ", "Malformed URL: ");
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotNull(httpConnection_Request2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create("Malformed URL: ", "TB_qj??%}");
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("TB_qj??%}", httpConnection_KeyVal2.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal2.key());
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal0));
      assertNotNull(httpConnection_KeyVal2);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.inputStream((InputStream) pipedInputStream0);
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal0.key());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.value());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.value());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal3.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal3);
      
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key("TB_qj??%}");
      assertEquals("TB_qj??%}", httpConnection_KeyVal0.key());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_KeyVal4.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal4.value());
      assertTrue(httpConnection_KeyVal4.hasInputStream());
      assertEquals("TB_qj??%}", httpConnection_KeyVal4.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal4);
      
      String string0 = "org.jsoup.nodes.Entities$EscapeMode";
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request0.removeHeader("Malformed URL: ");
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertNotNull(httpConnection_Request3);
      
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal3.value("org.jsoup.nodes.Entities$EscapeMode");
      assertEquals("TB_qj??%}", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("TB_qj??%}", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("TB_qj??%}", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal5.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal5.value());
      assertNull(httpConnection_KeyVal5.contentType());
      assertEquals("TB_qj??%}", httpConnection_KeyVal5.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal5, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal4);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal5.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal5);
      
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal3.key("Malformed URL: ");
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertNull(httpConnection_KeyVal6.contentType());
      assertTrue(httpConnection_KeyVal6.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal6.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal6.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal5);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal6);
      
      HttpConnection.KeyVal httpConnection_KeyVal7 = (HttpConnection.KeyVal)httpConnection_KeyVal3.contentType("Nnygzc4N@YL>Le.5");
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal0.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal1.contentType());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal3.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal7.value());
      assertTrue(httpConnection_KeyVal7.hasInputStream());
      assertEquals("Nnygzc4N@YL>Le.5", httpConnection_KeyVal7.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal7.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal7, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal7, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal7, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal7, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal7, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal7, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal7, httpConnection_KeyVal6);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal7.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal7);
      
      HttpConnection.KeyVal httpConnection_KeyVal8 = HttpConnection.KeyVal.create(" H%zx#CY", "Malformed URL: ");
      assertEquals(" H%zx#CY", httpConnection_KeyVal8.key());
      assertEquals("Malformed URL: ", httpConnection_KeyVal8.value());
      assertNull(httpConnection_KeyVal8.contentType());
      assertFalse(httpConnection_KeyVal8.hasInputStream());
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal6);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal7);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal5);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal8, httpConnection_KeyVal2);
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal6));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal3));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal7));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal5));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal4));
      assertFalse(httpConnection_KeyVal8.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal8);
      
      HttpConnection.KeyVal httpConnection_KeyVal9 = (HttpConnection.KeyVal)httpConnection_KeyVal6.contentType(" H%zx#CY");
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertEquals(" H%zx#CY", httpConnection_KeyVal0.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" H%zx#CY", httpConnection_KeyVal3.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal6.contentType());
      assertTrue(httpConnection_KeyVal6.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal6.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal6.key());
      assertEquals(" H%zx#CY", httpConnection_KeyVal9.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal9.value());
      assertTrue(httpConnection_KeyVal9.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal9.key());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal9);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal5);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal9, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal9, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal7);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal9.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal9.equals((Object)httpConnection_KeyVal8));
      assertNotNull(httpConnection_KeyVal9);
      
      HttpConnection.KeyVal httpConnection_KeyVal10 = (HttpConnection.KeyVal)httpConnection_KeyVal6.contentType(" H%zx#CY");
      assertTrue(httpConnection_KeyVal10.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal10.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal10.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal10.key());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertEquals(" H%zx#CY", httpConnection_KeyVal0.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" H%zx#CY", httpConnection_KeyVal3.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal6.contentType());
      assertTrue(httpConnection_KeyVal6.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal6.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal6.key());
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal10, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal10, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal10, httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal9);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal10);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal5);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal10.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal10.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal2));
      assertNotNull(httpConnection_KeyVal10);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal9);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertEquals(" H%zx#CY", httpConnection_KeyVal0.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" H%zx#CY", httpConnection_KeyVal3.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal6.contentType());
      assertTrue(httpConnection_KeyVal6.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal6.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal6.key());
      assertEquals(" H%zx#CY", httpConnection_KeyVal9.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal9.value());
      assertTrue(httpConnection_KeyVal9.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal9.key());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal9);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal10);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal5);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal9, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal9, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal10);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal9.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal9.equals((Object)httpConnection_KeyVal8));
      assertNotNull(httpConnection_Request4);
      
      HttpConnection.Request httpConnection_Request5 = (HttpConnection.Request)httpConnection_Request4.maxBodySize(13);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(13, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertEquals(13, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal0.value());
      assertEquals(" H%zx#CY", httpConnection_KeyVal0.contentType());
      assertEquals("Malformed URL: ", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(13, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertTrue(httpConnection_Request5.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request5.timeout());
      assertEquals("Malformed URL: ", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(" H%zx#CY", httpConnection_KeyVal3.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal3.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals(" H%zx#CY", httpConnection_KeyVal6.contentType());
      assertTrue(httpConnection_KeyVal6.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal6.value());
      assertEquals("Malformed URL: ", httpConnection_KeyVal6.key());
      assertEquals(" H%zx#CY", httpConnection_KeyVal9.contentType());
      assertEquals("org.jsoup.nodes.Entities$EscapeMode", httpConnection_KeyVal9.value());
      assertTrue(httpConnection_KeyVal9.hasInputStream());
      assertEquals("Malformed URL: ", httpConnection_KeyVal9.key());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal9);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal9);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal10);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal10);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal9);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal5);
      assertNotSame(httpConnection_KeyVal6, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal6, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal9, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal9, httpConnection_KeyVal8);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal6);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal7);
      assertSame(httpConnection_KeyVal9, httpConnection_KeyVal10);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal8));
      assertFalse(httpConnection_KeyVal6.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal9.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal9.equals((Object)httpConnection_KeyVal8));
      assertNotNull(httpConnection_Request5);
      
      // Undeclared exception!
      try { 
        httpConnection_KeyVal1.contentType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("J^fPFsoY=,d:G;JK", "S&^VRVO", (InputStream) null);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("S&^VRVO", httpConnection_KeyVal0.value());
      assertEquals("J^fPFsoY=,d:G;JK", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertFalse(boolean0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("S&^VRVO", httpConnection_KeyVal0.value());
      assertEquals("J^fPFsoY=,d:G;JK", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      int int0 = (-38);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      String string0 = httpConnection_Request0.requestBody();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNull(string0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      Connection connection0 = HttpConnection.connect(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(connection0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("ftp", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNotNull(uRL1);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.method(connection_Method0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("oeJ{r.`#AH", "oeJ{r.`#AH");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal0.key());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("oeJ{r.`#AH", "oeJ{r.`#AH", (InputStream) null);
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal1.value());
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value("oeJ{r.`#AH");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal0.key());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("oeJ{r.`#AH", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertNotNull(httpConnection_KeyVal2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNotNull(httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody((String) null);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      
      String string0 = "tt";
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.header("tt", "tt");
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertNotNull(httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-2393));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNotNull(httpConnection_Request0);
      
      String string0 = httpConnection_Request0.postDataCharset();
      assertEquals("UTF-8", string0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNotNull(httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, (HttpConnection.Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      String string0 = "j6,-$,tr\"?3uRX!A";
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("j6,-$,tr\"?3uRX!A");
      assertNull(httpConnection_Response0.contentType());
      assertEquals("j6,-$,tr\"?3uRX!A", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("j6,-$,tr\"?3uRX!A", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.processResponseHeaders((Map<String, List<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("CONTINUE", "CONTINUE");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("CONTINUE", httpConnection_KeyVal0.key());
      assertEquals("CONTINUE", httpConnection_KeyVal0.value());
      assertNotNull(httpConnection_KeyVal0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1177), (-1177));
      assertEquals((-1177), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-96)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals((-1177), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-96)}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(3, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pushbackInputStream0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("CONTINUE", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal0.value());
      assertEquals((-1177), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal1.key());
      assertEquals("CONTINUE", httpConnection_KeyVal1.value());
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-96)}, byteArray0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      assertEquals(3, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("CONTINUE");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("CONTINUE", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal0.value());
      assertEquals((-1177), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal1.key());
      assertEquals("CONTINUE", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("CONTINUE", httpConnection_KeyVal2.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal2.key());
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-96)}, byteArray0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotNull(httpConnection_KeyVal2);
      assertEquals(3, byteArray0.length);
      
      String string0 = httpConnection_KeyVal2.contentType();
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("CONTINUE", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal0.value());
      assertEquals((-1177), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal1.key());
      assertEquals("CONTINUE", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("CONTINUE", httpConnection_KeyVal2.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("CONTINUE", httpConnection_KeyVal2.key());
      assertArrayEquals(new byte[] {(byte)0, (byte)109, (byte) (-96)}, byteArray0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNull(string0);
      assertEquals(3, byteArray0.length);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, (byte)0);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /127.0.0.1:0", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertEquals("/127.0.0.1:0", mockInetSocketAddress0.toString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertEquals(0, mockInetSocketAddress0.getPort());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /127.0.0.1:0", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      httpConnection_Response0.processResponseHeaders(map0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      
      File file0 = mockFile0.getAbsoluteFile();
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canExecute());
      assertEquals("jsoup", file0.getName());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("C:\\Users\\Daan\\IdeaProjects", file0.getParent());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isFile());
      assertEquals("C:\\Users\\Daan\\IdeaProjects\\jsoup", file0.toString());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      assertFalse(file0.equals((Object)mockFile0));
      assertNotNull(file0);
      
      boolean boolean0 = mockFile0.delete();
      assertTrue(boolean0);
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      
      URL uRL0 = mockFile0.toURL();
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotSame(mockFile0, file0);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(uRL0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.url(uRL0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("\\", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(mockFile0, file0);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertTrue(mockFile0.equals((Object)file0));
      assertNotNull(httpConnection_Response1);
      
      String string0 = httpConnection_Response0.contentType();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(sSLSocketFactory0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("T", "T", (InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("T", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("T", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("T");
      assertFalse(fileDescriptor0.valid());
      assertEquals("T", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("T", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("T", httpConnection_KeyVal1.key());
      assertEquals("T", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("T");
      assertFalse(fileDescriptor0.valid());
      assertEquals("T", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("T", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("T", httpConnection_KeyVal1.key());
      assertEquals("T", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("T", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("T", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotNull(httpConnection_KeyVal2);
      
      // Undeclared exception!
      try { 
        httpConnection_KeyVal2.contentType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 30000, 30000);
      assertEquals((-30000), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 30000);
      assertEquals((-30000), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("}2_u,4vlRx:", "}2_u,4vlRx:", (InputStream) bufferedInputStream0);
      assertEquals((-30000), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal0.key());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("");
      assertEquals((-30000), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      assertEquals(0, byteArray0.length);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals((-30000), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      assertEquals(0, byteArray0.length);
      
      String string0 = httpConnection_Request2.requestBody();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals((-30000), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("}2_u,4vlRx:", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNull(string0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = "Data input stream must not be null";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Data input stream must not be null");
      assertFalse(boolean0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNotNull(httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("embed", 37);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreContentType(false);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("M1zP!300\"k!r-", "M1zP!300\"k!r-");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("M1zP!300\"k!r-");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("org.jsoup.nodes.Node");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal1.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotNull(httpConnection_KeyVal2);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal2);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal1.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value("9\"P");
      assertEquals("9\"P", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("9\"P", httpConnection_KeyVal1.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal3.key());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("9\"P", httpConnection_KeyVal3.value());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertNotNull(httpConnection_KeyVal3);
      
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value("var");
      assertEquals("var", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertEquals("var", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal4.key());
      assertNull(httpConnection_KeyVal4.contentType());
      assertEquals("var", httpConnection_KeyVal4.value());
      assertFalse(httpConnection_KeyVal4.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal2);
      assertNotNull(httpConnection_KeyVal4);
      
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value("TIJ)-,Y");
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal5.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal5.key());
      assertNull(httpConnection_KeyVal5.contentType());
      assertFalse(httpConnection_KeyVal5.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal2);
      assertNotNull(httpConnection_KeyVal5);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("var", 19);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotNull(httpConnection_Request2);
      
      boolean boolean0 = httpConnection_Request2.ignoreHttpErrors();
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      Parser parser0 = httpConnection_Request0.parser();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy("DU,", 0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      
      httpConnection_Request0.validateTLSCertificates(false);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.timeout(0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request3.validateTLSCertificates());
      assertEquals(0, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertNotNull(httpConnection_Request3);
      
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request0.removeCookie("k");
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.validateTLSCertificates());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertNotNull(httpConnection_Request4);
      
      String string0 = "";
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request3.parser(parser0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.validateTLSCertificates());
      assertEquals(0, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request3.validateTLSCertificates());
      assertEquals(0, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertNull(httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request5.timeout());
      assertFalse(httpConnection_Request5.validateTLSCertificates());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertNotNull(httpConnection_Request5);
      
      // Undeclared exception!
      try { 
        httpConnection_Request3.proxy("", (-1364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1364
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeCookie("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("F26i)n//<ZL<#YO:Y=", 0);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(240);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(240, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(240, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(240, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      
      httpConnection_Request2.validateTLSCertificates(true);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(240, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(240, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(240, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(240, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNull(sSLSocketFactory0);
      
      httpConnection_Request2.sslSocketFactory((SSLSocketFactory) null);
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(240, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(240, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(240, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(20);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(20, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(20, httpConnection_Request1.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(20, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(20, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertNotNull(httpConnection_Request3);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(",zBo)3*]/}U\"5Km", 20);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(20, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(20, httpConnection_Request1.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(20, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(20, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(20, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.followRedirects());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertNotNull(httpConnection_Request4);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request4.data();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(20, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(20, httpConnection_Request1.timeout());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(20, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(20, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(20, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.followRedirects());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      
      httpConnection_Response0.url = null;
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      httpConnection_Request0.url = null;
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("[SzUA");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [SzUA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset(">W3D1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // >W3D1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.method(connection_Method0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      
      HttpConnection.Response httpConnection_Response2 = httpConnection_Response0.charset("2ag KX^n5KWs47Y>");
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("2ag KX^n5KWs47Y>", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertEquals("2ag KX^n5KWs47Y>", httpConnection_Response2.charset());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertNotNull(httpConnection_Response2);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(sSLSocketFactory0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.ignoreHttpErrors(true);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.addHeader("span", "Header name must not be empty");
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotNull(httpConnection_Request2);
      
      boolean boolean0 = httpConnection_Request0.validateTLSCertificates();
      assertTrue(boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.proxy("2ag KX^n5KWs47Y>", 0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertNotNull(httpConnection_Request3);
      
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request0.requestBody("&nbsp;");
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("&nbsp;", httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("&nbsp;", httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertNotNull(httpConnection_Request4);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "A5.7I4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 255);
      assertNotNull(bufferedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("j6,-$,tr\"?3uRX!A", "Header name must not be null", (InputStream) bufferedInputStream0);
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("j6,-$,tr\"?3uRX!A", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal0.value());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) bufferedInputStream0);
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("j6,-$,tr\"?3uRX!A", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("j6,-$,tr\"?3uRX!A", httpConnection_KeyVal1.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("Header name must not be null");
      assertEquals("Header name must not be null", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Header name must not be null", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("Header name must not be null", httpConnection_KeyVal2.value());
      assertEquals("Header name must not be null", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal2);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key("\"j I.yAp");
      assertEquals("\"j I.yAp", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("\"j I.yAp", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("\"j I.yAp", httpConnection_KeyVal2.key());
      assertEquals("Header name must not be null", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("Header name must not be null", httpConnection_KeyVal3.value());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("\"j I.yAp", httpConnection_KeyVal3.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      String string0 = httpConnection_Response0.charset();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(string0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, "", (InputStream) pushbackInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("74|k0<J$~5[", "");
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("74|k0<J$~5[", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("74|k0<J$~5[", httpConnection_KeyVal0.key());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      int int0 = httpConnection_Request1.maxBodySize();
      assertEquals(1048576, int0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("74|k0<J$~5[", httpConnection_KeyVal0.key());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("maxSize must be 0 (unlimited) or larger", "maxSize must be 0 (unlimited) or larger", (InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("maxSize must be 0 (unlimited) or larger", httpConnection_KeyVal0.key());
      assertEquals("maxSize must be 0 (unlimited) or larger", httpConnection_KeyVal0.value());
      assertNotNull(httpConnection_KeyVal0);
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertTrue(boolean0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("maxSize must be 0 (unlimited) or larger", httpConnection_KeyVal0.key());
      assertEquals("maxSize must be 0 (unlimited) or larger", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("dFcyVH(Ap5}m\"J", "dFcyVH(Ap5}m\"J");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("dFcyVH(Ap5}m\"J", httpConnection_KeyVal0.key());
      assertEquals("dFcyVH(Ap5}m\"J", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(httpConnection_KeyVal0);
      
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("dFcyVH(Ap5}m\"J=dFcyVH(Ap5}m\"J", string0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("dFcyVH(Ap5}m\"J", httpConnection_KeyVal0.key());
      assertEquals("dFcyVH(Ap5}m\"J", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(string0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("${I7M$#'?z_z");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("dFcyVH(Ap5}m\"J", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("${I7M$#'?z_z", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("dFcyVH(Ap5}m\"J", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("${I7M$#'?z_z", httpConnection_KeyVal1.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      int int0 = (-647);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "_aJyll~kO";
      // Undeclared exception!
      try { 
        HttpConnection.connect("_aJyll~kO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: _aJyll~kO
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("ISO-8859-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ISO-8859-1
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("td#x", "L[", 6, "L[", uRLStreamHandler0);
      assertEquals(6, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("L[", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("td#x", uRL0.getProtocol());
      assertEquals("L[", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("L[:6", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("L[", uRL0.getFile());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertEquals(6, uRL0.getPort());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("L[", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertNull(uRL0.toExternalForm());
      assertEquals("td#x", uRL0.getProtocol());
      assertEquals("L[", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("L[:6", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toString());
      assertEquals("L[", uRL0.getFile());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("L[:6", uRL1.getAuthority());
      assertEquals(6, uRL1.getPort());
      assertEquals("L[", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("L[", uRL1.getPath());
      assertEquals("L[", uRL1.getFile());
      assertEquals("td#x", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertNotNull(uRL1);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("InputStream data not supported in URL query string.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: InputStream data not supported in URL query string.
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(sSLSocketFactory0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("~3me&49HSNIl");
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      String string0 = "]?bv[R";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("]?bv[R", "]?bv[R", 926, "]?bv[R", uRLStreamHandler0);
      assertEquals("]?bv[r", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("]?bv[R", uRL0.getHost());
      assertEquals("]?bv[R", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("]?bv[R:926", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("]", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("bv[R", uRL0.getQuery());
      assertEquals(926, uRL0.getPort());
      assertNotNull(uRL0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("]?bv[r", uRL0.getProtocol());
      assertNull(uRL0.toExternalForm());
      assertEquals("]?bv[R", uRL0.getHost());
      assertEquals("]?bv[R", uRL0.getFile());
      assertNull(uRL0.toString());
      assertEquals("]?bv[R:926", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("]", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("bv[R", uRL0.getQuery());
      assertEquals(926, uRL0.getPort());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotNull(httpConnection_Request2);
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request0.ignoreHttpErrors(true);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertNotNull(httpConnection_Request3);
      
      int int0 = httpConnection_Request0.maxBodySize();
      assertEquals(1048576, int0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5\"6<&A[~/k=Y7l");
      assertFalse(boolean0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("M1zP!300\"k!r-", "M1zP!300\"k!r-");
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("M1zP!300\"k!r-");
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("org.jsoup.nodes.Node");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotNull(httpConnection_KeyVal2);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal2);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("org.jsoup.nodes.Node", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value("9\"P");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("9\"P", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("9\"P", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal3.key());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertEquals("9\"P", httpConnection_KeyVal3.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal3);
      
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value("var");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("var", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("var", httpConnection_KeyVal1.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal4.contentType());
      assertEquals("var", httpConnection_KeyVal4.value());
      assertFalse(httpConnection_KeyVal4.hasInputStream());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal4.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal2);
      assertNotNull(httpConnection_KeyVal4);
      
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value("TIJ)-,Y");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal5.key());
      assertFalse(httpConnection_KeyVal5.hasInputStream());
      assertNull(httpConnection_KeyVal5.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal5.value());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal5, httpConnection_KeyVal1);
      assertNotNull(httpConnection_KeyVal5);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("var", 19);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal1.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal2.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNotNull(httpConnection_Request2);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = httpConnection_Request2.ignoreHttpErrors();
      assertFalse(boolean2);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal0.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal1.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("TIJ)-,Y", httpConnection_KeyVal2.value());
      assertEquals("M1zP!300\"k!r-", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal5);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Parser parser0 = httpConnection_Request0.parser();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(">IM]Eml:", 25);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(79);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(79, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(79, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(79);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(79, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(79, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(79, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertEquals(79, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(79, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(79, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertEquals(79, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNotNull(connection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request1.header("Header name must not be empty", "application/x-www-form-urlencoded");
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(79, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(79, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(79, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(79, httpConnection_Request3.timeout());
      assertTrue(httpConnection_Request3.validateTLSCertificates());
      assertEquals(79, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertNotNull(httpConnection_Request3);
      
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request1.addHeader("muted", "Header name must not be empty");
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(79, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(79, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(79, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(79, httpConnection_Request4.maxBodySize());
      assertEquals(79, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, connection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertNotNull(httpConnection_Request4);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("method", "H");
      assertEquals("H", httpConnection_KeyVal0.value());
      assertEquals("method", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request5 = (HttpConnection.Request)httpConnection_Request0.removeHeader(">IM]Eml:");
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(79, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertTrue(httpConnection_Request5.followRedirects());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertNull(httpConnection_Request5.requestBody());
      assertEquals(79, httpConnection_Request5.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertEquals(79, httpConnection_Request5.timeout());
      assertTrue(httpConnection_Request5.validateTLSCertificates());
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request5, connection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertNotNull(httpConnection_Request5);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("</");
      assertEquals("</", httpConnection_KeyVal0.key());
      assertEquals("H", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("</", httpConnection_KeyVal1.key());
      assertEquals("H", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(1646);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) pipedInputStream0);
      assertEquals("</", httpConnection_KeyVal0.key());
      assertEquals("H", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("</", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("H", httpConnection_KeyVal1.value());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("</", httpConnection_KeyVal2.key());
      assertEquals("H", httpConnection_KeyVal2.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal2);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "method");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      String string0 = ">IM]Eml:";
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(">IM]Eml:", 25);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(79);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(79, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(79, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotNull(httpConnection_Request2);
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(79);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(79, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.validateTLSCertificates());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(79, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(79, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.validateTLSCertificates());
      assertEquals(79, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(79, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.validateTLSCertificates());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(79, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(79, connection_Request0.maxBodySize());
      assertEquals(79, connection_Request0.timeout());
      assertTrue(connection_Request0.validateTLSCertificates());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "0#y0\\%Dv#R|3i";
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("0#y0%Dv#R|3i", 0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(0);
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "0#y0%Dv#R|3i", uRLStreamHandler0);
      httpConnection_Request2.url = uRL1;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      URL uRL2 = MockURL.getHttpExample();
      httpConnection_Request3.url(uRL2);
      // Undeclared exception!
      try { 
        httpConnection_Request3.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
