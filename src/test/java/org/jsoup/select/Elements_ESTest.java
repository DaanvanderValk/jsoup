/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:26:49 GMT 2018
 */

package org.jsoup.select;

import org.junit.Ignore;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("version");
      Elements elements0 = document0.getElementsByAttributeValueMatching("[%s=%s]", "version");
      Elements elements1 = elements0.eq(0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      elements0.val("X&OpSvMF#");
      String string0 = elements0.val();
      assertEquals("X&OpSvMF#", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("version");
      Elements elements0 = document0.getElementsByAttributeValueMatching("[%s=%s]", "version");
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Collector");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.toggleClass("");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell(":KJ*g");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      String string0 = elements0.toString();
      assertEquals("<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("d");
      Elements elements0 = document0.parents();
      Elements elements1 = elements0.select("d");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Collector");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prevAll((String) null);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Elements");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = elements0.prevAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("version");
      Elements elements0 = document0.getElementsByAttributeValueMatching("[%s=%s]", "version");
      Elements elements1 = elements0.prev("version");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.prev();
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("<H8!7");
      Elements elements0 = document0.getElementsByAttributeValueMatching("<H8!7", "<H8!7");
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.not(" fW0");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.nextAll((String) null);
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      Elements elements1 = elements0.next("X2pz Vfn");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      elements0.add((Element) document0);
      Element element0 = elements0.last();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document(",pU{/kh%");
      Elements elements0 = document0.getElementsByAttributeValueMatching(",pU{/kh%", "");
      Elements elements1 = elements0.html("");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("n),j58-([ga");
      Elements elements0 = document0.getElementsContainingText("");
      Element element0 = elements0.first();
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsContainingOwnText("");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell(":KJ*g");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.eq(0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      Elements elements1 = elements0.empty();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("^@)5N.X|Nz%-");
      Elements elements0 = document0.getElementsByAttributeValueMatching("or-P9lr5`8D", (Pattern) null);
      Elements elements1 = elements0.attr("", "");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = new Document("88f_");
      Elements elements0 = document0.getElementsByIndexEquals(5122);
      Elements elements1 = elements0.append("88f_");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("5DhP");
      Elements elements0 = document0.parents();
      Elements elements1 = elements0.after("5DhP");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      Elements elements1 = elements0.addClass("listing");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = new Document("j(HJB-^");
      elementArray0[0] = (Element) document0;
      elementArray0[1] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      document0.appendChild(elementArray0[1]);
      // Undeclared exception!
      elements0.wrap(".f|R+q9k:b5U'");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Element element0 = document0.head();
      Elements elements0 = element0.getElementsContainingOwnText("");
      Elements elements1 = elements0.unwrap();
      // Undeclared exception!
      try { 
        elements1.wrap("UfO.pn{Ml.Kl7<|e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Elements");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        elements0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.val((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("-S&wQ");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Ignore
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = new Document("j(HJB-^");
      elementArray0[1] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      document0.prependChild(elementArray0[1]);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      elements0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.parents();
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      document0.appendTo(document0);
      // Undeclared exception!
      elements0.toString();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      // Undeclared exception!
      try { 
        elements0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      // Undeclared exception!
      try { 
        elements0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Element[] elementArray0 = new Element[8];
      Document document0 = new Document("1.0");
      elementArray0[0] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        elements0.prevAll("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Element[] elementArray0 = new Element[6];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prev();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("/mP>3f*kPvO^2(;");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.not(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("d");
      Elements elements0 = document0.parents();
      // Undeclared exception!
      try { 
        elements0.not("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.nextAll("^}xvDPe~adMEj^W7zz");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '^}xvDPe~adMEj^W7zz': unexpected token at '^}xvDPe~adMEj^W7zz'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.nextAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("", (-1));
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      // Undeclared exception!
      try { 
        elements0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.html("t4FP$}#IFFHf+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell(":KJ*g");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      // Undeclared exception!
      try { 
        elements0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element[] elementArray0 = new Element[20];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.hasAttr(".f|R+q9k:b5U'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell(":KJ*g");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.eachAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("'=%)O+b)SKN-bx4g2");
      Elements elements0 = document0.getElementsByAttributeValueNot("'=%)O+b)SKN-bx4g2", "'=%)O+b)SKN-bx4g2");
      // Undeclared exception!
      try { 
        elements0.before("'=%)O+b)SKN-bx4g2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element[] elementArray0 = new Element[3];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.attr("&~j;", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.attr((String) null, "4ab4o[VTI^)#Oz-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.after("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("+Gywd");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-78));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -78
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Element element0 = elements0.first();
      assertEquals("html", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("iframe");
      Pattern pattern0 = Pattern.compile("iframe", 914);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1985);
      Elements elements1 = new Elements((List<Element>) elements0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("Onp|2");
      Elements elements0 = document0.getElementsContainingOwnText("Onp|2");
      Elements elements1 = new Elements((Collection<Element>) elements0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Elements elements0 = new Elements(2002);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingText("c}rc");
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Element element0 = elements0.last();
      assertNotNull(element0);
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.next();
      Element element0 = elements1.first();
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.nextAll("y");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Collector");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("dO2UoG?MXWBGmH");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        elements0.eq((-694));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.eq(49);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.remove();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.empty();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.wrap("c}rc");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.wrap("c}rc");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      Elements elements1 = elements0.nextAll();
      Elements elements2 = elements1.after("X2pz Vfn");
      assertNotSame(elements0, elements2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.before("");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.before("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      elements0.prepend("");
      elements0.html(" fW0");
      // Undeclared exception!
      try { 
        elements0.wrap("c}r~qc");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.prepend("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dt");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dt", attributes0);
      Elements elements0 = formElement0.getElementsByTag("dt");
      Elements elements1 = elements0.tagName("LP2^@M*?[I[]$\"M");
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.tagName("");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      String string0 = elements0.html();
      assertEquals("<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      document1.text(" fW0");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      List<String> list0 = elements0.eachText();
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      List<String> list0 = elements0.eachText();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals(1);
      elements0.append("^}xvDPe~adMEj^W7zz");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals(1);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      document0.append("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      String string0 = elements0.text();
      assertEquals("X&OpSvMF#   ", string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.val("4ab4o[VTI^)#Oz-");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("sj!XO]Cq?|C+d;Yg|q");
      Pattern pattern0 = Pattern.compile("sj!XO]Cq?|C+d;Yg|q", (-1));
      Elements elements0 = document0.getElementsByAttributeValueMatching("sj!XO]Cq?|C+d;Yg|q", pattern0);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      boolean boolean0 = elements0.hasClass("X2pz Vfn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("^}xvDPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("w7uJXg}`j/5e");
      Elements elements0 = document0.getElementsByIndexLessThan((-1755));
      Elements elements1 = elements0.toggleClass("w7uJXg}`j/5e");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.removeClass("abs:");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.removeClass("abs:");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dt");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dt", attributes0);
      Elements elements0 = formElement0.getElementsByTag("dt");
      elements0.addClass("LP2^@M*?[I[]$\"M");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.removeAttr("c}rc");
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.removeAttr("c}rc");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Element element0 = document0.append("X&OpSvMF#");
      Elements elements0 = element0.getElementsContainingOwnText("X&OpSvMF#");
      elements0.attr("X&OpSvMF#", "X&OpSvMF#");
      List<String> list0 = elements0.eachAttr("X&OpSvMF#");
      assertTrue(list0.contains("X&OpSvMF#"));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      List<String> list0 = elements0.eachAttr("<html>\n <head></head>\n <body>\n </body>\n</html>\n<head></head>\n<body>\n</body>");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element[] elementArray0 = new Element[2];
      Document document0 = new Document("j(HJB-^");
      elementArray0[0] = (Element) document0;
      elementArray0[1] = (Element) document0;
      Elements elements0 = new Elements(elementArray0);
      boolean boolean0 = elements0.hasAttr(".f|R+q9k:b5U'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("^}xvDPe~adMEj^W7zz");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByIndexEquals(1);
      elements0.attr("^}xvDPe~adMEj^W7zz", "4ab4o[VTI^)#Oz-");
      String string0 = elements0.attr("^}xvDPe~adMEj^W7zz");
      assertEquals("4ab4o[VTI^)#Oz-", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("^}xvDqPe~adMEj^W7zz");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals(1);
      String string0 = elements0.attr("^}xvDqPe~adMEj^W7zz");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("^}xvDqPe~adMEj^W7zz");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("M<v7U", parseSettings0);
      Element element0 = new Element(tag0, "M<v7U");
      Elements elements0 = element0.siblingElements();
      // Undeclared exception!
      try { 
        elements0.prev("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dt");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dt", attributes0);
      Elements elements0 = formElement0.getElementsByTag("dt");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("");
      // Undeclared exception!
      try { 
        elements0.select("X&OpSvMF#   ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'X&OpSvMF#   ': unexpected token at '&OpSvMF#   '
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan(49);
      Elements elements1 = elements0.parents();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("X&OpSvMF#");
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("<H8!7");
      Elements elements0 = document0.getElementsByAttributeValueMatching("<H8!7", "<H8!7");
      Elements elements1 = elements0.not("E");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("^}xvDqPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("<H8!7");
      Elements elements0 = document0.getElementsByAttributeValueMatching("<H8!7", "<H8!7");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("<H8!7");
      Elements elements0 = document0.getElementsByAttributeValueMatching("<H8!7", "<H8!7");
      Elements elements1 = elements0.prevAll("E");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("^}xvDqPe~adMEj^W7zz");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("X&OpSvMF#");
      Elements elements0 = document0.getElementsContainingOwnText("X&OpSvMF#");
      // Undeclared exception!
      try { 
        elements0.next("X&OpSvMF#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'X&OpSvMF#': unexpected token at '&OpSvMF#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prevAll();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }
}
