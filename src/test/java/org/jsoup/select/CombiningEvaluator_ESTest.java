/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:44:48 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Element;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator[] evaluatorArray0 = new Evaluator[3];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element0, element1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_And0.num = 35;
      combiningEvaluator_And0.num = (-865);
      combiningEvaluator_And0.toString();
      combiningEvaluator_And0.updateNumEvaluators();
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      combiningEvaluator_Or0.toString();
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_Or0.toString();
      combiningEvaluator_And0.num = (-865);
      combiningEvaluator_And0.rightMostEvaluator();
      Evaluator evaluator0 = combiningEvaluator_Or0.rightMostEvaluator();
      Evaluator evaluator1 = combiningEvaluator_Or0.rightMostEvaluator();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.add(evaluator0);
      combiningEvaluator_And0.matches(element0, element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element1, element1);
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element2, element2);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.replaceRightMostEvaluator(evaluator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.updateNumEvaluators();
      combiningEvaluator_Or0.num = (-1314);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.matches(element0, element0);
      combiningEvaluator_Or0.num = 43;
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.rightMostEvaluator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 42, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[5];
      Collection<Evaluator> collection0 = null;
      CombiningEvaluator.And combiningEvaluator_And0 = null;
      try {
        combiningEvaluator_And0 = new CombiningEvaluator.And((Collection<Evaluator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Collection<Evaluator> collection0 = null;
      CombiningEvaluator.Or combiningEvaluator_Or0 = null;
      try {
        combiningEvaluator_Or0 = new CombiningEvaluator.Or((Collection<Evaluator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_Or0.num = 0;
      combiningEvaluator_Or0.num = 23;
      combiningEvaluator_Or0.matches(element0, element1);
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(combiningEvaluator_Or1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 22, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      // Undeclared exception!
      try { 
        combiningEvaluator_Or0.replaceRightMostEvaluator(evaluatorArray0[3]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[3];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_And0;
      combiningEvaluator_And0.rightMostEvaluator();
      evaluatorArray0[1] = null;
      CombiningEvaluator.And combiningEvaluator_And1 = new CombiningEvaluator.And(evaluatorArray0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.matches(element0, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.CombiningEvaluator$And", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_Or0.num = 4;
      combiningEvaluator_And0.toString();
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_And0.toString();
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      combiningEvaluator_Or0.matches((Element) null, (Element) null);
      combiningEvaluator_Or0.matches((Element) null, (Element) null);
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_Or0.add(combiningEvaluator_And0);
      combiningEvaluator_And0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.toString();
      Evaluator[] evaluatorArray0 = new Evaluator[6];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches(element0, element0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Evaluator[] evaluatorArray0 = new Evaluator[7];
      evaluatorArray0[0] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[1] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[5] = (Evaluator) combiningEvaluator_Or0;
      CombiningEvaluator.Or combiningEvaluator_Or1 = null;
      try {
        combiningEvaluator_Or1 = new CombiningEvaluator.Or((Collection<Evaluator>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.updateNumEvaluators();
      Element element0 = null;
      combiningEvaluator_Or0.matches((Element) null, (Element) null);
      CombiningEvaluator.Or combiningEvaluator_Or1 = new CombiningEvaluator.Or();
      combiningEvaluator_Or0.add(combiningEvaluator_Or1);
      Evaluator evaluator0 = combiningEvaluator_Or0.rightMostEvaluator();
      combiningEvaluator_Or0.replaceRightMostEvaluator(evaluator0);
      combiningEvaluator_Or0.matches((Element) null, (Element) null);
      combiningEvaluator_Or0.add(evaluator0);
      Evaluator[] evaluatorArray0 = new Evaluator[5];
      evaluatorArray0[0] = evaluator0;
      evaluatorArray0[1] = evaluator0;
      evaluatorArray0[2] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[3] = (Evaluator) combiningEvaluator_Or0;
      evaluatorArray0[4] = (Evaluator) combiningEvaluator_Or1;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      combiningEvaluator_And0.matches((Element) null, (Element) null);
      combiningEvaluator_And0.matches(element1, element1);
      CombiningEvaluator.Or combiningEvaluator_Or2 = new CombiningEvaluator.Or(evaluatorArray0);
      combiningEvaluator_Or2.num = 1947;
      combiningEvaluator_Or1.updateNumEvaluators();
      combiningEvaluator_Or0.replaceRightMostEvaluator(combiningEvaluator_Or2);
      combiningEvaluator_Or1.updateNumEvaluators();
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_Or1.rightMostEvaluator();
      combiningEvaluator_And0.updateNumEvaluators();
      combiningEvaluator_And0.matches((Element) null, (Element) null);
      combiningEvaluator_And0.matches((Element) null, (Element) null);
      // Undeclared exception!
      try { 
        combiningEvaluator_Or2.rightMostEvaluator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1946, Size: 5
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombiningEvaluator.And combiningEvaluator_And0 = null;
      try {
        combiningEvaluator_And0 = new CombiningEvaluator.And((Evaluator[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
