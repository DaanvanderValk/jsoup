/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:40:32 GMT 2018
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      assertNotNull(cleaner0);
      
      // Undeclared exception!
      try { 
        cleaner0.isValid((Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(whitelist0).isSafeTag(anyString());
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("*lK0A1*}%fXE1H;(").when(document0).baseUri();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      assertNotNull(cleaner0);
      
      Document document1 = cleaner0.clean(document0);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals("*lK0A1*}%fXE1H;(", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("*lK0A1*}%fXE1H;(", document1.baseUri());
      
      // Undeclared exception!
      try { 
        cleaner0.clean(document1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Cleaner cleaner0 = null;
      try {
        cleaner0 = new Cleaner((Whitelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      assertNotNull(cleaner0);
      
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("CharacterReferenceInRcdata").when(document0).baseUri();
      Document document1 = cleaner0.clean(document0);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("CharacterReferenceInRcdata", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("CharacterReferenceInRcdata", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(document1, (Element) null).when(document2).body();
      doReturn("CharacterReferenceInRcdata").when(document2).baseUri();
      Document document3 = cleaner0.clean(document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("CharacterReferenceInRcdata", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("CharacterReferenceInRcdata", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("CharacterReferenceInRcdata", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("CharacterReferenceInRcdata", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      assertNotNull(cleaner0);
      
      boolean boolean0 = cleaner0.isValidBodyHtml("ZjPOGDJ");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cleaner0.isValidBodyHtml("ZjPOGDJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      assertNotNull(cleaner0);
      
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document0).body();
      doReturn("").when(document0).baseUri();
      Document document1 = cleaner0.clean(document0);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      
      Document document2 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn(document1, (Element) null).when(document2).body();
      doReturn("$+P.]e=I^").when(document2).baseUri();
      Document document3 = cleaner0.clean(document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      
      Document document4 = cleaner0.clean(document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotNull(document4);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("$+P.]e=I^", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("$+P.]e=I^", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      
      Document document5 = cleaner0.clean(document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotNull(document5);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("$+P.]e=I^", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("$+P.]e=I^", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("$+P.]e=I^", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("$+P.]e=I^", document5.location());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      
      boolean boolean0 = cleaner0.isValid(document4);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertTrue(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("$+P.]e=I^", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("$+P.]e=I^", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      
      boolean boolean1 = cleaner0.isValidBodyHtml("1cX{");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = cleaner0.isValidBodyHtml("[%s=%s]");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Document document6 = cleaner0.clean(document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document3, document4);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotNull(document6);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("$+P.]e=I^", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("$+P.]e=I^", document6.baseUri());
      
      Document document7 = cleaner0.clean(document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document7, document5);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotNull(document7);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("$+P.]e=I^", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals("$+P.]e=I^", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      
      boolean boolean3 = cleaner0.isValid(document7);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document7, document5);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertTrue(boolean3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("$+P.]e=I^", document7.baseUri());
      assertEquals(1, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals("$+P.]e=I^", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      
      boolean boolean4 = cleaner0.isValidBodyHtml("");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      Document document8 = cleaner0.clean(document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document8);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document4);
      assertNotSame(document8, document6);
      assertNotNull(document8);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document6));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("$+P.]e=I^", document8.baseUri());
      assertEquals("#root", document8.tagName());
      assertEquals(1, document8.childNodeSize());
      assertEquals("#document", document8.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.updateMetaCharsetElement());
      assertFalse(document8.isBlock());
      assertEquals("$+P.]e=I^", document8.location());
      assertFalse(document8.hasParent());
      
      Document document9 = cleaner0.clean(document4);
      assertNotSame(document9, document5);
      assertNotSame(document9, document6);
      assertNotSame(document9, document3);
      assertNotSame(document9, document8);
      assertNotSame(document9, document1);
      assertNotSame(document9, document4);
      assertNotSame(document9, document7);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document9);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document9);
      assertNotSame(document3, document8);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document4, document9);
      assertNotSame(document4, document8);
      assertNotSame(document4, document6);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertNotNull(document9);
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document4.equals((Object)document8));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document9.isBlock());
      assertFalse(document9.hasParent());
      assertEquals("$+P.]e=I^", document9.location());
      assertEquals("$+P.]e=I^", document9.baseUri());
      assertEquals(1, document9.childNodeSize());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertEquals(0, document9.siblingIndex());
      assertEquals("#document", document9.nodeName());
      assertEquals("#root", document9.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("$+P.]e=I^", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("$+P.]e=I^", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      
      Document document10 = cleaner0.clean(document9);
      assertNotSame(document9, document5);
      assertNotSame(document9, document10);
      assertNotSame(document9, document6);
      assertNotSame(document9, document3);
      assertNotSame(document9, document8);
      assertNotSame(document9, document1);
      assertNotSame(document9, document4);
      assertNotSame(document9, document7);
      assertNotSame(document10, document6);
      assertNotSame(document10, document3);
      assertNotSame(document10, document4);
      assertNotSame(document10, document9);
      assertNotSame(document10, document7);
      assertNotSame(document10, document1);
      assertNotSame(document10, document5);
      assertNotSame(document10, document8);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document10);
      assertNotSame(document1, document9);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document9);
      assertNotSame(document3, document8);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document10);
      assertNotSame(document4, document9);
      assertNotSame(document4, document8);
      assertNotSame(document4, document10);
      assertNotSame(document4, document6);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document7);
      assertNotSame(document4, document1);
      assertNotNull(document10);
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document2));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document10.equals((Object)document6));
      assertFalse(document10.equals((Object)document0));
      assertFalse(document10.equals((Object)document3));
      assertFalse(document10.equals((Object)document4));
      assertFalse(document10.equals((Object)document9));
      assertFalse(document10.equals((Object)document2));
      assertFalse(document10.equals((Object)document7));
      assertFalse(document10.equals((Object)document1));
      assertFalse(document10.equals((Object)document5));
      assertFalse(document10.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document9));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document4.equals((Object)document9));
      assertFalse(document4.equals((Object)document8));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document7));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document9.isBlock());
      assertFalse(document9.hasParent());
      assertEquals("$+P.]e=I^", document9.location());
      assertEquals("$+P.]e=I^", document9.baseUri());
      assertEquals(1, document9.childNodeSize());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertEquals(0, document9.siblingIndex());
      assertEquals("#document", document9.nodeName());
      assertEquals("#root", document9.tagName());
      assertEquals("$+P.]e=I^", document10.baseUri());
      assertEquals("#root", document10.tagName());
      assertEquals(1, document10.childNodeSize());
      assertFalse(document10.updateMetaCharsetElement());
      assertFalse(document10.hasParent());
      assertEquals("$+P.]e=I^", document10.location());
      assertFalse(document10.isBlock());
      assertEquals("#document", document10.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document10.quirksMode());
      assertEquals(0, document10.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("$+P.]e=I^", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("$+P.]e=I^", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      
      boolean boolean5 = cleaner0.isValid(document3);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(document1, document8);
      assertNotSame(document1, document10);
      assertNotSame(document1, document9);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document7);
      assertNotSame(document3, document4);
      assertNotSame(document3, document7);
      assertNotSame(document3, document9);
      assertNotSame(document3, document8);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document10);
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document10));
      assertFalse(document1.equals((Object)document9));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document9));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document10));
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("$+P.]e=I^", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("$+P.]e=I^", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      
      boolean boolean6 = cleaner0.isValidBodyHtml("org.jsoup.safety.Cleaner");
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Whitelist whitelist0 = mock(Whitelist.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(whitelist0).isSafeTag(anyString());
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(document0).baseUri();
      String string0 = "<J";
      cleaner0.isValidBodyHtml("<J");
      Document document1 = mock(Document.class, new ViolatedAssumptionAnswer());
      doReturn((Element) null).when(document1).body();
      doReturn("<J").when(document1).baseUri();
      Document document2 = cleaner0.clean(document1);
      cleaner0.isValid(document2);
      Document document3 = cleaner0.clean(document2);
      cleaner0.isValid(document3);
      cleaner0.isValid(document2);
      // Undeclared exception!
      try { 
        cleaner0.clean(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
