/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:25:34 GMT 2018
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("ul", "ul", "ul");
      String string0 = "org.jsoup.select.Evaluator$IndexEquals";
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexEquals", "alt", "YJ1u]D3 J#D)XqXJ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.jsoup.select.Evaluator$IndexEquals";
      stringArray0[1] = "YJ1u]D3 J#D)XqXJ";
      stringArray0[2] = "YJ1u]D3 J#D)XqXJ";
      stringArray0[3] = "ul";
      stringArray0[4] = "ul";
      whitelist2.addAttributes("org.jsoup.select.Evaluator$IndexEquals", stringArray0);
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("alt");
      whitelist_Protocol0.toString();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "alt";
      stringArray1[1] = "alt";
      stringArray1[2] = "org.jsoup.select.Evaluator$IndexEquals";
      whitelist0.isSafeTag("org.jsoup.select.Evaluator$IndexEquals");
      stringArray1[3] = "org.jsoup.select.Evaluator$IndexEquals";
      stringArray1[4] = "alt";
      stringArray1[5] = "YJ1u]D3 J#D)XqXJ";
      stringArray1[6] = "alt";
      whitelist1.removeAttributes("org.jsoup.select.Evaluator$IndexEquals", stringArray1);
      Whitelist.basic();
      Whitelist.AttributeKey.valueOf("alt");
      whitelist0.preserveRelativeLinks(true);
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute("start", "UTF-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("<I1<f?F}^N8K#J");
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<I1<f?F}^N8K#J";
      stringArray0[1] = "<I1<f?F}^N8K#J";
      stringArray0[2] = "<I1<f?F}^N8K#J";
      stringArray0[3] = "<I1<f?F}^N8K#J";
      stringArray0[4] = "<I1<f?F}^N8K#J";
      stringArray0[5] = "<I1<f?F}^N8K#J";
      stringArray0[6] = "<I1<f?F}^N8K#J";
      stringArray0[7] = "<I1<f?F}^N8K#J";
      stringArray0[8] = "<I1<f?F}^N8K#J";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J", "Z}Uxf)K4d");
      Whitelist.simpleText();
      whitelist2.addProtocols("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J", stringArray0);
      whitelist0.removeEnforcedAttribute("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("ul", "ul", "ul");
      String string0 = "org.jsoup.select.Evaluator$IndexEquals";
      whitelist0.removeEnforcedAttribute("ul", "YJ1u]D3 J#D)rqXJ");
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("alt");
      whitelist_Protocol0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alt";
      stringArray0[1] = "alt";
      stringArray0[2] = "org.jsoup.select.Evaluator$IndexEquals";
      whitelist0.isSafeTag("org.jsoup.select.Evaluator$IndexEquals");
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexEquals";
      stringArray0[4] = "alt";
      stringArray0[5] = "YJ1u]D3 J#D)rqXJ";
      stringArray0[6] = "alt";
      whitelist1.removeAttributes("org.jsoup.select.Evaluator$IndexEquals", stringArray0);
      Whitelist.basic();
      Whitelist.AttributeKey.valueOf("alt");
      whitelist0.preserveRelativeLinks(true);
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute("start", "UTF-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?!9^";
      stringArray0[1] = "?!9^";
      Whitelist whitelist1 = whitelist0.removeAttributes("?!9^", stringArray0);
      whitelist1.isSafeTag("?!9^");
      whitelist1.removeEnforcedAttribute("?!9^", "Must be true");
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true);
      Attributes attributes0 = whitelist3.getEnforcedAttributes("?!9^");
      Whitelist.simpleText();
      String string0 = "^BK<!a>rh";
      whitelist0.isSafeTag("^BK<!a>rh");
      String string1 = "ZI*iX";
      Whitelist whitelist4 = whitelist0.removeEnforcedAttribute("ZI*iX", "ZI*iX");
      Whitelist whitelist5 = whitelist4.preserveRelativeLinks(true);
      whitelist4.addEnforcedAttribute("ZI*iX", "ol", "ol");
      String string2 = "xml";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("href", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "alt", attributes0);
      Document document0 = new Document("^BK<!a>rh");
      Document document1 = document0.clone();
      document1.body();
      FormElement formElement1 = formElement0.addElement((Element) null);
      Attribute attribute0 = new Attribute("href", "tH+\"r");
      whitelist2.isSafeAttribute("ol", formElement1, attribute0);
      whitelist1.addAttributes("ol", stringArray0);
      Whitelist.none();
      // Undeclared exception!
      try { 
        whitelist5.removeProtocols("xml", "Must be true", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("<I1<f?F}^N8K#J");
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<I1<f?F}^N8K#J";
      stringArray0[1] = "<I1<f?F}^N8K#J";
      stringArray0[2] = "<I1<f?F}^N8K#J";
      stringArray0[3] = "<I1<f?F}^N8K#J";
      stringArray0[4] = "<I1<f?F}^N8K#J";
      stringArray0[5] = "<I1<f?F}^N8K#J";
      stringArray0[6] = "<I1<f?F}^N8K#J";
      stringArray0[7] = "<I1<f?F}^N8K#J";
      stringArray0[8] = "<I1<f?F}^N8K#J";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("<I1<f?F}^N8K#J", "rowspan", "Z}Uxf)K4d");
      Whitelist.simpleText();
      whitelist2.addProtocols("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J", stringArray0);
      whitelist0.removeEnforcedAttribute("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J");
      whitelist0.addTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("<I1<f?F}^N8K#J", "UB`[Q,2Kd,;Um3B3R", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?!9^";
      stringArray0[1] = "?!9^";
      Whitelist whitelist1 = whitelist0.removeAttributes("?!9^", stringArray0);
      whitelist1.addAttributes("?!9^", stringArray0);
      whitelist1.removeEnforcedAttribute("?!9^", "Must be true");
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      whitelist2.addEnforcedAttribute("?!9^", "?!9^", "9.WT");
      Whitelist whitelist3 = whitelist1.preserveRelativeLinks(true);
      whitelist3.getEnforcedAttributes("?!9^");
      Whitelist.simpleText();
      String string0 = "^BK<!a>rh";
      whitelist0.isSafeTag("^BK<!a>rh");
      String string1 = "ZI*iX";
      Whitelist whitelist4 = Whitelist.relaxed();
      Whitelist whitelist5 = whitelist4.preserveRelativeLinks(true);
      whitelist4.addEnforcedAttribute("ZI*iX", "ol", "ol");
      String string2 = "xml";
      // Undeclared exception!
      try { 
        whitelist5.removeProtocols("xml", "Must be true", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("<I1<f?F}^N8K#J");
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<I1<f?F}^N8K#J";
      stringArray0[1] = "<I1<f?F}^N8K#J";
      stringArray0[2] = "<I1<f?F}^N8K#J";
      stringArray0[3] = "<I1<f?F}^N8K#J";
      stringArray0[4] = "<I1<f?F}^N8K#J";
      stringArray0[6] = "<I1<f?F}^N8K#J";
      stringArray0[7] = "<I1<f?F}^N8K#J";
      stringArray0[8] = "<I1<f?F}^N8K#J";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J");
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("<I1<f?F}^N8K#J", "rowspan", "Z})Uxf)K4d");
      whitelist2.preserveRelativeLinks(true);
      // Undeclared exception!
      try { 
        whitelist2.addProtocols(stringArray0[5], "<I1<f?F}^N8K#J", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":matchText";
      Whitelist whitelist1 = whitelist0.addAttributes(":matchText", stringArray0);
      whitelist1.addTags(stringArray0);
      Document document0 = new Document(":matchText");
      Document document1 = document0.ownerDocument();
      document1.prependElement("j`~sC^A}}`5k94$cP");
      Whitelist whitelist2 = Whitelist.none();
      whitelist2.removeEnforcedAttribute("readonly", "K2Ckb&|s&7Ds$,p-bl");
      whitelist0.addTags(stringArray0);
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("oe");
      whitelist_Protocol0.equals((Object) null);
      Whitelist.basic();
      whitelist1.addProtocols(":matchText", ":matchText", stringArray0);
      Whitelist.none();
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols(":matchText", ":?DKOe\"8fF*`l<A7OG", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":matchText";
      Whitelist whitelist1 = whitelist0.addAttributes(":matchText", stringArray0);
      whitelist1.addTags(stringArray0);
      Document document0 = new Document(":matchText");
      Document document1 = document0.ownerDocument();
      Attribute attribute0 = new Attribute(":matchText", ":matchText");
      whitelist0.isSafeAttribute("readonly", document1, attribute0);
      document1.prependElement("j`~sC^A}}`5k94$cP");
      whitelist0.isSafeAttribute("^`px7oX.", document1, attribute0);
      Whitelist whitelist2 = whitelist1.addProtocols("strike", "del", stringArray0);
      Whitelist whitelist3 = Whitelist.none();
      whitelist3.removeEnforcedAttribute("readonly", "K2Ckb&|s&7Ds$,p-bl");
      whitelist2.addTags(stringArray0);
      Whitelist.Protocol whitelist_Protocol0 = Whitelist.Protocol.valueOf("oe");
      whitelist_Protocol0.equals((Object) null);
      Whitelist.basic();
      whitelist2.addProtocols(":matchText", ":matchText", stringArray0);
      Whitelist.none();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("dX {f0O0*(dzI1&GffL");
      Whitelist.TagName.valueOf("dX {f0O0*(dzI1&GffL");
      Whitelist.TagName.valueOf("FfkS9");
      Whitelist whitelist0 = Whitelist.none();
      String string0 = "[6{BLr=";
      Whitelist.basicWithImages();
      String string1 = "rel";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("FfkS9", parseSettings0);
      Attributes attributes0 = whitelist0.getEnforcedAttributes("FfkS9");
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "?uM)d]#5|,b;wq", attributes1);
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute("?uM)d]#5|,b;wq", formElement0, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Whitelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O\"-JS,R<RJJ>";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("^J", stringArray0);
      Document document0 = new Document("O\"-JS,R<RJJ>");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.head();
      Attribute attribute0 = Attribute.createFromEncoded("O\"-JS,R<RJJ>", "C&gFe");
      whitelist2.isSafeAttribute("^J", (Element) null, attribute0);
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("A<v");
      whitelist_TagName0.equals("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Whitelist.TagName.valueOf("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Whitelist.TagName.valueOf("autofocus");
      whitelist_TagName0.toString();
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "strong";
      stringArray0[1] = "org.jsoup.select.StructuralEvaluator$PreviousSibling";
      stringArray0[2] = "autofocus";
      stringArray0[3] = "autofocus";
      stringArray0[4] = "org.jsoup.select.StructuralEvaluator$PreviousSibling";
      stringArray0[5] = "org.jsoup.select.StructuralEvaluator$PreviousSibling";
      stringArray0[6] = "autofocus";
      stringArray0[7] = "autofocus";
      stringArray0[8] = "org.jsoup.select.StructuralEvaluator$PreviousSibling";
      Whitelist whitelist1 = whitelist0.addAttributes("strong", stringArray0);
      whitelist1.isSafeTag("org.jsoup.select.StructuralEvaluator$PreviousSibling");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[3];
      whitelist0.preserveRelativeLinks(true);
      stringArray0[0] = "kde,5a0m`_NP";
      String string0 = "0I)&.K_.!;t";
      stringArray0[1] = "0I)&.K_.!;t";
      stringArray0[2] = "'iN";
      whitelist0.removeTags(stringArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        whitelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = Whitelist.basic();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U";
      stringArray0[1] = "U";
      stringArray0[2] = "A1F'llbu0u;Eol";
      stringArray0[3] = "U";
      stringArray0[4] = "U";
      stringArray0[5] = "U";
      whitelist1.addProtocols("U", "U", stringArray0);
      Whitelist whitelist2 = Whitelist.basic();
      Whitelist whitelist3 = Whitelist.basicWithImages();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "bg'8B1YE";
      whitelist3.addAttributes("bg'8B1YE", stringArray1);
      Whitelist.relaxed();
      Whitelist whitelist4 = whitelist3.preserveRelativeLinks(false);
      whitelist4.getEnforcedAttributes("A1F'llbu0u;Eol");
      whitelist4.removeAttributes("bg'8B1YE", stringArray1);
      whitelist3.preserveRelativeLinks(false);
      whitelist0.addTags(stringArray1);
      whitelist4.addAttributes("b:ST|iO'5!A&BZ2", stringArray0);
      // Undeclared exception!
      try { 
        whitelist2.removeProtocols("U", "A1F'llbu0u;Eol", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "Dm2byK.JIXwBsx!@Hu\\";
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("Dm2byK.JIXwBsx!@Hu");
      String string1 = "org.jsoup.nodes.Attribute";
      Whitelist.AttributeValue.valueOf("org.jsoup.nodes.Attribute");
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("Dm2byK.JIXwBsx!@Hu", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist.basic();
      String string0 = null;
      // Undeclared exception!
      try { 
        whitelist0.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uT8N3-iQ[UI";
      Whitelist whitelist1 = whitelist0.addAttributes("uT8N3-iQ[UI", stringArray0);
      whitelist1.removeEnforcedAttribute("uT8N3-iQ[UI", "uT8N3-iQ[UI");
      whitelist0.addEnforcedAttribute("th", "em", "em");
      String string0 = "";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("th", "", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String string0 = null;
      // Undeclared exception!
      try { 
        whitelist0.removeEnforcedAttribute((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("");
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist.simpleText();
      Whitelist whitelist1 = Whitelist.basicWithImages();
      Document document0 = new Document("");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("<e}]VSHGq", "<e}]VSHGq", attributes0);
      whitelist1.isSafeAttribute("", document0, attribute0);
      String[] stringArray0 = new String[1];
      whitelist0.preserveRelativeLinks(true);
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        whitelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist.basicWithImages();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "x%v|`";
      stringArray0[1] = "#declaration";
      stringArray0[2] = "b9+S&H2-e(GRoL5L";
      stringArray0[3] = "S21N#";
      stringArray0[4] = "pre";
      stringArray0[5] = "1.0";
      stringArray0[6] = "";
      stringArray0[7] = "Pattern syntax error: ";
      String string0 = "";
      Whitelist whitelist0 = Whitelist.none();
      Document document0 = new Document("pre");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.body();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("x%v|`");
      Attribute attribute0 = new Attribute("x%v|`", "j'8\"{DK6S3", attributes0);
      Attribute attribute1 = attribute0.clone();
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute((String) null, (Element) null, attribute1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist.relaxed();
      whitelist0.removeEnforcedAttribute("xm_Bmq5Md4/<s", ":>?a~jc\"/Giz$");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = Whitelist.none();
      whitelist0.preserveRelativeLinks(false);
      Whitelist.relaxed();
      whitelist0.isSafeTag("fQ/Kpmte9vFp");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes("&Xx9F0G@^ W-", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      String string0 = "strike";
      stringArray0[1] = "strike";
      stringArray0[2] = "mark";
      String string1 = "noshade";
      stringArray0[3] = "noshade";
      String string2 = "";
      stringArray0[4] = "";
      String string3 = "rV,=:{Tl";
      stringArray0[5] = "rV,=:{Tl";
      stringArray0[6] = "}]S1Z";
      String string4 = "";
      stringArray0[7] = "";
      stringArray0[8] = "H~i%/5wv.]F9{b]";
      // Undeclared exception!
      try { 
        whitelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(false);
      Whitelist whitelist2 = Whitelist.basic();
      Whitelist whitelist3 = whitelist2.removeEnforcedAttribute("mailto", "mailto");
      Whitelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mailto";
      whitelist3.removeAttributes("mailto", stringArray0);
      whitelist1.removeAttributes("Th+Cwu&7BKAxSxtYO@", stringArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String string0 = "g";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "g";
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("<P|3[9d[q%", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nofollow";
      stringArray0[1] = "nofollow";
      whitelist0.removeEnforcedAttribute("nofollow", "nofollow");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = Whitelist.AttributeValue.valueOf("limitedQuirks");
      whitelist_AttributeValue0.toString();
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      String string0 = "j|'hE`";
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("j|'hE`", "jnS]QFP", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\u0005>B/Hs8VHRN`";
      stringArray0[1] = "\u0005>B/Hs8VHRN`";
      stringArray0[2] = "\u0005>B/Hs8VHRN`";
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("\u0005>B/Hs8VHRN`", "q.=+>X}H_V!Y0khFE", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.removeEnforcedAttribute("&^MB77d^F]^Cc#kIBgL", "&^MB77d^F]^Cc#kIBgL");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Document document0 = Document.createShell("");
      Attribute attribute0 = Attribute.createFromEncoded("option", "");
      whitelist0.isSafeAttribute("YjQQt7vhqb -", document0, attribute0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "sup";
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("sup");
      Whitelist whitelist0 = Whitelist.simpleText();
      whitelist0.preserveRelativeLinks(false);
      String string1 = "H!Xz94_r";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string2 = "mx5y~";
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("dt", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nofollow";
      stringArray0[1] = "nofollow";
      whitelist0.addAttributes("nofollow", stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("em");
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("select");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Whitelist.Protocol.valueOf("~-K/ X*(fff0N9Y");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"J1e-]";
      stringArray0[1] = "r D,t";
      Whitelist whitelist1 = whitelist0.addTags(stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      whitelist2.addEnforcedAttribute("PBuVw^", "PBuVw^", "r D,t");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("JigtP*%y0t", "JigtP*%y0t", "JigtP*%y0t");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "object";
      stringArray0[1] = "object";
      stringArray0[2] = "object";
      stringArray0[3] = "object";
      Whitelist whitelist1 = whitelist0.addProtocols("object", "object", stringArray0);
      whitelist1.addProtocols("object", "CRc~6BDEUn~S?:qQvHx", stringArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Whitelist.none();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "r";
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[3];
      whitelist0.isSafeTag("!<I*AxYR9%+8Ub[");
      stringArray0[0] = "!<I*AxYR9%+8Ub[";
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes((String) null, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "img";
      Whitelist.TagName whitelist_TagName0 = Whitelist.TagName.valueOf("img");
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("778Y[knEy");
      whitelist_TagName0.equals(whitelist_Protocol0);
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "img";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.addTags((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = new Whitelist.AttributeKey("");
      Whitelist whitelist0 = Whitelist.simpleText();
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute("74Z&y=0#YY", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.getEnforcedAttributes("");
      // Undeclared exception!
      try { 
        whitelist0.addProtocols("h6", "h6", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue(";");
      whitelist_AttributeValue0.equals(";");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("value", "value", "img");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "img";
      stringArray0[1] = "img";
      stringArray0[2] = "img";
      stringArray0[3] = "img";
      whitelist1.removeTags(stringArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
      whitelist1.preserveRelativeLinks(true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Whitelist.none();
      Whitelist.relaxed();
      Whitelist.AttributeValue.valueOf("R6_f");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ":all";
      stringArray0[1] = ":all";
      stringArray0[2] = "dd";
      stringArray0[3] = ":all";
      stringArray0[4] = ":all";
      stringArray0[5] = ":all";
      stringArray0[6] = ":all";
      stringArray0[7] = ":all";
      stringArray0[8] = ":all";
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      whitelist1.preserveRelativeLinks(false);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String string0 = "q";
      whitelist0.isSafeTag("q");
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("q", "q");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("q", "q", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("'", ",51Y|+f", "'");
      Tag tag0 = Tag.valueOf("caption");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(",51Y|+f", false);
      Attribute attribute0 = new Attribute(",51Y|+f", "~:*tQkFx", attributes1);
      Attributes attributes2 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "caption", attributes2);
      Document document0 = Document.createShell("C'>=K5$_Y%");
      FormElement formElement1 = formElement0.addElement(document0);
      whitelist1.isSafeAttribute("'", formElement1, attribute0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("<I1<f?F}^N8K#J");
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<I1<f?F}^N8K#J";
      stringArray0[1] = "<I1<f?F}^N8K#J";
      stringArray0[2] = "<I1<f?F}^N8K#J";
      stringArray0[3] = "<I1<f?F}^N8K#J";
      stringArray0[4] = "<I1<f?F}^N8K#J";
      stringArray0[5] = "<I1<f?F}^N8K#J";
      stringArray0[6] = "<I1<f?F}^N8K#J";
      stringArray0[7] = "<I1<f?F}^N8K#J";
      stringArray0[8] = "<I1<f?F}^N8K#J";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("<I1<f?F}^N8K#J", "rowspan", "Z}Uxf)K4d");
      whitelist2.preserveRelativeLinks(true);
      whitelist2.addProtocols("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J", stringArray0);
      whitelist_Protocol0.equals((Object) null);
      whitelist1.isSafeTag("*AF(y.xT}]+");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("ul", "ul", "ul");
      String string0 = "org.jsoup.select.Evaluator$IndexEquals";
      whitelist1.addEnforcedAttribute("org.jsoup.select.Evaluator$IndexEquals", "alt", "YJ1u]D3 J#D)XqXJ");
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("alt");
      whitelist_Protocol0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alt";
      stringArray0[1] = "alt";
      stringArray0[2] = "org.jsoup.select.Evaluator$IndexEquals";
      whitelist0.isSafeTag("org.jsoup.select.Evaluator$IndexEquals");
      stringArray0[3] = "org.jsoup.select.Evaluator$IndexEquals";
      stringArray0[4] = "alt";
      stringArray0[5] = "YJ1u]D3 J#D)XqXJ";
      stringArray0[6] = "alt";
      whitelist1.removeAttributes("org.jsoup.select.Evaluator$IndexEquals", stringArray0);
      Whitelist.basic();
      Whitelist.AttributeKey.valueOf("alt");
      whitelist0.preserveRelativeLinks(true);
      // Undeclared exception!
      try { 
        whitelist0.addEnforcedAttribute("start", "UTF-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("<I1<f?F}^N8K#J");
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<I1<f?F}^N8K#J";
      stringArray0[1] = "<I1<f?F}^N8K#J";
      stringArray0[2] = "<I1<f?F}^N8K#J";
      stringArray0[3] = "<I1<f?F}^N8K#J";
      stringArray0[4] = "<I1<f?F}^N8K#J";
      stringArray0[5] = "<I1<f?F}^N8K#J";
      stringArray0[6] = "<I1<f?F}^N8K#J";
      stringArray0[7] = "<I1<f?F}^N8K#J";
      stringArray0[8] = "<I1<f?F}^N8K#J";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addEnforcedAttribute("<I1<f?F}^N8K#J", "rowspan", "Z}Uxf)K4d");
      Whitelist.simpleText();
      whitelist2.addProtocols("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J", stringArray0);
      whitelist0.removeEnforcedAttribute("<I1<f?F}^N8K#J", "<I1<f?F}^N8K#J");
      Whitelist.relaxed();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "?!9^";
      stringArray0[1] = "?!9^";
      Whitelist whitelist1 = whitelist0.removeAttributes("?!9^", stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("?!9^", stringArray0);
      whitelist1.removeEnforcedAttribute("?!9^", "Must be true");
      Whitelist whitelist3 = whitelist2.addEnforcedAttribute("?!9^", "Must be true", "?!9^");
      whitelist3.removeAttributes("?!9^", stringArray0);
      whitelist3.addEnforcedAttribute("?!9^", "?!9^", "9.WT");
      Whitelist whitelist4 = whitelist1.preserveRelativeLinks(true);
      whitelist4.getEnforcedAttributes("?!9^");
      Whitelist.simpleText();
      String string0 = "^BK<!a>rh";
      whitelist0.isSafeTag("^BK<!a>rh");
      String string1 = "ZI*iX";
      Whitelist whitelist5 = Whitelist.relaxed();
      Whitelist whitelist6 = whitelist5.preserveRelativeLinks(true);
      whitelist5.addEnforcedAttribute("ZI*iX", "ol", "ol");
      String string2 = "xml";
      // Undeclared exception!
      try { 
        whitelist6.removeProtocols("xml", "Must be true", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O\"-JS,R<RJJ>";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      String string0 = "^J";
      whitelist1.addAttributes("^J", stringArray0);
      Document document0 = new Document("O\"-JS,R<RJJ>");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.head();
      int int0 = (-1010136971);
      Node[] nodeArray0 = new Node[1];
      CDataNode cDataNode0 = new CDataNode("%+pB70pS#0");
      // Undeclared exception!
      try { 
        cDataNode0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "O\"-JS,R<RJJ>";
      Whitelist whitelist1 = whitelist0.removeTags(stringArray0);
      Whitelist whitelist2 = whitelist1.addAttributes("^J", stringArray0);
      Document document0 = new Document("O\"-JS,R<RJJ>");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.head();
      document0.previousSibling();
      Attribute attribute0 = Attribute.createFromEncoded("O\"-JS,R<RJJ>", "C&gFe");
      whitelist2.isSafeAttribute("^J", (Element) null, attribute0);
      Whitelist.TagName whitelist_TagName0 = new Whitelist.TagName("A<v");
      assertEquals("A<v", whitelist_TagName0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Whitelist whitelist1 = Whitelist.basicWithImages();
      Whitelist.simpleText();
      Whitelist whitelist2 = Whitelist.none();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "hked4]2'6B=u(_@Q]OV";
      stringArray0[2] = "hked4]2'6B=u(_@Q]OV";
      stringArray0[3] = "/eZgi[hUBHVd(v<b";
      whitelist2.isSafeTag("hked4]2'6B=u(_@Q]OV");
      stringArray0[4] = "/eZgi[hUBHVd(v<b";
      Whitelist whitelist3 = whitelist1.removeEnforcedAttribute("hked4]2'6B=u(_@Q]OV", "/eZgi[hUBHVd(v<b");
      String[] stringArray1 = new String[0];
      whitelist0.addTags(stringArray1);
      Whitelist whitelist4 = Whitelist.relaxed();
      whitelist4.isSafeTag("/eZgi[hUBHVd(v<b");
      Whitelist whitelist5 = whitelist3.removeEnforcedAttribute("hked4]2'6B=u(_@Q]OV", "hked4]2'6B=u(_@Q]OV");
      Whitelist.basic();
      String string0 = "colgroup";
      // Undeclared exception!
      try { 
        whitelist5.addAttributes("colgroup", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("");
      Whitelist.Protocol.valueOf("");
      Whitelist whitelist0 = Whitelist.simpleText();
      whitelist0.getEnforcedAttributes("n@WDBTflz");
      Whitelist whitelist1 = Whitelist.basicWithImages();
      Whitelist.Protocol.valueOf("");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes("Du8f?m\"@}26P8", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
