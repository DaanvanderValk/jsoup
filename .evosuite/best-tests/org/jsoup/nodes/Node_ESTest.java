/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:32:07 GMT 2018
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "hl");
      TextNode textNode1 = new TextNode("hl");
      StringBuffer stringBuffer0 = new StringBuffer("%h2m");
      textNode1.html(stringBuffer0);
      // Undeclared exception!
      try { 
        textNode0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.data();
      document0.siblingIndex = 2147483645;
      Document document3 = new Document("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      document1.html(stringBuffer0);
      document3.outerHtml();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      document1.previousElementSibling();
      document2.cssSelector();
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      Document document1 = document0.normalise();
      Document document2 = document0.normalise();
      Document document3 = document0.clone();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document1;
      Element element0 = document3.addClass("org.jsoup.nodes.Node");
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) document0;
      nodeArray0[5].hasSameValue(nodeArray0[1]);
      nodeArray0[3] = (Node) document0;
      element0.siblingNodes();
      nodeArray0[7] = (Node) document2;
      nodeArray0[0].baseUri();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.siblingIndex = 732;
      String string1 = "abs:f0[aA {6?&#";
      Element element0 = document0.appendElement("abs:f0[aA {6?&#");
      document0.tagName("abs:f0[aA {6?&#");
      String string2 = "-";
      Element element1 = element0.before("-");
      document0.shallowClone();
      StringBuilder stringBuilder0 = new StringBuilder("abs:f0[aA {6?&#");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      stringBuilder1.append(false);
      stringBuilder1.append("-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.hasSameValue(element1);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-1799), 1808);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1799
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("|D");
      Document document1 = document0.clone();
      document1.prependText("|D");
      DataNode dataNode0 = new DataNode("");
      dataNode0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("#text");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Document document3 = document2.outputSettings(document_OutputSettings2);
      document0.reparentChild(document3);
      Element element0 = document3.body();
      element0.absUrl("encoding");
      document3.hasParent();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("vy");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document0.prependChild(document2);
      document1.wrap("head");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      stringBuilder0.append((CharSequence) "");
      char[] charArray0 = new char[1];
      Comment comment0 = new Comment("", "pubS");
      comment0.getData();
      Document document0 = new Document("H.z$/>&");
      Document document1 = (Document)document0.removeClass("A[Y#@P?rv5tU2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      document1.outerHtmlTail(stringBuilder0, (-1207), document_OutputSettings4);
      textNode0.html((StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("w9ck");
      Document document1 = document0.clone();
      document0.previousSibling();
      Document document2 = (Document)document1.empty();
      document0.getElementsByIndexGreaterThan((-104056190));
      document2.getElementsContainingOwnText("w9ck");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
      Document document3 = (Document)document2.doClone(document1);
      CDataNode cDataNode0 = new CDataNode("vn#/b5@Yb(lx.");
      cDataNode0.nodeName();
      document3.getElementsContainingOwnText("jLNwC@l9aA");
      document1.nodeName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      Document document0 = Document.createShell("|D");
      Document document1 = document0.clone();
      Element element0 = document1.prependText("|D");
      textNode0.parentNode = (Node) element0;
      textNode0.after("org.jsoup.nodes.Node$OuterHtmlVisitor");
      DataNode dataNode0 = new DataNode("");
      textNode0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("abs:pubSysKey");
      Document document1 = document0.normalise();
      Document document2 = (Document)document1.doClone(document0);
      document2.parent();
      document1.getElementsMatchingText("meta");
      document0.doSetBaseUri("abs:");
      Tag tag0 = document0.tag();
      Attributes attributes0 = document2.attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Node$OuterHtmlVisitor", false);
      FormElement formElement0 = new FormElement(tag0, "#text", attributes1);
      document2.before((Node) formElement0);
      // Undeclared exception!
      try { 
        document1.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("abs:pubSysKey");
      String string0 = "qabs:";
      String string1 = "meta";
      Element element0 = document0.doClone(document0);
      element0.parent();
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("7t");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("abs:pubSysKey");
      document0.getElementsByAttributeValueEnding("abs:", "meta");
      Element element0 = document0.doClone(document0);
      element0.wrap("=tX5'6\"c/_gUpdS");
      element0.parent();
      document0.getElementsMatchingText("meta");
      document0.doSetBaseUri("abs:");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("Lw/95");
      Document document1 = document0.normalise();
      Element element0 = document1.createElement("Lw/95");
      document1.getElementsByAttributeValueEnding("Ay'W=A", "Lw/95");
      element0.doClone(document1);
      element0.getAllElements();
      // Undeclared exception!
      try { 
        document0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("R$j6|unz+a+3GY3.");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document1 = (Document)document0.filter(nodeFilter0);
      String string0 = "HTTP error fetching URL";
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "R$j6|unz+a+3GY3.");
      // Undeclared exception!
      try { 
        document1.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextNode.normaliseWhitespace("<z 8M%7n^mT");
      Document document0 = Document.createShell("<z 8M%7n^mT");
      document0.doSetBaseUri("<z 8M%7n^mT");
      Element element0 = document0.addClass("N5N1W<SLE");
      document0.prependChild(element0);
      Element element1 = document0.lastElementSibling();
      document0.after((Node) element1);
      // Undeclared exception!
      document0.wrap("<z 8M%7n^mT");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      // Undeclared exception!
      try { 
        textNode0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      TextNode textNode1 = new TextNode("", "");
      StringBuffer stringBuffer0 = new StringBuffer("%h2m");
      textNode1.html(stringBuffer0);
      textNode0.outerHtml();
      DataNode dataNode0 = new DataNode("");
      dataNode0.reparentChild(textNode0);
      // Undeclared exception!
      try { 
        textNode0.after((Node) dataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null, "");
      TextNode textNode1 = new TextNode((String) null);
      String string0 = "%\\h2m";
      StringBuffer stringBuffer0 = new StringBuffer("%h2m");
      // Undeclared exception!
      try { 
        textNode1.html(stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("#text");
      Document document1 = new Document("#text");
      document1.hasSameValue(document0);
      Document document2 = document1.clone();
      document2.tagName();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("R$j6|unz+a+3GY3.");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      document0.getElementsByIndexLessThan((-471));
      Node node1 = node0.removeAttr("HTTP error fetching URL");
      Node[] nodeArray0 = null;
      CDataNode cDataNode0 = new CDataNode("HTTP error fetching URL");
      node1.equals(cDataNode0);
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = ":`r7}M%+Z )";
      Document document0 = Document.createShell(":`r7}M%+Z )");
      document0.getOutputSettings();
      document0.toString();
      document0.getElementsByAttributeValueStarting("<html>\n <head></head>\n <body></body>\n</html>", "0&/bL^ff7{-$y2");
      document0.equals(":`r7}M%+Z )");
      document0.childNodeSize();
      document0.hasAttr("meta");
      Element.preserveWhitespace(document0);
      // Undeclared exception!
      try { 
        document0.after("meta");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextNode textNode0 = new TextNode("-$9evU4");
      textNode0.root();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("-$9evU4", parseSettings0);
      String string0 = null;
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("#text", false);
      // Undeclared exception!
      try { 
        attributes1.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("abs:http error fetching url");
      Document document1 = document0.clone();
      Element element0 = document1.html("abs:http error fetching url");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.data();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      document1.html(stringBuffer0);
      document3.outerHtml();
      document2.cssSelector();
      document1.getElementsByAttribute("<html>\n <head></head>\n <body></body>\n</html>");
      Tag tag0 = Tag.valueOf("p.0");
      FormElement formElement0 = new FormElement(tag0, "<html>\n <head></head>\n <body></body>\n</html>", (Attributes) null);
      formElement0.formData();
      document3.baseUri();
      document1.cssSelector();
      document3.toString();
      DataNode dataNode0 = DataNode.createFromEncoded("org.", "EndTagOpen");
      dataNode0.setWholeData("");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("R$j6|unz+a+3GY3.");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      document0.children();
      document0.getElementsByIndexLessThan((-471));
      node0.removeAttr("HTTP error fetching URL");
      node0.nodeName();
      // Undeclared exception!
      try { 
        document0.addChildren((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("EJP[#29|OKgroraj~t7");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Document document3 = (Document)document2.prependChild(document1);
      document3.parent();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      TextNode textNode1 = new TextNode("", "");
      StringBuffer stringBuffer0 = new StringBuffer("%h2m");
      textNode1.html(stringBuffer0);
      textNode0.outerHtml();
      DataNode dataNode0 = new DataNode("");
      // Undeclared exception!
      try { 
        textNode0.after((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      textNode0.clearAttributes();
      // Undeclared exception!
      try { 
        textNode0.after(":roo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      String string0 = "";
      CDataNode cDataNode0 = new CDataNode("");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 61;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      stringBuffer0.insert(0, (Object) "");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.extended;
      document_OutputSettings4.escapeMode(entities_EscapeMode1);
      // Undeclared exception!
      try { 
        cDataNode0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextNode.stripLeadingWhitespace("<z 8M%7n^mT");
      Document document0 = new Document("<z 8M%7n^mT");
      document0.shallowClone();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("<z 8M%7n^mT", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("abs:");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "<z 8M%7n^mT", attributes0);
      formElement0.addElement(document0);
      document0.toString();
      CDataNode cDataNode1 = new CDataNode("<z 8M%7n^mT");
      int int0 = (-372);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("R$j6|unz+a+3GY3.");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        node0.childNode((-1218));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextNode textNode0 = new TextNode("lPT)H!Z?]G(vG:", "lPT)H!Z?]G(vG:");
      Node node0 = textNode0.shallowClone();
      textNode0.previousSibling();
      String string0 = "f0[a";
      textNode0.text("f0[a");
      String string1 = "oYp";
      Document document0 = Document.createShell("oYp");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      String string2 = "Header name must not be empty";
      document2.toString();
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = node0;
      nodeArray0[1] = null;
      nodeArray0[2] = node0;
      nodeArray0[3] = node0;
      nodeArray0[4] = node0;
      nodeArray0[5] = (Node) document0;
      Element element0 = document1.prependElement("<htm");
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = null;
      nodeArray0[8] = null;
      // Undeclared exception!
      try { 
        document2.addChildren((-918), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("Ba");
      document0.tag();
      document0.attr("");
      Tag.valueOf("B/mTv8z3iB%Yr4e");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null, parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.normalise();
      Document.createShell("");
      Document document2 = new Document("");
      document2.attributes();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextNode.stripLeadingWhitespace("<z 8M%7n^mT");
      Document.createShell("<z 8M%7n^mT");
      Element element0 = new Element("<z 8M%7n^mT");
      element0.shallowClone();
      CDataNode cDataNode0 = new CDataNode("<z 8M%7n^mT");
      int int0 = (-372);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.siblingIndex = 732;
      String string1 = "abs:f0[aA {6?&#";
      Element element0 = document0.appendElement("abs:f0[aA {6?&#");
      document0.tagName("abs:f0[aA {6?&#");
      element0.before("-");
      document0.shallowClone();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "abs:f0[aA {6?&#");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      stringBuilder1.append("-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-1799), 1808);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1799
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("6pm4");
      document0.body();
      Element element0 = document0.appendElement("6pm4");
      element0.after((Node) document0);
      String string0 = "[ku";
      CDataNode cDataNode0 = new CDataNode("[ku");
      // Undeclared exception!
      try { 
        cDataNode0.splitText((-85338573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("PuAs2/TK");
      document0.getElementsByAttributeValueContaining("PuAs2/TK", "PuAs2/TK");
      Document document1 = document0.clone();
      document1.html("PuAs2/TK");
      Document document2 = Document.createShell("m3c");
      document2.text();
      document0.classNames();
      document1.updateMetaCharsetElement(true);
      document1.setParentNode(document0);
      Node node0 = document1.parent();
      // Undeclared exception!
      try { 
        node0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("zj,WX2[,Yq8L)._", "_IDL/BY?", "&?r[JI(g,7CjshX)", "9,", "zj,WX2[,Yq8L)._");
      documentType0.attributes();
      Document document0 = Document.createShell("_zh;95E0_r ");
      document0.ownerDocument();
      Document document1 = document0.clone();
      documentType0.value = (Object) document1;
      // Undeclared exception!
      try { 
        documentType0.after("&X9)8YK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.attr("", "");
      Node[] nodeArray0 = new Node[3];
      DocumentType documentType0 = new DocumentType("", "3h:e", "3h:e", "InCaption", "abs:6e.>");
      nodeArray0[0] = (Node) documentType0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      document1.absUrl("abs:");
      Document document3 = document2.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document4 = document3.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document4.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("R$j6|unz+a+3GY3.");
      String string0 = "XO";
      // Undeclared exception!
      try { 
        document0.addChildren((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node";
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document0.replaceChild((Node) null, document1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Document document3 = document2.normalise();
      String string0 = "";
      Element element0 = document3.prepend("");
      int int0 = 0;
      document2.child(0);
      element0.siblingElements();
      document1.childNodeSize();
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded("", (String) null);
      // Undeclared exception!
      try { 
        textNode0.splitText(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("R?C2|TX");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.clone();
      Document document4 = document3.normalise();
      document4.title("R?C2|TX");
      Document document5 = (Document)document4.empty();
      document1.reparentChild(document4);
      String string0 = ").=jn";
      String string1 = "U&v$";
      document5.attr(").=jn", "U&v$");
      document2.nodeName();
      Document.createShell("#document");
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-3265));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextNode textNode0 = new TextNode("del");
      DataNode dataNode0 = new DataNode((String) null);
      textNode0.doClone(dataNode0);
      TextNode.createFromEncoded("del");
      textNode0.attr("del");
      DataNode dataNode1 = new DataNode("del");
      dataNode1.setWholeData(" gc=y");
      int int0 = 828;
      StringBuilder stringBuilder0 = new StringBuilder(828);
      int int1 = (-790);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-790), (float) (-790));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -790
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = null;
      Comment comment0 = new Comment((String) null, (String) null);
      comment0.siblingNodes();
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("QQ,[=:bC>");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = (Document)document1.tagName("QQ,[=:bC>");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      document2.tagName("QQ,[=:bC>");
      document2.ensureChildNodes();
      String string0 = "/g5Q@(u*V:Sh[qO3Q}A";
      document2.removeAttr("/g5Q@(u*V:Sh[qO3Q}A");
      StringBuilder stringBuilder0 = new StringBuilder("QQ,[=:bC>");
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "/g5Q@(u*V:Sh[qO3Q}A", 8205, 8205);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 8205, end 8205, s.length() 19
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Element element0 = document2.append(";80f=3U3MTwQ=j");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator$IsNthChild", "");
      Document document1 = (Document)document0.prepend("#i5+L7oQYO,");
      Document document2 = (Document)document1.html("#i5+L7oQYO,");
      document1.ensureChildNodes();
      document2.toString();
      document1.childNodesCopy();
      document1.getElementsByIndexLessThan(0);
      document0.removeAttr("");
      document2.getElementsByClass("#i5+L7oQYO,");
      document1.tag();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextNode textNode0 = new TextNode("B]CZj1)=[A}V*");
      StringBuffer stringBuffer0 = new StringBuffer(690);
      textNode0.outerHtml((Appendable) stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Node$1", "", "org.jsoup.nodes.Node$1", "", "=a!v -Z");
      DocumentType documentType1 = (DocumentType)documentType0.clone();
      documentType1.getOutputSettings();
      Document document0 = new Document("PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      documentType0.setPubSysKey("=a!v -Z");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      documentType0.filter(nodeFilter0);
      document1.normalise();
      StringBuilder stringBuilder0 = new StringBuilder("SYSTEM");
      stringBuilder0.append((-1272L));
      // Undeclared exception!
      try { 
        stringBuilder0.delete(128, 128);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("[\"wd+A;U");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      linkedHashSet0.add("[\"wd+A;U");
      document0.tag();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      document_OutputSettings1.clone();
      charset0.aliases();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document2 = document1.outputSettings(document_OutputSettings3);
      Node node0 = document2.clone();
      document2.body();
      Node node1 = node0.attr("9", "");
      document2.cssSelector();
      node1.hasParent();
      CDataNode cDataNode0 = new CDataNode("");
      int int0 = 10;
      StringBuilder stringBuilder0 = new StringBuilder(10);
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(10, (CharSequence) "9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = (Document)document0.append("8r");
      document1.attr("kse'c!T8kj@Jnk;", "");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "*ot(MovSI.|z\\u(";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(string0, "basefont", false);
      List<Node> list0 = xmlDeclaration0.childNodesCopy();
      xmlDeclaration0.setSiblingIndex(1649);
      xmlDeclaration0.getWholeDeclaration();
      xmlDeclaration0.toString();
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(377);
      Document document3 = document2.outputSettings(document_OutputSettings1);
      Element element0 = document3.addClass("");
      // Undeclared exception!
      try { 
        element0.insertChildren(1649, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("=?rlV*fQAN3aC|R");
      Element element0 = document0.appendText("=?rlV*fQAN3aC|R");
      element0.childNodes();
      element0.text();
      document0.empty();
      element0.getElementsContainingOwnText("=?rlV*fQAN3aC|R");
      document0.text();
      document0.getElementsByAttributeValueNot("org.jsoup.nodes.Node$1", "@0H2*Ze('");
      document0.nodeName();
      document0.parentNode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("~(_QDn?#6U?Fv>DzF7");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.childNodesCopy();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("w#NeXGBa|e=geJFkk}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.clone();
      Document document3 = document2.normalise();
      document1.data();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document3.classNames(set0);
      document3.hasAttr("w#NeXGBa|e=geJFkk}");
      document_OutputSettings0.prettyPrint(true);
      Element element0 = document3.tagName("w#NeXGBa|e=geJFkk}");
      element0.getElementsContainingOwnText("");
      element0.html();
      // Undeclared exception!
      try { 
        document0.replaceWith(document3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      // Undeclared exception!
      try { 
        xmlDeclaration0.childNode(2499);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2499
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "<#NBU\\-U,";
      Document document0 = new Document("<#NBU-U,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(31);
      document0.getElementsByAttributeValueMatching("<#NBU-U,", "<#NBU-U,");
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document1.classNames(set0);
      document0.prependChild(document1);
      document1.children();
      document1.previousSibling();
      document0.prependText("L!/DpI!y0VaU$39");
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("l>xKpx6UQ]YTaV", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("l>xKpx6UQ]YTaV");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.toString();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "l>xKpx6UQ]YTaV", attributes1);
      formElement0.formData();
      Pattern pattern0 = Pattern.compile("l>xKpx6UQ]YTaV", 0);
      formElement0.getElementsByAttributeValueMatching("l>xKpx6UQ]YTaV", pattern0);
      formElement0.attributes();
      DataNode dataNode0 = DataNode.createFromEncoded("l>xKpx6UQ]YTaV", " #cdata=\"l>xKpx6UQ]YTaV\"");
      DataNode dataNode1 = dataNode0.setWholeData(" #cdata=\"l>xKpx6UQ]YTaV\"");
      dataNode1.setWholeData("l>xKpx6UQ]YTaV");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("etMr1F?en)^", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("etMr1F?en)^", false);
      Attributes attributes2 = attributes1.put("g8<,J9Zm-pHq{_W|H", "#%s");
      Attributes attributes3 = attributes2.clone();
      FormElement formElement0 = new FormElement(tag0, "K]y,r_t4", attributes3);
      formElement0.siblingIndex();
      formElement0.addClass("*o_@~0]`npu");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Locale locale0 = Locale.ROOT;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        document1.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "L=(";
      Document document0 = Document.createShell("L=(");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      int int0 = 1187;
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[0].hasAttr(":root");
      Element element0 = document2.text("rP'aO");
      nodeArray0[3] = (Node) element0;
      // Undeclared exception!
      try { 
        document2.insertChildren(1187, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.normalise();
      // Undeclared exception!
      try { 
        document3.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "inert", "inert", "", "inert");
      documentType0.shallowClone();
      documentType0.toString();
      documentType0.setPubSysKey("");
      Document document0 = new Document("");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Document document3 = (Document)document2.prepend("");
      document3.doSetBaseUri("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("zj,WX2[,Yq8L)._", "_IDL/BY?", "&?r[JI(g,7CjshX)", "9=m,{", "zj,WX2[,Yq8L)._");
      documentType0.attributes();
      // Undeclared exception!
      try { 
        documentType0.after("&X9)8YK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      int int0 = 262;
      Node[] nodeArray0 = new Node[2];
      document2.clearAttributes();
      nodeArray0[0] = (Node) document2;
      Pattern pattern0 = Pattern.compile("");
      document1.getElementsMatchingOwnText(pattern0);
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document2.insertChildren(262, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("svg");
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(10);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = new Document("pdvEb");
      Tag tag0 = document0.tag();
      Tag.valueOf("org.jsoup.nodes.Node$OuterHtmlVisitor");
      CDataNode cDataNode0 = new CDataNode("pdvEb");
      TextNode.createFromEncoded("pdvEb", "pdvEb");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "CfO({f$s'", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("abs:");
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      Document document1 = document0.normalise();
      Element element0 = document1.createElement("#doctype");
      // Undeclared exception!
      try { 
        textNode0.removeChild(element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("OT[#~");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = (Document)document1.html("?gA}qg15\"Q");
      document2.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      int int0 = 0;
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      document3.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document document4 = document3.outputSettings(document_OutputSettings2);
      List<Node> list0 = document1.childNodes;
      document0.childNodes = list0;
      Element element0 = document4.prependChild(document2);
      document_OutputSettings2.prepareEncoder();
      // Undeclared exception!
      try { 
        element0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.shallowClone();
      StringBuffer stringBuffer0 = new StringBuffer();
      element0.html(stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DocumentType documentType0 = new DocumentType((String) null, (String) null, "]B);g)yatz", "]B);g)yatz", "1R3j");
      documentType0.childNodesAsArray();
      documentType0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "3[";
      Document document0 = new Document("3[");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      Document document3 = document2.clone();
      NodeFilter nodeFilter0 = null;
      document1.childNodes();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document2;
      Node[] nodeArray1 = new Node[9];
      nodeArray1[0] = (Node) document0;
      Element element0 = document2.empty();
      nodeArray1[1] = (Node) element0;
      nodeArray1[2] = (Node) document0;
      nodeArray1[3] = (Node) document2;
      nodeArray1[4] = (Node) document3;
      nodeArray1[5] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("3[");
      nodeArray1[6] = (Node) cDataNode0;
      nodeArray1[7] = (Node) document1;
      nodeArray1[8] = (Node) document2;
      // Undeclared exception!
      try { 
        nodeArray0[0].addChildren(0, nodeArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("uF['U");
      CDataNode cDataNode0 = new CDataNode("uF['U");
      cDataNode0.hasSameValue("uF['U");
      TextNode textNode0 = cDataNode0.text("N_<r<Oj'+");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "YE0V[7$";
      Document document0 = Document.createShell("YE0V[7$");
      DataNode dataNode0 = new DataNode("YE0V[7$");
      DataNode dataNode1 = dataNode0.setWholeData("YE0V[7$");
      dataNode1.childNodes();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      dataNode1.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&";
      Document document0 = new Document("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.textNodes();
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node";
      String string1 = "frameset";
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Node", "frameset", "figure");
      documentType0.setBaseUri("figure");
      Node node0 = null;
      int int0 = 32;
      Node[] nodeArray0 = null;
      // Undeclared exception!
      try { 
        documentType0.addChildren(32, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      // Undeclared exception!
      try { 
        textNode0.after("org.jsoup.nodes.Node$OuterHtmlVisitor");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexEquals");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Element element0 = document2.body();
      element0.unwrap();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Node");
      Attributes attributes0 = null;
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("org.jsoup.nodes.Node", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Node", (Attributes) null);
      Document document0 = Document.createShell("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        document0.replaceWith(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nextSibling();
      Appendable appendable0 = null;
      int int0 = 10;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-2914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = new Document("cV?hb!J,0L^uv;mr");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.appendTo(document0);
      element0.nextSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "abs:";
      TextNode textNode0 = new TextNode("abs:");
      Document document0 = Document.createShell("abs:");
      document0.head();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      // Undeclared exception!
      try { 
        textNode0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("abs:");
      document0.getElementsByIndexGreaterThan(25);
      document0.textNodes();
      document0.nodelistChanged();
      Tag tag0 = document0.tag();
      Element element0 = new Element(tag0, "");
      tag0.getName();
      Tag.valueOf("abs:");
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "4b[fQ%Du;M3mQ";
      TextNode textNode0 = new TextNode("cNU0WBQk", "4b[fQ%Du;M3mQ");
      textNode0.childNodes();
      TextNode.stripLeadingWhitespace("4b[fQ%Du;M3mQ");
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.wrap("cNU0WBQk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "aXHcX T{D9FZqRq9@";
      Tag tag0 = Tag.valueOf("aXHcX T{D9FZqRq9@");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf(")M1qc)lG|+0", parseSettings0);
      Attributes attributes1 = attributes0.put("aXHcX T{D9FZqRq9@", "aXHcX T{D9FZqRq9@");
      tag0.getName();
      Attributes attributes2 = attributes1.put("aXHcX T{D9FZqRq9@", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "aXHcX T{D9FZqRq9@", attributes2);
      attributes2.dataset();
      Tag.valueOf("aXHcX T{D9FZqRq9@", parseSettings0);
      pseudoTextElement0.shallowClone();
      pseudoTextElement0.hasParent();
      // Undeclared exception!
      try { 
        pseudoTextElement0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("`#M&{az!w");
      Element element0 = document0.addClass("`#M&{az!w");
      element0.getElementsContainingText("`#M&{az!w");
      element0.absUrl("`#M&{az!w");
      document0.body();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("-k3Ue[lE&UNk?0C");
      document0.dataNodes();
      document0.hasClass("sub");
      document0.html("sub");
      document0.absUrl("sub");
      document0.head();
      document0.wholeText();
      document0.outerHtml();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Array must not contain any null objects", "-k3Ue[lE&UNk?0C", true);
      xmlDeclaration0.attributes();
      xmlDeclaration0.value = (Object) "sub";
      xmlDeclaration0.getWholeDeclaration();
      TextNode textNode0 = new TextNode("");
      StringBuilder stringBuilder0 = new StringBuilder(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("Mh;*KB6+K.0~)]6=~;", "Mh;*KB6+K.0~)]6=~;", "");
      documentType0.nodeName();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.clone();
      Element element0 = document2.text("");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextNode textNode0 = new TextNode("");
      // Undeclared exception!
      try { 
        textNode0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$AttributeWithValueStarting";
      TextNode textNode0 = new TextNode("org.jsoup.select.Evaluator$AttributeWithValueStarting");
      // Undeclared exception!
      try { 
        textNode0.before("org.jsoup.select.Evaluator$AttributeWithValueStarting");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("TNes\"BZ%]_s:K(gH4L");
      document0.getOutputSettings();
      // Undeclared exception!
      try { 
        document0.before("TNes\"BZ%]_s:K(gH4L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comment comment0 = new Comment("abs:pubSysKey");
      DocumentType documentType0 = new DocumentType("abs:pubSysKey", "<html>\n <head></head>\n <body></body>\n</html>;80f=3U3MTwQ=j", "<html>\n <head></head>\n <body></body>\n</html>;80f=3U3MTwQ=j", "<html>\n <head></head>\n <body></body>\n</html>;80f=3U3MTwQ=j", "TKza&");
      comment0.reparentChild(documentType0);
      comment0.nextSibling();
      // Undeclared exception!
      try { 
        documentType0.unwrap();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "+CxqG~>\\ar";
      TextNode textNode0 = TextNode.createFromEncoded("+CxqG~>ar");
      Comment comment0 = new Comment("+CxqG~>ar");
      comment0.setBaseUri("+CxqG~>ar");
      // Undeclared exception!
      try { 
        textNode0.before((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = null;
      Document document0 = null;
      try {
        document0 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.selec.Evaluator$IndeEquls");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Element element0 = document2.body();
      element0.unwrap();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "abs:pubSysKey";
      Document document0 = Document.createShell("abs:pubSysKey");
      String string1 = "abs:";
      String string2 = "meta";
      document0.getElementsByAttributeValueEnding("abs:", "meta");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
      // Undeclared exception!
      element0.wrap("=tX5'6\"c/-gUjdS");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("vy");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      document0.siblingIndex = 732;
      String string1 = "abs:f0[aA {6?&#";
      Element element0 = document0.appendElement("abs:f0[aA {6?&#");
      document0.tagName("abs:f0[aA {6?&#");
      String string2 = "-";
      element0.before("-");
      document0.shallowClone();
      StringBuilder stringBuilder0 = new StringBuilder("abs:f0[aA {6?&#");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      stringBuilder1.append(false);
      stringBuilder1.append("-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        stringBuilder1.delete((-1799), 1808);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1799
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("f0[a", "f0[a", "f0[a", "EkGR1{q-hE`");
      documentType0.attributes();
      documentType0.hasSameValue("EkGR1{q-hE`");
      Document document0 = Document.createShell("EkGR1{q-hE`");
      // Undeclared exception!
      try { 
        document0.after((Node) documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("#text");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Document document3 = document2.outputSettings(document_OutputSettings2);
      Element element0 = document3.body();
      element0.absUrl("encoding");
      document3.hasParent();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "abs:3h:ey%'.<[8^xk";
      Document document0 = new Document("abs:3h:ey%'.<[8^xk");
      Attributes attributes0 = document0.attributes();
      Document document1 = document0.normalise();
      Attributes attributes1 = new Attributes();
      attributes0.addAll(attributes1);
      document0.html(")MkU#{1#zW");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag.valueOf("body", parseSettings0);
      attributes0.dataset();
      TextNode.normaliseWhitespace("body");
      Element element0 = document1.toggleClass("[AB3VW");
      StringBuffer stringBuffer0 = new StringBuffer(")MkU#{1#zW");
      element0.hasSameValue(stringBuffer0);
      document1.elementSiblingIndex();
      // Undeclared exception!
      try { 
        element0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextNode.normaliseWhitespace("<z 8M%7n^mT");
      Document document0 = Document.createShell("<z 8M%7n^mT");
      // Undeclared exception!
      try { 
        document0.wrap("<z 8M%7n^mT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = ":(q`0F:^]jm~=}";
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.text("");
      document0.html();
      element0.getElementsContainingOwnText("\"ID]I1awbnxk%&[~R;");
      String string0 = ":(q`0F:^]jm~=}";
      Element element1 = element0.val(":(q`0F:^]jm~=}");
      element1.getElementsByClass("<html>\n <head></head>\n <body>\n </body>\n</html>");
      element0.parentNode();
      document0.childNodesCopy();
      // Undeclared exception!
      try { 
        element1.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("R$j6|unz+a+3GY3.");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      document0.getElementsByIndexLessThan((-483));
      node0.removeAttr("HTTP error fetching URL");
      // Undeclared exception!
      try { 
        document0.addChildren((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("R$j6|unz+a+3GY3.");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        node0.replaceWith(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.data();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      document1.html(stringBuffer0);
      document3.outerHtml();
      document2.cssSelector();
      document1.getElementsByAttribute("<html>\n <head></head>\n <body></body>\n</html>");
      Tag.valueOf("p.0");
      Attributes attributes0 = null;
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      // Undeclared exception!
      try { 
        Tag.valueOf("", parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.data();
      Document document3 = new Document("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      document1.html(stringBuffer0);
      document3.outerHtml();
      document2.cssSelector();
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode("");
      Document document0 = Document.createShell("|D");
      Document document1 = document0.clone();
      Element element0 = document1.prependText("|D");
      textNode0.parentNode = (Node) element0;
      Node node0 = textNode0.after("org.jsoup.nodes.Node$OuterHtmlVisitor");
      DataNode dataNode0 = new DataNode("");
      textNode0.after((Node) dataNode0);
      node0.shallowClone();
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextNode textNode0 = new TextNode("hl", "hl");
      TextNode textNode1 = new TextNode("hl");
      StringBuffer stringBuffer0 = new StringBuffer("%h2m");
      textNode1.html(stringBuffer0);
      textNode0.outerHtml();
      DataNode dataNode0 = new DataNode("-");
      // Undeclared exception!
      try { 
        textNode0.after((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = document0.normalise();
      Element element0 = document1.append(";80f=3U3MTwQ=j");
      Document document2 = document0.clone();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document1;
      Element element1 = document2.addClass("");
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) document0;
      nodeArray0[5].hasSameValue(nodeArray0[1]);
      nodeArray0[3] = (Node) document0;
      element1.siblingNodes();
      nodeArray0[7] = (Node) element0;
      nodeArray0[0].baseUri();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
