/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:39:36 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.MissingFormatArgumentException;
import java.util.Stack;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("mark");
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("mark", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = Selector.selectFirst("org.jsoup.select.Selector", element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("mark", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element element0 = new Element("mr");
      assertEquals(0, element0.childNodeSize());
      assertEquals("mr", element0.nodeName());
      assertEquals("mr", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.appendElement("mr");
      assertEquals("mr", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mr", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("mr", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals("mr", element1.tagName());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = Selector.selectFirst("mr", element1);
      assertEquals("mr", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mr", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("mr", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals("mr", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("mr", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("mr", element2.tagName());
      assertNotNull(element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Element element0 = new Element("mark");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("mark", element0.nodeName());
      assertEquals("mark", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = Selector.selectFirst("mark", element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("mark", element0.nodeName());
      assertEquals("mark", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("mark", element1.nodeName());
      assertEquals("mark", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("mark");
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mark", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("mark", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("mark");
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mark", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("mark", element0.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("mark", element1.tagName());
      assertEquals("mark", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = Selector.selectFirst("mark", element0);
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mark", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("mark", element0.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals("mark", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("mark", element2.nodeName());
      assertNotNull(element2);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("ruby");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ruby", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ruby", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = Selector.select("ruby", (Element) document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ruby", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ruby", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-2602)).when(element0).childNodeSize();
      doReturn("*").when(element0).toString();
      doReturn(node0).when(element0).nextSibling();
      Element element1 = Selector.selectFirst("*", element0);
      assertFalse(element1.hasParent());
      assertEquals((-2602), element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNull(element1.nodeName());
      assertFalse(element1.isBlock());
      assertNull(element1.baseUri());
      assertNull(element1.tagName());
      assertNotNull(element1);
      assertSame(element1, element0);
      
      Elements elements0 = Selector.select(evaluator0, element1);
      assertFalse(element1.hasParent());
      assertEquals((-2602), element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNull(element1.nodeName());
      assertFalse(element1.isBlock());
      assertNull(element1.baseUri());
      assertNull(element1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(element1, element0);
      
      Elements elements1 = Selector.select("K", (Iterable<Element>) elements0);
      assertFalse(element1.hasParent());
      assertEquals((-2602), element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNull(element1.nodeName());
      assertFalse(element1.isBlock());
      assertNull(element1.baseUri());
      assertNull(element1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertSame(element1, element0);
      assertNotSame(elements0, elements1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("f[o`(-_e%");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("f[o`(-_e%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("f[o`(-_e%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        Selector.selectFirst("f[o`(-_e%", document0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.selectFirst("*u,905.[%s", (Element) null);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element0).tagName();
      // Undeclared exception!
      try { 
        Selector.selectFirst("org.jsoup.select.Selector", element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Selector.selectFirst("", element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("*").when(element0).toString();
      doReturn((Node) null).when(element0).nextSibling();
      doReturn((Node) null).when(element0).parentNode();
      Element element1 = Selector.selectFirst("*", element0);
      assertNull(element1.baseUri());
      assertNull(element1.nodeName());
      assertFalse(element1.isBlock());
      assertNull(element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      assertSame(element1, element0);
      
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(1422).when(element2).childNodeSize();
      doReturn("template").when(element2).toString();
      doReturn(element1).when(element2).childNode(anyInt());
      Element element3 = Selector.selectFirst("*", element2);
      assertNull(element1.baseUri());
      assertNull(element1.nodeName());
      assertFalse(element1.isBlock());
      assertNull(element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertFalse(element3.hasParent());
      assertNull(element3.baseUri());
      assertNull(element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals(1422, element3.childNodeSize());
      assertNull(element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertNotNull(element3);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element3);
      assertSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      
      // Undeclared exception!
      try { 
        Selector.select(evaluator0, element3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Selector.select(evaluator0, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select(">4`Fx<E6U%t[dI?X", (Element) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'dI?X'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("rark");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("rark", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("rark", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("rark", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("rark", element0.tagName());
      assertEquals("rark", element1.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("rark", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      Selector.select("rark", element1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element0).tagName();
      doReturn("org.jsoup.select.Selector").when(element0).toString();
      Element element1 = Selector.selectFirst("*", element0);
      assertFalse(element1.isBlock());
      assertNull(element1.tagName());
      assertNull(element1.nodeName());
      assertNull(element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        Selector.select("org.jsoup.select.Selector", element1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select("", (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn("O", (String) null).when(element0).tagName();
      doReturn((String) null).when(element0).toString();
      Element element1 = Selector.selectFirst("O", element0);
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertNull(element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertNull(element1.nodeName());
      assertFalse(element1.isBlock());
      assertNull(element1.baseUri());
      assertNotNull(element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        Selector.selectFirst("O", element1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<Element> stack0 = new Stack<Element>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<Element> arrayList0 = new ArrayList<Element>(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        Selector.select("f[o`(-_e%", (Iterable<Element>) arrayList0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("org.jsoup.select.Evaluator$IsLastChild").when(element0).toString();
      doReturn((Node) null).when(element0).nextSibling();
      doReturn((Node) null).when(element0).parentNode();
      Element element1 = Selector.selectFirst("*", element0);
      assertNull(element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertNull(element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertNull(element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element1, element0);
      
      Element element2 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0, 2971).when(element2).childNodeSize();
      doReturn("org.jsoup.select.Evaluator$IsLastChild").when(element2).toString();
      doReturn(element1).when(element2).childNode(anyInt());
      doReturn((Node) null).when(element2).nextSibling();
      doReturn((String) null, (String) null).when(element2).outerHtml();
      Element element3 = Selector.selectFirst("*", element2);
      assertNull(element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertNull(element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertNull(element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2971, element3.childNodeSize());
      assertNull(element3.baseUri());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertNull(element3.tagName());
      assertNull(element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertNotNull(element3);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      
      Elements elements0 = Selector.select("*", element3);
      // Undeclared exception!
      try { 
        Selector.select("*", (Iterable<Element>) elements0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.select("'p", (Iterable<Element>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        Selector.filterOut((Collection<Element>) null, (Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Selector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(evaluator0).matches(any(org.jsoup.nodes.Element.class) , any(org.jsoup.nodes.Element.class));
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1383)).when(element0).childNodeSize();
      doReturn("O").when(element0).tagName();
      doReturn("O").when(element0).toString();
      doReturn(node0).when(element0).nextSibling();
      doReturn("").when(element0).outerHtml();
      Element element1 = Selector.selectFirst("O", element0);
      assertNull(element1.baseUri());
      assertEquals("O", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals((-1383), element1.childNodeSize());
      assertNull(element1.nodeName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      assertSame(element1, element0);
      
      Elements elements0 = Selector.select(evaluator0, element1);
      assertNull(element1.baseUri());
      assertEquals("O", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals((-1383), element1.childNodeSize());
      assertNull(element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("mark");
      Elements elements0 = Selector.select("mark", element0);
      Elements elements1 = Selector.filterOut(elements0, elements0);
      Selector.filterOut(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(element0).childNodeSize();
      doReturn("").when(element0).toString();
      doReturn((Node) null, (Node) null).when(element0).nextSibling();
      doReturn((String) null, (String) null, (String) null, (String) null).when(element0).outerHtml();
      Element element1 = Selector.selectFirst("*", element0);
      Elements elements0 = Selector.select("*", element1);
      Elements elements1 = Selector.select("*", (Iterable<Element>) elements0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn("").when(element0).toString();
      Element element1 = Selector.selectFirst("*", element0);
      // Undeclared exception!
      try { 
        Selector.selectFirst("org.jsoup.select.Selector$SelectorParseException", element1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Selector$SelectorParseException': unexpected token at '$SelectorParseException'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
