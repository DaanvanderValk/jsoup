/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:36:04 GMT 2018
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeTraversor_ESTest extends NodeTraversor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      String string0 = ")X+6Z";
      Element element0 = new Element(")X+6Z");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")X+6Z", element0.tagName());
      assertEquals(")X+6Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.toggleClass("org.jsoup.select.NodeTraversor");
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")X+6Z", element0.tagName());
      assertEquals(")X+6Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(")X+6Z", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(")X+6Z", element1.nodeName());
      assertFalse(element1.hasParent());
      
      Element element2 = element0.appendText("]]>");
      assertNotNull(element2);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")X+6Z", element0.tagName());
      assertEquals(")X+6Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(")X+6Z", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(")X+6Z", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      
      Elements elements0 = element2.getElementsContainingOwnText("]]>");
      assertNotNull(elements0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")X+6Z", element0.tagName());
      assertEquals(")X+6Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(")X+6Z", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(")X+6Z", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element3 = element2.tagName("org.jsoup.select.NodeTraversor");
      assertNotNull(element3);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element2.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element3.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element3.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element3.tagName());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      
      NodeTraversor.traverse(nodeVisitor0, (Node) element0);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element4 = element0.attr(")X+6Z", true);
      assertNotNull(element4);
      assertSame(element0, element1);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element4, element3);
      assertSame(element4, element1);
      assertSame(element4, element0);
      assertSame(element4, element2);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element4.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element4.tagName());
      assertEquals(1, element4.childNodeSize());
      assertFalse(element4.hasParent());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertEquals("", element4.baseUri());
      
      NodeTraversor.traverse(nodeVisitor1, (Node) element2);
      assertSame(element0, element1);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element4);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element2.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor2);
      assertNotNull(nodeTraversor0);
      
      NodeVisitor nodeVisitor3 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor3, elements0);
      assertSame(element0, element1);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element4);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element2.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element5 = element2.prependChild(element1);
      assertNotNull(element5);
      assertSame(element0, element1);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertSame(element5, element4);
      assertSame(element5, element1);
      assertSame(element5, element3);
      assertSame(element5, element0);
      assertSame(element5, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element5);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element4);
      assertSame(element2, element1);
      assertSame(element2, element5);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element5.childNodeSize());
      assertFalse(element5.isBlock());
      assertEquals("", element5.baseUri());
      assertEquals(0, element5.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", element5.tagName());
      assertTrue(element5.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", element5.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element1.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeTraversor.filter(nodeFilter0, (Node) element2);
      assertEquals(NodeFilter.FilterResult.REMOVE, nodeFilter_FilterResult3);
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertSame(element0, element1);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element4);
      assertSame(element2, element1);
      assertSame(element2, element5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element2.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, (NodeFilter.FilterResult) null).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter1, (Node) element2);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertSame(element0, element1);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element2, element4);
      assertSame(element2, element1);
      assertSame(element2, element5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", element2.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      
      NodeVisitor nodeVisitor4 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      element1.getElementsByAttributeStarting(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("ac{x3VZ.", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("!*xDL#%Mnw<>E`s?");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      TextNode textNode0 = cDataNode0.text("!*xDL#%Mnw<>E`s?");
      assertNotNull(textNode0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      FormElement formElement0 = new FormElement(tag0, "ac{x3VZ.", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      
      List<Node> list0 = cDataNode0.childNodes();
      assertNotNull(list0);
      assertSame(cDataNode0, textNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = formElement0.data();
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(cDataNode0, textNode0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(cDataNode0, textNode0);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3VZ.", document1.location());
      assertEquals("ac{x3VZ.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertSame(document0, document1);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertSame(document0, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult5 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult2, nodeFilter_FilterResult2, nodeFilter_FilterResult3, nodeFilter_FilterResult2).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult4, nodeFilter_FilterResult0).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult6 = NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult6);
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult5));
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertSame(document0, document1);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult5);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter2, (Node) textNode0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult1, nodeFilter_FilterResult2).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult3, nodeFilter_FilterResult4).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("ac{x3VZ.", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("ac{x3vz.", tag0.getName());
      
      CDataNode cDataNode0 = new CDataNode("!*xDL#%Mnw<>E`s?");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ac{x3VZ.", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("ac{x3VZ.", document1.location());
      assertEquals("ac{x3VZ.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      NodeFilter.FilterResult nodeFilter_FilterResult5 = NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult5);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult0));
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertSame(document0, document1);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertSame(document0, document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult5).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult6 = NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult6);
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult0));
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult6);
      assertSame(document0, document1);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult6);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      NodeFilter.FilterResult nodeFilter_FilterResult7 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult7, (NodeFilter.FilterResult) null).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter2).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter2, (Node) formElement0);
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult6));
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult4));
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult6);
      assertSame(nodeFilter_FilterResult7, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult7, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult2);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      NodeTraversor.traverse(nodeVisitor0, (Node) document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document1.appendChild(document0);
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      NodeTraversor.traverse(nodeVisitor1, (Node) document1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.STOP;
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      assertNotNull(document0);
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("ac{x3VZ.", parseSettings0);
      assertNotNull(tag0);
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      
      CDataNode cDataNode0 = new CDataNode("!*xDL#%FMnw<>E`s?");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ac{x3VZ.", attributes0);
      assertNotNull(formElement0);
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("ac{x3VZ.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      
      NodeFilter.FilterResult nodeFilter_FilterResult5 = NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult5);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult0));
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertSame(document0, document1);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult0);
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertSame(document0, document1);
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult5).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult6 = NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult6);
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult6.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult5));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult0));
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult6, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult6, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult6);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult6);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult6);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertSame(document0, document1);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult6);
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult4).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult7 = NodeTraversor.filter(nodeFilter2, (Node) formElement0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult7);
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult7.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertSame(nodeFilter_FilterResult7, nodeFilter_FilterResult5);
      assertSame(nodeFilter_FilterResult7, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult7, nodeFilter_FilterResult6);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult7, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult7, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult6);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult7);
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      CDataNode cDataNode0 = new CDataNode(":prev%s");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Node node0 = cDataNode0.parent();
      assertNull(node0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeTraversor.filter(nodeFilter0, (Node) null);
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
      
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Tag tag0 = Tag.valueOf("org.jsoup.select.NodeTraversor");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(":prev%s", "template");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.NodeTraversor", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertNotNull(iterator0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Elements elements0 = formElement0.elements();
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = elements0.add((Element) formElement0);
      assertTrue(boolean0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = elements0.parents();
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertNotSame(elements1, elements0);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      NodeTraversor.filter(nodeFilter1, elements0);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(elements0.equals((Object)elements1));
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor1);
      assertNotNull(nodeTraversor0);
      
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor2, (Node) cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      NodeVisitor nodeVisitor3 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor3, elements0);
      assertFalse(elements0.equals((Object)elements1));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertFalse(tag0.isData());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult2).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeTraversor.filter(nodeFilter2, (Node) cDataNode0);
      assertEquals(NodeFilter.FilterResult.REMOVE, nodeFilter_FilterResult3);
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("ac{x3VZ.", parseSettings0);
      assertNotNull(tag0);
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      CDataNode cDataNode0 = new CDataNode("!*xDL#%Mnw<>E`s?");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ac{x3VZ.", attributes0);
      assertNotNull(formElement0);
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ac{x3VZ.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ac{x3VZ.", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.baseUri());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter2, (Node) formElement0);
      assertEquals("ac{x3vz.", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("ac{x3vz.", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("ac{x3vz.", formElement0.nodeName());
      assertEquals("ac{x3vz.", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("ac{x3VZ.", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      TextNode textNode0 = TextNode.createFromEncoded("nth-of-type");
      assertNotNull(textNode0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Attributes attributes0 = textNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Node node0 = textNode0.previousSibling();
      assertNull(node0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      TextNode textNode1 = TextNode.createFromEncoded("nth-of-type");
      assertFalse(textNode1.equals((Object)textNode0));
      assertNotNull(textNode1);
      assertNotSame(textNode1, textNode0);
      assertFalse(textNode1.hasParent());
      assertEquals("#text", textNode1.nodeName());
      assertEquals(0, textNode1.siblingIndex());
      
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeTraversor.filter(nodeFilter0, (Node) textNode0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult1);
      assertFalse(textNode0.equals((Object)textNode1));
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(textNode0, textNode1);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      CDataNode cDataNode0 = new CDataNode("sZ.cC");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      NodeTraversor.traverse(nodeVisitor0, (Node) cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeTraversor.filter(nodeFilter1, (Elements) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      CDataNode cDataNode0 = new CDataNode(":prev%s");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Node node0 = cDataNode0.parent();
      assertNull(node0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeTraversor.filter(nodeFilter0, (Node) null);
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
      
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Tag tag0 = Tag.valueOf("org.jsoup.select.NodeTraversor");
      assertNotNull(tag0);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(":prev%s", "template");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.NodeTraversor", attributes1);
      assertNotNull(formElement0);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertNotNull(iterator0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Elements elements0 = formElement0.elements();
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = elements0.add((Element) formElement0);
      assertTrue(boolean0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = elements0.parents();
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertNotSame(elements1, elements0);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      NodeTraversor.filter(nodeFilter1, elements0);
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(elements0.equals((Object)elements1));
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor0, elements0);
      assertFalse(elements0.equals((Object)elements1));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor1);
      assertNotNull(nodeTraversor0);
      
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor2, (Node) cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      NodeVisitor nodeVisitor3 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor3, elements0);
      assertFalse(elements0.equals((Object)elements1));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements0, elements1);
      assertEquals("org.jsoup.select.NodeTraversor", tag0.toString());
      assertEquals("org.jsoup.select.NodeTraversor", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.nodeName());
      assertEquals("org.jsoup.select.NodeTraversor", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter2).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter2, (Node) cDataNode0);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      NodeTraversor.traverse(nodeVisitor0, (Node) document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult2).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeTraversor.filter(nodeFilter2, (Node) document0);
      assertEquals(NodeFilter.FilterResult.SKIP_ENTIRELY, nodeFilter_FilterResult3);
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertSame(document0, document1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter3 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult4).when(nodeFilter3).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult5 = NodeTraversor.filter(nodeFilter3, (Node) document0);
      assertEquals(NodeFilter.FilterResult.SKIP_ENTIRELY, nodeFilter_FilterResult5);
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult1));
      assertSame(document0, document1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      
      // Undeclared exception!
      try { 
        NodeTraversor.traverse((NodeVisitor) null, (Node) document1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      String string0 = ":gt(%d)";
      Comment comment0 = new Comment(":gt(%d)");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        NodeTraversor.traverse((NodeVisitor) null, (Node) comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByAttribute("Ww+Q  v-w<9bB-pX1&");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = elements0.removeClass((String) null);
      assertNotNull(elements1);
      assertSame(elements0, elements1);
      assertSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Elements elements2 = elements1.filter(nodeFilter0);
      assertNotNull(elements2);
      assertSame(elements0, elements1);
      assertSame(elements0, elements2);
      assertSame(elements1, elements2);
      assertSame(elements1, elements0);
      assertSame(elements2, elements1);
      assertSame(elements2, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Elements elements3 = elements2.eq(2160);
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotNull(elements3);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements2);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertSame(elements1, elements0);
      assertNotSame(elements2, elements3);
      assertSame(elements2, elements1);
      assertSame(elements2, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      
      Elements elements4 = elements3.eq(2160);
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements3));
      assertTrue(elements2.equals((Object)elements3));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements0));
      assertNotNull(elements4);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertNotSame(elements1, elements4);
      assertSame(elements1, elements0);
      assertNotSame(elements2, elements3);
      assertSame(elements2, elements1);
      assertNotSame(elements2, elements4);
      assertSame(elements2, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements4);
      assertNotSame(elements3, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      
      Elements elements5 = elements3.addClass("Ww+Q  v-w<9bB-pX1&");
      assertTrue(elements0.equals((Object)elements4));
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements4));
      assertTrue(elements2.equals((Object)elements3));
      assertTrue(elements2.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements0));
      assertNotNull(elements5);
      assertNotSame(elements0, elements5);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertNotSame(elements1, elements5);
      assertNotSame(elements1, elements4);
      assertSame(elements1, elements0);
      assertNotSame(elements2, elements3);
      assertSame(elements2, elements1);
      assertNotSame(elements2, elements4);
      assertSame(elements2, elements0);
      assertNotSame(elements2, elements5);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements4);
      assertSame(elements3, elements5);
      assertNotSame(elements3, elements0);
      assertNotSame(elements5, elements0);
      assertSame(elements5, elements3);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      
      Elements elements6 = elements5.clone();
      assertTrue(elements0.equals((Object)elements4));
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements0.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements4));
      assertTrue(elements2.equals((Object)elements5));
      assertTrue(elements2.equals((Object)elements3));
      assertTrue(elements2.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements2));
      assertTrue(elements6.equals((Object)elements1));
      assertTrue(elements6.equals((Object)elements5));
      assertTrue(elements6.equals((Object)elements3));
      assertTrue(elements6.equals((Object)elements4));
      assertNotNull(elements6);
      assertNotSame(elements0, elements6);
      assertNotSame(elements0, elements5);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertNotSame(elements1, elements6);
      assertNotSame(elements1, elements5);
      assertNotSame(elements1, elements4);
      assertSame(elements1, elements0);
      assertNotSame(elements2, elements3);
      assertSame(elements2, elements1);
      assertNotSame(elements2, elements4);
      assertSame(elements2, elements0);
      assertNotSame(elements2, elements6);
      assertNotSame(elements2, elements5);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements4);
      assertSame(elements3, elements5);
      assertNotSame(elements3, elements6);
      assertNotSame(elements3, elements0);
      assertNotSame(elements5, elements0);
      assertSame(elements5, elements3);
      assertNotSame(elements5, elements6);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements1);
      assertNotSame(elements6, elements1);
      assertNotSame(elements6, elements3);
      assertNotSame(elements6, elements4);
      assertNotSame(elements6, elements2);
      assertNotSame(elements6, elements0);
      assertNotSame(elements6, elements5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertEquals(0, elements6.size());
      assertTrue(elements6.isEmpty());
      
      NodeTraversor.filter(nodeFilter0, elements6);
      assertTrue(elements0.equals((Object)elements4));
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements0.equals((Object)elements6));
      assertTrue(elements0.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements4));
      assertTrue(elements1.equals((Object)elements6));
      assertTrue(elements2.equals((Object)elements6));
      assertTrue(elements2.equals((Object)elements5));
      assertTrue(elements2.equals((Object)elements3));
      assertTrue(elements2.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements6));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements6));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements2));
      assertTrue(elements6.equals((Object)elements1));
      assertTrue(elements6.equals((Object)elements5));
      assertTrue(elements6.equals((Object)elements3));
      assertTrue(elements6.equals((Object)elements4));
      assertNotSame(elements0, elements6);
      assertNotSame(elements0, elements5);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertNotSame(elements1, elements6);
      assertNotSame(elements1, elements5);
      assertNotSame(elements1, elements4);
      assertSame(elements1, elements0);
      assertNotSame(elements2, elements3);
      assertSame(elements2, elements1);
      assertNotSame(elements2, elements4);
      assertSame(elements2, elements0);
      assertNotSame(elements2, elements6);
      assertNotSame(elements2, elements5);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements4);
      assertSame(elements3, elements5);
      assertNotSame(elements3, elements6);
      assertNotSame(elements3, elements0);
      assertNotSame(elements5, elements0);
      assertSame(elements5, elements3);
      assertNotSame(elements5, elements6);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements1);
      assertNotSame(elements6, elements1);
      assertNotSame(elements6, elements3);
      assertNotSame(elements6, elements4);
      assertNotSame(elements6, elements2);
      assertNotSame(elements6, elements0);
      assertNotSame(elements6, elements5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertEquals(0, elements6.size());
      assertTrue(elements6.isEmpty());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      Elements elements7 = elements1.val("");
      assertTrue(elements0.equals((Object)elements4));
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements0.equals((Object)elements6));
      assertTrue(elements0.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements4));
      assertTrue(elements1.equals((Object)elements6));
      assertTrue(elements7.equals((Object)elements6));
      assertTrue(elements7.equals((Object)elements5));
      assertTrue(elements7.equals((Object)elements4));
      assertTrue(elements7.equals((Object)elements3));
      assertNotNull(elements7);
      assertNotSame(elements0, elements6);
      assertNotSame(elements0, elements5);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements7);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertNotSame(elements1, elements6);
      assertNotSame(elements1, elements5);
      assertNotSame(elements1, elements4);
      assertSame(elements1, elements0);
      assertSame(elements1, elements7);
      assertNotSame(elements7, elements5);
      assertNotSame(elements7, elements6);
      assertNotSame(elements7, elements4);
      assertSame(elements7, elements0);
      assertNotSame(elements7, elements3);
      assertSame(elements7, elements1);
      assertSame(elements7, elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(0, elements7.size());
      assertTrue(elements7.isEmpty());
      
      nodeTraversor0.traverse((Node) document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor1, elements6);
      assertTrue(elements0.equals((Object)elements4));
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements0.equals((Object)elements6));
      assertTrue(elements0.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements5));
      assertTrue(elements1.equals((Object)elements3));
      assertTrue(elements1.equals((Object)elements4));
      assertTrue(elements1.equals((Object)elements6));
      assertTrue(elements2.equals((Object)elements6));
      assertTrue(elements2.equals((Object)elements5));
      assertTrue(elements2.equals((Object)elements3));
      assertTrue(elements2.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements6));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements4));
      assertTrue(elements3.equals((Object)elements7));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements6));
      assertTrue(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements7));
      assertTrue(elements6.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements2));
      assertTrue(elements6.equals((Object)elements1));
      assertTrue(elements6.equals((Object)elements5));
      assertTrue(elements6.equals((Object)elements3));
      assertTrue(elements6.equals((Object)elements7));
      assertTrue(elements6.equals((Object)elements4));
      assertNotSame(elements0, elements6);
      assertNotSame(elements0, elements5);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements7);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertNotSame(elements1, elements3);
      assertSame(elements1, elements2);
      assertNotSame(elements1, elements6);
      assertNotSame(elements1, elements5);
      assertNotSame(elements1, elements4);
      assertSame(elements1, elements0);
      assertSame(elements1, elements7);
      assertNotSame(elements2, elements3);
      assertSame(elements2, elements1);
      assertNotSame(elements2, elements4);
      assertSame(elements2, elements7);
      assertSame(elements2, elements0);
      assertNotSame(elements2, elements6);
      assertNotSame(elements2, elements5);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements4);
      assertSame(elements3, elements5);
      assertNotSame(elements3, elements6);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements7);
      assertNotSame(elements5, elements0);
      assertSame(elements5, elements3);
      assertNotSame(elements5, elements7);
      assertNotSame(elements5, elements6);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements1);
      assertNotSame(elements6, elements1);
      assertNotSame(elements6, elements3);
      assertNotSame(elements6, elements4);
      assertNotSame(elements6, elements7);
      assertNotSame(elements6, elements2);
      assertNotSame(elements6, elements0);
      assertNotSame(elements6, elements5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertEquals(0, elements6.size());
      assertTrue(elements6.isEmpty());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      NodeTraversor.filter(nodeFilter2, elements0);
      assertTrue(elements0.equals((Object)elements4));
      assertTrue(elements0.equals((Object)elements3));
      assertTrue(elements0.equals((Object)elements6));
      assertTrue(elements0.equals((Object)elements5));
      assertNotSame(elements0, elements6);
      assertNotSame(elements0, elements5);
      assertNotSame(elements0, elements3);
      assertSame(elements0, elements1);
      assertSame(elements0, elements7);
      assertSame(elements0, elements2);
      assertNotSame(elements0, elements4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      NodeFilter nodeFilter3 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter3).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      NodeTraversor.filter(nodeFilter3, (Node) element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = Document.createShell("");
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      
      NodeTraversor.traverse(nodeVisitor2, (Node) document1);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      CDataNode cDataNode0 = new CDataNode("|m'?_dx~Z_8?FvNM");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node node0 = cDataNode0.clone();
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      
      NodeTraversor.traverse(nodeVisitor0, node0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      
      Node node1 = cDataNode0.shallowClone();
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)cDataNode0));
      assertNotNull(node1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(cDataNode0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, node1.siblingIndex());
      assertEquals("#cdata", node1.nodeName());
      assertFalse(node1.hasParent());
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor1, (Node) cDataNode0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(cDataNode0.equals((Object)node1));
      assertNotSame(cDataNode0, node0);
      assertNotSame(cDataNode0, node1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements0 = new Elements(38);
      assertNotNull(elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node2 = cDataNode0.traverse(nodeVisitor2);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(cDataNode0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertNotSame(cDataNode0, node0);
      assertSame(cDataNode0, node2);
      assertNotSame(cDataNode0, node1);
      assertSame(node2, cDataNode0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(node2.hasParent());
      assertEquals(0, node2.siblingIndex());
      assertEquals("#cdata", node2.nodeName());
      
      NodeTraversor.filter(nodeFilter0, elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      NodeTraversor nodeTraversor0 = new NodeTraversor((NodeVisitor) null);
      assertNotNull(nodeTraversor0);
      
      // Undeclared exception!
      try { 
        nodeTraversor0.traverse(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.text("");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      
      NodeTraversor.traverse(nodeVisitor0, (Node) document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements0 = null;
      // Undeclared exception!
      try { 
        NodeTraversor.traverse(nodeVisitor0, (Elements) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeTraversor.filter((NodeFilter) null, (Node) null);
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor0, (Node) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        NodeTraversor.filter(nodeFilter0, (Elements) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = new Document("org.jsoup.select.NodeTraversor");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.createElement("org.jsoup.select.NodeTraversor");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", element0.baseUri());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = element0.getElementsMatchingText("");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", element0.baseUri());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeTraversor.filter(nodeFilter0, elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", element0.baseUri());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      nodeTraversor0.traverse((Node) element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("org.jsoup.select.NodeTraversor", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.NodeTraversor", element0.baseUri());
      assertEquals("org.jsoup.select.NodeTraversor", element0.tagName());
      assertEquals("org.jsoup.select.NodeTraversor", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      nodeTraversor0.traverse((Node) null);
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = Document.createShell("{VUyF");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{VUyF", document0.location());
      assertEquals("{VUyF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.text("{VUyF");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{VUyF", document0.location());
      assertEquals("{VUyF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("{VUyF", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("{VUyF", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document1.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{VUyF", document0.location());
      assertEquals("{VUyF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("{VUyF", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("{VUyF", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      
      NodeTraversor.traverse(nodeVisitor1, elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{VUyF", document0.location());
      assertEquals("{VUyF", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("{VUyF", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("{VUyF", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        elements0.not("{VUyF");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{VUyF': unexpected token at '{VUyF'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements0 = new Elements();
      assertNotNull(elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      NodeTraversor.traverse(nodeVisitor0, elements0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$AttributeStarting");
      assertNotNull(document0);
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByTag("org.jsoup.select.Evaluator$AttributeStarting");
      assertNotNull(elements0);
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.getElementsContainingText("org.jsoup.select.Evaluator$AttributeStarting");
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      NodeTraversor.filter(nodeFilter0, elements1);
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeStarting", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor1, (Node) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      CDataNode cDataNode0 = new CDataNode("HzM>V");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Node node0 = cDataNode0.clone();
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      
      NodeTraversor.filter(nodeFilter0, node0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor0, (Node) cDataNode0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertNotSame(cDataNode0, node0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      assertNotNull(nodeTraversor0);
      
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        NodeTraversor.filter((NodeFilter) null, (Node) comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NodeVisitor nodeVisitor0 = null;
      Document document0 = Document.createShell("`Jol]");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`Jol]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`Jol]", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("`Jol]", "`Jol]");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`Jol]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`Jol]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      elements0.trimToSize();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`Jol]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`Jol]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = elements0.parents();
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements0, elements1);
      assertNotSame(elements1, elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`Jol]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`Jol]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      
      // Undeclared exception!
      try { 
        NodeTraversor.traverse((NodeVisitor) null, elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NodeTraversor nodeTraversor0 = new NodeTraversor((NodeVisitor) null);
      assertNotNull(nodeTraversor0);
      
      Element element0 = new Element(".a|vySQo");
      assertNotNull(element0);
      assertEquals(".a|vySQo", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(".a|vySQo", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      
      Elements elements0 = element0.getElementsByAttributeStarting(".a|vySQo");
      assertNotNull(elements0);
      assertEquals(".a|vySQo", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(".a|vySQo", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        NodeTraversor.traverse((NodeVisitor) null, (Elements) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      DataNode dataNode0 = new DataNode("9X0av7=7aUFa=ip");
      assertNotNull(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      
      NodeTraversor.filter(nodeFilter0, (Node) dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded(" 'gx.@");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      // Undeclared exception!
      try { 
        NodeTraversor.filter((NodeFilter) null, (Node) textNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult2, nodeFilter_FilterResult2, nodeFilter_FilterResult3, nodeFilter_FilterResult2).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult4).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult5 = NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult5);
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult4));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult5.equals((Object)nodeFilter_FilterResult3));
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult5);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult5);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult5, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult5, nodeFilter_FilterResult3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("ac{x3VZ.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.hasParent());
      
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeTraversor.filter(nodeFilter0, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult3);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.hasParent());
      
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult3).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeTraversor.filter(nodeFilter1, (Node) document0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult4);
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult0.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult3));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult1.equals((Object)nodeFilter_FilterResult2));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult2.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult3.equals((Object)nodeFilter_FilterResult0));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult1));
      assertFalse(nodeFilter_FilterResult4.equals((Object)nodeFilter_FilterResult0));
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult0, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult3);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult1, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult3);
      assertSame(nodeFilter_FilterResult2, nodeFilter_FilterResult4);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult0);
      assertNotSame(nodeFilter_FilterResult2, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult3, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult2);
      assertSame(nodeFilter_FilterResult3, nodeFilter_FilterResult4);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult2);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult1);
      assertNotSame(nodeFilter_FilterResult4, nodeFilter_FilterResult0);
      assertSame(nodeFilter_FilterResult4, nodeFilter_FilterResult3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ac{x3VZ.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ac{x3VZ.", document0.location());
      assertFalse(document0.hasParent());
      
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      TextNode textNode0 = TextNode.createFromEncoded("22N", "thead");
      assertNotNull(textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      NodeTraversor.traverse(nodeVisitor0, (Node) textNode0);
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      CDataNode cDataNode0 = new CDataNode(":prev%s");
      cDataNode0.parent();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeTraversor.filter(nodeFilter0, (Node) null);
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Tag tag0 = Tag.valueOf("org.jsoup.select.NodeTraversor");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(":prev%s", "template");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.NodeTraversor", attributes1);
      attributes1.iterator();
      Elements elements0 = formElement0.elements();
      elements0.add((Element) formElement0);
      elements0.parents();
      NodeTraversor.filter(nodeFilter1, elements0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor1, elements0);
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter2).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter2, (Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Tag tag0 = Tag.valueOf("org.jsoup.select.NodeTraversor");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.NodeTraversor", attributes0);
      attributes0.iterator();
      Elements elements0 = formElement0.elements();
      elements0.add((Element) formElement0);
      elements0.parents();
      NodeTraversor.filter(nodeFilter1, elements0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor0, elements0);
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor1);
      NodeVisitor nodeVisitor2 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeVisitor nodeVisitor3 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor3, elements0);
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = Document.createShell("0MvCZV 'S}*");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      document0.val("");
      NodeTraversor.traverse(nodeVisitor0, (Node) document0);
      // Undeclared exception!
      try { 
        NodeTraversor.filter((NodeFilter) null, (Node) document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = Document.createShell("ac{x3VZ.");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("ac{x3VZ.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("!*xDL#%Mnw<>E`s?");
      Attributes attributes0 = cDataNode0.attributes();
      cDataNode0.text("!*xDL#%Mnw<>E`s?");
      FormElement formElement0 = new FormElement(tag0, "ac{x3VZ.", attributes0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      formElement0.data();
      document0.appendTo(formElement0);
      NodeTraversor.filter(nodeFilter0, (Node) document0);
      document0.previousElementSibling();
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter.FilterResult nodeFilter_FilterResult4 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult1, nodeFilter_FilterResult1, nodeFilter_FilterResult1, nodeFilter_FilterResult2).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult2, nodeFilter_FilterResult3, nodeFilter_FilterResult4).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeTraversor.filter(nodeFilter1, (Node) document0);
  }
}
