/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 19 10:42:30 GMT 2018
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TreeBuilder;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(1);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = Parser.unescapeEntities("5e7TH\"", false);
      assertNotNull(string0);
      assertEquals("5e7TH\"", string0);
      
      Document document0 = parser1.parseInput("<Ic,%", "<Ic,%");
      assertNotNull(document0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<Ic,%", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<Ic,%", document0.baseUri());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<ParseError> list0 = parser1.getErrors();
      assertNotNull(list0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      boolean boolean0 = parser1.isTrackErrors();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string1 = "wsE 6bV.~?C\"";
      Document document1 = Parser.parse("", "wsE 6bV.~?C\"");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("wsE 6bV.~?C\"", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("wsE 6bV.~?C\"", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser2 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Parser parser3 = Parser.htmlParser();
      assertNotNull(parser3);
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser0));
      assertNotSame(parser3, parser1);
      assertNotSame(parser3, parser2);
      assertNotSame(parser3, parser0);
      
      FormElement formElement0 = null;
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = Parser.parseXmlFragment("wsE 6bV.~?C\"", "5e7TH\"");
      assertNotNull(list1);
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      
      // Undeclared exception!
      try { 
        parser2.parseInput((Reader) null, "<Ic,%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      int int0 = 46;
      Parser parser1 = parser0.setTrackErrors(46);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser0.settings((ParseSettings) null);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      StringReader stringReader0 = new StringReader("org.jsoup.parser.Parser");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) stringReader0, "j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser1 = Parser.htmlParser();
      assertNotNull(parser1);
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      
      Parser parser2 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser0);
      assertNotSame(parser2, parser1);
      
      List<Node> list0 = Parser.parseXmlFragment("", "3W6Ma.D2ZgWq5");
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Parser parser3 = parser2.setTrackErrors(0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertNotSame(parser2, parser1);
      assertSame(parser3, parser0);
      assertNotSame(parser3, parser1);
      assertSame(parser3, parser2);
      
      Parser parser4 = parser3.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser4.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser4);
      assertNotSame(parser2, parser1);
      assertSame(parser3, parser0);
      assertNotSame(parser3, parser1);
      assertSame(parser3, parser2);
      assertSame(parser3, parser4);
      assertSame(parser4, parser3);
      assertSame(parser4, parser0);
      assertSame(parser4, parser2);
      assertNotSame(parser4, parser1);
      
      Parser parser5 = Parser.htmlParser();
      assertNotNull(parser5);
      assertFalse(parser5.isTrackErrors());
      assertFalse(parser5.equals((Object)parser2));
      assertFalse(parser5.equals((Object)parser4));
      assertFalse(parser5.equals((Object)parser1));
      assertFalse(parser5.equals((Object)parser0));
      assertFalse(parser5.equals((Object)parser3));
      assertNotSame(parser5, parser2);
      assertNotSame(parser5, parser4);
      assertNotSame(parser5, parser1);
      assertNotSame(parser5, parser0);
      assertNotSame(parser5, parser3);
      
      List<Node> list1 = Parser.parseXmlFragment("", "");
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      
      Parser parser6 = parser2.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser6);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser6.isTrackErrors());
      assertFalse(parser0.equals((Object)parser5));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser5));
      assertFalse(parser6.equals((Object)parser1));
      assertFalse(parser6.equals((Object)parser5));
      assertNotSame(parser0, parser5);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser6);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser4);
      assertSame(parser2, parser6);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser5);
      assertSame(parser6, parser3);
      assertSame(parser6, parser0);
      assertSame(parser6, parser2);
      assertNotSame(parser6, parser1);
      assertNotSame(parser6, parser5);
      assertSame(parser6, parser4);
      
      Document document0 = parser6.parseInput("", "3v9N$U?[2<D!LG:c");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser6.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("3v9N$U?[2<D!LG:c", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("3v9N$U?[2<D!LG:c", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.equals((Object)parser5));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser5));
      assertFalse(parser6.equals((Object)parser1));
      assertFalse(parser6.equals((Object)parser5));
      assertNotSame(parser0, parser5);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser6);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser4);
      assertSame(parser2, parser6);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser5);
      assertSame(parser6, parser3);
      assertSame(parser6, parser0);
      assertSame(parser6, parser2);
      assertNotSame(parser6, parser1);
      assertNotSame(parser6, parser5);
      assertSame(parser6, parser4);
      
      StringReader stringReader0 = new StringReader("Oth8&<t(k}C");
      assertNotNull(stringReader0);
      
      HtmlTreeBuilder htmlTreeBuilder1 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder1);
      assertFalse(htmlTreeBuilder1.equals((Object)htmlTreeBuilder0));
      
      ParseSettings parseSettings0 = htmlTreeBuilder1.settings;
      assertNull(parseSettings0);
      
      Parser parser7 = parser2.settings((ParseSettings) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser7);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser7.isTrackErrors());
      assertFalse(parser0.equals((Object)parser5));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(htmlTreeBuilder0.equals((Object)htmlTreeBuilder1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser5));
      assertFalse(parser7.equals((Object)parser1));
      assertFalse(parser7.equals((Object)parser5));
      assertNotSame(parser0, parser5);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser7);
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser6);
      assertNotSame(htmlTreeBuilder0, htmlTreeBuilder1);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser4);
      assertSame(parser2, parser6);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser5);
      assertSame(parser2, parser7);
      assertSame(parser7, parser2);
      assertNotSame(parser7, parser1);
      assertSame(parser7, parser4);
      assertNotSame(parser7, parser5);
      assertSame(parser7, parser0);
      assertSame(parser7, parser3);
      assertSame(parser7, parser6);
      
      Document document1 = parser5.parseInput((Reader) stringReader0, "basefont");
      assertNotNull(document1);
      assertFalse(parser5.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("basefont", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("basefont", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(parser5.equals((Object)parser7));
      assertFalse(parser5.equals((Object)parser2));
      assertFalse(parser5.equals((Object)parser4));
      assertFalse(parser5.equals((Object)parser1));
      assertFalse(parser5.equals((Object)parser0));
      assertFalse(parser5.equals((Object)parser6));
      assertFalse(parser5.equals((Object)parser3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(parser5, parser7);
      assertNotSame(parser5, parser2);
      assertNotSame(parser5, parser4);
      assertNotSame(parser5, parser1);
      assertNotSame(parser5, parser0);
      assertNotSame(parser5, parser6);
      assertNotSame(parser5, parser3);
      assertNotSame(document1, document0);
      
      List<ParseError> list2 = parser0.getErrors();
      assertNotNull(list2);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser0.equals((Object)parser5));
      assertFalse(parser0.equals((Object)parser1));
      assertNotSame(parser0, parser5);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser7);
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser6);
      
      Document document2 = Parser.parse("Oth8&<t(k}C", "J");
      assertNotNull(document2);
      assertEquals("J", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("J", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      ParseSettings parseSettings1 = parser1.settings();
      assertNotNull(parseSettings1);
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser4));
      assertFalse(parser1.equals((Object)parser7));
      assertFalse(parser1.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser5));
      assertFalse(parser1.equals((Object)parser2));
      assertFalse(parser1.equals((Object)parser3));
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser4);
      assertNotSame(parser1, parser7);
      assertNotSame(parser1, parser6);
      assertNotSame(parser1, parser5);
      assertNotSame(parser1, parser2);
      assertNotSame(parser1, parser3);
      assertNotSame(parser1, parser0);
      
      ParseSettings parseSettings2 = parser3.settings();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(parseSettings2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser0.equals((Object)parser5));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(htmlTreeBuilder0.equals((Object)htmlTreeBuilder1));
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser5));
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser5));
      assertNotSame(parser0, parser5);
      assertNotSame(parser0, parser1);
      assertSame(parser0, parser7);
      assertSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser6);
      assertNotSame(htmlTreeBuilder0, htmlTreeBuilder1);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser4);
      assertSame(parser2, parser6);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser5);
      assertSame(parser2, parser7);
      assertSame(parser3, parser0);
      assertSame(parser3, parser6);
      assertNotSame(parser3, parser1);
      assertNotSame(parser3, parser5);
      assertSame(parser3, parser7);
      assertSame(parser3, parser2);
      assertSame(parser3, parser4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors((-906021636));
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Parser parser3 = Parser.htmlParser();
      assertNotNull(parser3);
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser3.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser0));
      assertNotSame(parser3, parser2);
      assertNotSame(parser3, parser1);
      assertNotSame(parser3, parser0);
      
      List<ParseError> list0 = parser2.getErrors();
      assertNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(parser1.equals((Object)parser3));
      assertFalse(parser2.equals((Object)parser3));
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser3);
      assertNotSame(parser1, parser3);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotSame(parser2, parser3);
      
      Parser parser4 = parser1.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser0.equals((Object)parser3));
      assertFalse(parser1.equals((Object)parser3));
      assertFalse(parser4.equals((Object)parser3));
      assertSame(parser0, parser2);
      assertSame(parser0, parser4);
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser3);
      assertNotSame(parser1, parser3);
      assertSame(parser1, parser0);
      assertSame(parser1, parser4);
      assertSame(parser1, parser2);
      assertSame(parser4, parser0);
      assertNotSame(parser4, parser3);
      assertSame(parser4, parser2);
      assertSame(parser4, parser1);
      
      Locale locale0 = Locale.forLanguageTag("sj");
      assertNotNull(locale0);
      assertEquals("sj", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("sj", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("sj", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("sj", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("sj"));
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("sj", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("sj", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(set0.contains("sj"));
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) document0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ".%s";
      Document document0 = Parser.parseBodyFragment(".%s", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.val((String) null);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingText("Z* {PSIc,");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment("YAQqzyCs5BR0,t$Yx", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("org.jsoup.parser.Token$StartTag", "org.jsoup.parser.Token$StartTag");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$StartTag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$StartTag", document0.location());
      assertFalse(document0.hasParent());
      
      List<ParseError> list0 = parser0.getErrors();
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Parser parser1 = Parser.xmlParser();
      assertNotNull(parser1);
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.parser.Token$StartTag", document0.baseUri());
      assertEquals("org.jsoup.parser.Token$StartTag", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      assertFalse(parser0.equals((Object)parser1));
      assertNotSame(parser0, parser1);
      
      List<Node> list1 = Parser.parseXmlFragment("org.jsoup.select.Evaluator$CssNthEvaluator", "");
      assertNotNull(list1);
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("b.TouI,!+N-", "");
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragment("_wo>y_`NYuS8v", "_wo>y_`NYuS8v");
      assertNotNull(document2);
      assertEquals("#root", document2.tagName());
      assertEquals("_wo>y_`NYuS8v", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("_wo>y_`NYuS8v", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        Parser.parseFragment("org.jsoup.parser.Token$StartTag", (Element) document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors((-2091));
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Parser parser3 = parser2.settings(parseSettings0);
      assertNotNull(parser3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser1, parser3);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser3, parser1);
      assertSame(parser3, parser2);
      assertSame(parser3, parser0);
      
      Parser parser4 = Parser.xmlParser();
      assertNotNull(parser4);
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser4.equals((Object)parser0));
      assertFalse(parser4.equals((Object)parser1));
      assertFalse(parser4.equals((Object)parser3));
      assertFalse(parser4.equals((Object)parser2));
      assertNotSame(parser4, parser0);
      assertNotSame(parser4, parser1);
      assertNotSame(parser4, parser3);
      assertNotSame(parser4, parser2);
      
      Parser parser5 = parser0.setTrackErrors((-2091));
      assertNotNull(parser5);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser5.isTrackErrors());
      assertFalse(parser0.equals((Object)parser4));
      assertFalse(parser5.equals((Object)parser4));
      assertSame(parser0, parser1);
      assertNotSame(parser0, parser4);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser5);
      assertSame(parser5, parser1);
      assertSame(parser5, parser0);
      assertSame(parser5, parser2);
      assertNotSame(parser5, parser4);
      assertSame(parser5, parser3);
      
      Parser parser6 = Parser.xmlParser();
      assertNotNull(parser6);
      assertFalse(parser6.isTrackErrors());
      assertFalse(parser6.equals((Object)parser5));
      assertFalse(parser6.equals((Object)parser0));
      assertFalse(parser6.equals((Object)parser1));
      assertFalse(parser6.equals((Object)parser3));
      assertFalse(parser6.equals((Object)parser2));
      assertFalse(parser6.equals((Object)parser4));
      assertNotSame(parser6, parser5);
      assertNotSame(parser6, parser0);
      assertNotSame(parser6, parser1);
      assertNotSame(parser6, parser3);
      assertNotSame(parser6, parser2);
      assertNotSame(parser6, parser4);
      
      Document document0 = Parser.parse("S>$", "S>$");
      assertNotNull(document0);
      assertEquals("S>$", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S>$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      Parser parser7 = parser5.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser7);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser5.isTrackErrors());
      assertFalse(parser7.isTrackErrors());
      assertFalse(parser0.equals((Object)parser4));
      assertFalse(parser0.equals((Object)parser6));
      assertFalse(parser5.equals((Object)parser6));
      assertFalse(parser5.equals((Object)parser4));
      assertFalse(parser7.equals((Object)parser4));
      assertFalse(parser7.equals((Object)parser6));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser0, parser5);
      assertNotSame(parser0, parser6);
      assertSame(parser0, parser7);
      assertSame(parser5, parser1);
      assertNotSame(parser5, parser6);
      assertSame(parser5, parser0);
      assertSame(parser5, parser7);
      assertSame(parser5, parser2);
      assertNotSame(parser5, parser4);
      assertSame(parser5, parser3);
      assertSame(parser7, parser1);
      assertSame(parser7, parser3);
      assertNotSame(parser7, parser4);
      assertNotSame(parser7, parser6);
      assertSame(parser7, parser5);
      assertSame(parser7, parser0);
      assertSame(parser7, parser2);
      
      boolean boolean0 = parser3.isTrackErrors();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertFalse(boolean0);
      assertFalse(parser0.equals((Object)parser4));
      assertFalse(parser0.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser4));
      assertFalse(parser2.equals((Object)parser4));
      assertFalse(parser2.equals((Object)parser6));
      assertFalse(parser3.equals((Object)parser6));
      assertFalse(parser3.equals((Object)parser4));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser0, parser5);
      assertNotSame(parser0, parser6);
      assertSame(parser0, parser7);
      assertNotSame(parser1, parser6);
      assertSame(parser1, parser3);
      assertSame(parser1, parser5);
      assertSame(parser1, parser2);
      assertSame(parser1, parser7);
      assertNotSame(parser1, parser4);
      assertSame(parser1, parser0);
      assertSame(parser2, parser3);
      assertNotSame(parser2, parser4);
      assertNotSame(parser2, parser6);
      assertSame(parser2, parser5);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser7);
      assertSame(parser3, parser1);
      assertNotSame(parser3, parser6);
      assertSame(parser3, parser2);
      assertNotSame(parser3, parser4);
      assertSame(parser3, parser5);
      assertSame(parser3, parser7);
      assertSame(parser3, parser0);
      
      TreeBuilder treeBuilder0 = parser2.getTreeBuilder();
      assertNotNull(treeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.equals((Object)parser4));
      assertFalse(parser0.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser4));
      assertFalse(parser2.equals((Object)parser4));
      assertFalse(parser2.equals((Object)parser6));
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser0, parser5);
      assertNotSame(parser0, parser6);
      assertSame(parser0, parser7);
      assertSame(xmlTreeBuilder0, treeBuilder0);
      assertNotSame(parser1, parser6);
      assertSame(parser1, parser3);
      assertSame(parser1, parser5);
      assertSame(parser1, parser2);
      assertSame(parser1, parser7);
      assertNotSame(parser1, parser4);
      assertSame(parser1, parser0);
      assertSame(parser2, parser3);
      assertNotSame(parser2, parser4);
      assertNotSame(parser2, parser6);
      assertSame(parser2, parser5);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser7);
      assertSame(treeBuilder0, xmlTreeBuilder0);
      
      String string0 = "";
      Parser parser8 = parser1.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser8);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser8.isTrackErrors());
      assertFalse(parser0.equals((Object)parser4));
      assertFalse(parser0.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser6));
      assertFalse(parser1.equals((Object)parser4));
      assertFalse(parser8.equals((Object)parser4));
      assertFalse(parser8.equals((Object)parser6));
      assertSame(parser0, parser8);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertNotSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser0, parser5);
      assertNotSame(parser0, parser6);
      assertSame(parser0, parser7);
      assertSame(xmlTreeBuilder0, treeBuilder0);
      assertNotSame(parser1, parser6);
      assertSame(parser1, parser3);
      assertSame(parser1, parser5);
      assertSame(parser1, parser2);
      assertSame(parser1, parser7);
      assertNotSame(parser1, parser4);
      assertSame(parser1, parser8);
      assertSame(parser1, parser0);
      assertSame(parser8, parser5);
      assertSame(parser8, parser0);
      assertSame(parser8, parser7);
      assertSame(parser8, parser2);
      assertSame(parser8, parser1);
      assertSame(parser8, parser3);
      assertNotSame(parser8, parser6);
      assertNotSame(parser8, parser4);
      
      Document document1 = Parser.parseBodyFragment("", "");
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        parser0.parseInput("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors((-1));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser0.settings((ParseSettings) null);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      StringReader stringReader0 = new StringReader("org.jsoup.parser.Parser");
      assertNotNull(stringReader0);
      
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) stringReader0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}Xw!Umi5W$UxmMm$ntv", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder((TreeBuilder) null);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Parser parser3 = parser1.setTreeBuilder((TreeBuilder) null);
      assertNotNull(parser3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser1, parser3);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser3, parser2);
      assertSame(parser3, parser0);
      assertSame(parser3, parser1);
      
      Parser parser4 = parser2.setTrackErrors(0);
      assertNotNull(parser4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser1, parser4);
      assertSame(parser1, parser3);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser4);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser3);
      assertSame(parser4, parser0);
      assertSame(parser4, parser2);
      assertSame(parser4, parser3);
      assertSame(parser4, parser1);
      
      Document document1 = Parser.parseBodyFragment("", "");
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "-b1nMcPMOQwspia");
      assertNotNull(list0);
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      
      String string0 = document1.attr("");
      assertNotNull(string0);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", string0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, int0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      List<Node> list1 = Parser.parseFragment("GBoc1", (Element) document1, "");
      assertNotNull(list1);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(document1, document0);
      assertNotSame(list1, list0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(11);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      List<Node> list2 = Parser.parseFragment("", (Element) document1, "", parseErrorList0);
      assertNotNull(list2);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(document1, document0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      
      Document document2 = Parser.parse("org.jsoup.parser.Token$Character", "}Xw!Umi5W$UxmMm$ntv");
      assertNotNull(document2);
      assertEquals("}Xw!Umi5W$UxmMm$ntv", document2.baseUri());
      assertEquals("}Xw!Umi5W$UxmMm$ntv", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      TreeBuilder treeBuilder0 = parser4.getTreeBuilder();
      assertNull(treeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser4.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser1, parser4);
      assertSame(parser1, parser3);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser4);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser3);
      assertSame(parser4, parser0);
      assertSame(parser4, parser2);
      assertSame(parser4, parser3);
      assertSame(parser4, parser1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Reader reader0 = null;
      String string0 = "$'!4VeU(Y/7@)!y";
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) null, "$'!4VeU(Y/7@)!y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("%^tX!8#L");
      assertNotNull(stringReader0);
      
      Document document0 = xmlTreeBuilder0.parse(stringReader0, "%^tX!8#L");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%^tX!8#L", document0.location());
      assertEquals("%^tX!8#L", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%^tX!8#L", document0.location());
      assertEquals("%^tX!8#L", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("%^tX!8#L", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("%^tX!8#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%^tX!8#L", document0.location());
      assertEquals("%^tX!8#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("%^tX!8#L", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("%^tX!8#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("%^tX!8#L", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("%^tX!8#L", document2.location());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.html("");
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%^tX!8#L", document0.location());
      assertEquals("%^tX!8#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("%^tX!8#L", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("%^tX!8#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("%^tX!8#L", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("%^tX!8#L", document2.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("%^tX!8#L", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("%^tX!8#L", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      List<Node> list0 = Parser.parseFragment("org.jsoup.parser.Parser", (Element) document3, "ebaO");
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("%^tX!8#L", document0.location());
      assertEquals("%^tX!8#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("%^tX!8#L", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("%^tX!8#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("%^tX!8#L", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("%^tX!8#L", document2.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("%^tX!8#L", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("%^tX!8#L", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      String string0 = Parser.unescapeEntities(" />", true);
      assertNotNull(string0);
      assertEquals(" />", string0);
      
      Document document4 = parser0.parseInput(":containsOwn(%s)", "main");
      assertNotNull(document4);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("main", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("main", document4.baseUri());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      
      String string1 = Parser.unescapeEntities("", true);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      
      Document document5 = Parser.parseBodyFragment("", "org.jsoup.parser.Parser");
      assertNotNull(document5);
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.childNodeSize());
      assertEquals("org.jsoup.parser.Parser", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.Parser", document5.baseUri());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "pw/2]_>>H]yJ`l9f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = "dU/g~$jx\"";
      List<Node> list0 = Parser.parseXmlFragment("dU/g~$jx\"", "");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string1 = "";
      Document document0 = Parser.parse("blockquote", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document1);
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      String string2 = null;
      String string3 = "";
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Parser.unescapeEntities("B4%0MtjS`iVC2t:Ei", false);
      assertNotNull(string0);
      assertEquals("B4%0MtjS`iVC2t:Ei", string0);
      
      Document document0 = Parser.parseBodyFragment("B4%0MtjS`iVC2t:Ei", "B4%0MtjS`iVC2t:Ei");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("B4%0MtjS`iVC2t:Ei", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("B4%0MtjS`iVC2t:Ei", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = Parser.parseBodyFragment("", "~';x-@1A&/|TH89,I(");
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals("~';x-@1A&/|TH89,I(", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("~';x-@1A&/|TH89,I(", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = parser0.settings();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment("2K`RGJu", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = null;
      Document document0 = Parser.parseBodyFragmentRelaxed("unYWXcjG4{Ilw]IM-", "unYWXcjG4{Ilw]IM-");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("unYWXcjG4{Ilw]IM-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("unYWXcjG4{Ilw]IM-", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("unYWXcjG4{Ilw]IM-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("unYWXcjG4{Ilw]IM-", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("unYWXcjG4{Ilw]IM-", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("unYWXcjG4{Ilw]IM-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.appendText("A~*1F$]uUaw");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("unYWXcjG4{Ilw]IM-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("unYWXcjG4{Ilw]IM-", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("unYWXcjG4{Ilw]IM-", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("unYWXcjG4{Ilw]IM-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("unYWXcjG4{Ilw]IM-", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("unYWXcjG4{Ilw]IM-", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      int int0 = 0;
      ParseErrorList parseErrorList0 = new ParseErrorList(0, (-1704));
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) document2, "h9UU#%jmPi", parseErrorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "org.jsoup.parser.Parser";
      Element element0 = null;
      String string1 = "";
      List<Node> list0 = Parser.parseFragment("org.jsoup.parser.Parser", (Element) null, "");
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      int int0 = 2365;
      Parser parser1 = parser0.setTrackErrors(2365);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        Parser.unescapeEntities((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      List<ParseError> list0 = parser0.getErrors();
      assertNull(list0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors((-1534));
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser2 = parser1.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      ParseSettings parseSettings0 = parser2.settings();
      assertNotNull(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      List<Node> list0 = Parser.parseXmlFragment("9@-vG~hOw5 NQ4", "");
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Parser parser3 = parser0.settings(parseSettings0);
      assertNotNull(parser3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertSame(parser0, parser3);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser1, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser3);
      assertSame(parser2, parser1);
      assertSame(parser3, parser0);
      assertSame(parser3, parser2);
      assertSame(parser3, parser1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = Parser.parse("WjZ!GCCk5", "}!n3y*%1Z#[");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("}!n3y*%1Z#[", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}!n3y*%1Z#[", document0.location());
      
      boolean boolean0 = parser0.isTrackErrors();
      assertFalse(parser0.isTrackErrors());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = parser0.settings();
      assertNotNull(parseSettings0);
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors(100);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser3 = parser2.settings(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser3);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertTrue(parser3.isTrackErrors());
      assertSame(parser0, parser3);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser1, parser3);
      assertSame(parser2, parser1);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser3, parser1);
      assertSame(parser3, parser2);
      assertSame(parser3, parser0);
      
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = Parser.unescapeEntities("", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Parser parser1 = parser0.setTrackErrors(1439);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = "";
      String string1 = "#comment";
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.baseUri = "7";
      Parser parser2 = parser1.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      // Undeclared exception!
      try { 
        parser1.parseInput("#comment", "#comment");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "a8a@C-I9a@Qz";
      ParseErrorList parseErrorList0 = new ParseErrorList(0, (-1));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      // Undeclared exception!
      try { 
        Parser.parseFragment("", (Element) null, (String) null, parseErrorList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = new Element("f[EAxCxb5");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("f[EAxCxb5", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("f[EAxCxb5", element0.tagName());
      assertFalse(element0.hasParent());
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("f[EAxCxb5", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("f[EAxCxb5", element0.tagName());
      assertFalse(element0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Node> list1 = Parser.parseFragment("numeric reference with no numerals", element0, "numeric reference with no numerals");
      assertNotNull(list1);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("f[EAxCxb5", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("f[EAxCxb5", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.clone();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.getElementsContainingOwnText("");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      xmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertEquals(4, xmlTreeBuilder0.stack.size());
      assertFalse(xmlTreeBuilder0.stack.isEmpty());
      
      Document document2 = parser0.parseInput("", "");
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = Parser.htmlParser();
      assertNotNull(parser1);
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      
      String string0 = "ftV.J]n2/>#'~=bHlxA";
      List<Node> list0 = Parser.parseXmlFragment("--!", "ftV.J]n2/>#'~=bHlxA");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Document document0 = Parser.parseBodyFragmentRelaxed("ftV.J]n2/>#'~=bHlxA", "ftV.J]n2/>#'~=bHlxA");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ftV.J]n2/>#'~=bHlxA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ftV.J]n2/>#'~=bHlxA", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendText("ftV.J]n2/>#'~=bHlxA");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ftV.J]n2/>#'~=bHlxA", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ftV.J]n2/>#'~=bHlxA", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ftV.J]n2/>#'~=bHlxA", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("ftV.J]n2/>#'~=bHlxA", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment((String) null, "--!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "|?wft+";
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(50);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      boolean boolean0 = false;
      String string1 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      String string2 = "[OeZ%w,DN6,*=5 ~VK";
      Document document0 = parser0.parseInput((Reader) stringReader0, "[OeZ%w,DN6,*=5 ~VK");
      assertNotNull(document0);
      assertTrue(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertSame(parser0, parser1);
      
      ParseErrorList parseErrorList0 = new ParseErrorList(50, 0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "", parseErrorList0);
      assertNotNull(list0);
      assertTrue(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(parser0, parser1);
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertTrue(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("--[UpWfc");
      assertNotNull(document2);
      assertTrue(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document2.location());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document2.baseUri());
      assertFalse(document2.hasParent());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.getElementsByIndexLessThan(50);
      assertNotNull(elements0);
      assertTrue(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("[OeZ%w,DN6,*=5 ~VK", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document2.select("--[UpWfc");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '--[UpWfc': unexpected token at '--[UpWfc'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "jQQ\"mz%ouQwT$!3&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(1);
      assertNotNull(parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string0 = Parser.unescapeEntities("5e7TH\"", false);
      assertNotNull(string0);
      assertEquals("5e7TH\"", string0);
      
      Document document0 = parser1.parseInput("{hj'6:|zO", "{hj'6:|zO");
      assertNotNull(document0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("{hj'6:|zO", document0.baseUri());
      assertEquals("{hj'6:|zO", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<ParseError> list0 = parser1.getErrors();
      assertNotNull(list0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      boolean boolean0 = parser1.isTrackErrors();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      String string1 = "wsE 6bV.~?C\"";
      Document document1 = Parser.parse("", "wsE 6bV.~?C\"");
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("wsE 6bV.~?C\"", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("wsE 6bV.~?C\"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser2 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      
      Parser parser3 = Parser.htmlParser();
      assertNotNull(parser3);
      assertFalse(parser3.isTrackErrors());
      assertFalse(parser3.equals((Object)parser0));
      assertFalse(parser3.equals((Object)parser2));
      assertFalse(parser3.equals((Object)parser1));
      assertNotSame(parser3, parser0);
      assertNotSame(parser3, parser2);
      assertNotSame(parser3, parser1);
      
      FormElement formElement0 = null;
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list1 = Parser.parseXmlFragment("wsE 6bV.~?C\"", "5e7TH\"");
      assertNotNull(list1);
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        parser2.parseInput((Reader) null, "{hj'6:|zO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Parser parser0 = new Parser(xmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Parser parser2 = parser1.setTrackErrors((-1229));
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      
      Parser parser3 = parser2.settings(parseSettings0);
      assertNotNull(parser3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser3, parser0);
      assertSame(parser3, parser1);
      assertSame(parser3, parser2);
      
      Document document0 = Parser.parseBodyFragment("xmp", "xmp");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("xmp", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("xmp", document0.location());
      
      StringReader stringReader0 = new StringReader("xmp");
      assertNotNull(stringReader0);
      
      String string0 = parseSettings0.normalizeTag("SU#PkU");
      assertNotNull(string0);
      assertEquals("SU#PkU", string0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      xmlTreeBuilder0.tokeniser = tokeniser0;
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("SU#PkU", "");
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Document document2 = parser3.parseInput((Reader) stringReader0, "V0y]!}DbY2my]5TJJz4");
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser3.isTrackErrors());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("V0y]!}DbY2my]5TJJz4", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("V0y]!}DbY2my]5TJJz4", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(parser3, parser0);
      assertSame(parser3, parser1);
      assertSame(parser3, parser2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      TreeBuilder treeBuilder0 = parser2.getTreeBuilder();
      assertNotNull(treeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertSame(xmlTreeBuilder0, treeBuilder0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser3);
      assertSame(parser2, parser3);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(treeBuilder0, xmlTreeBuilder0);
      
      Document document3 = Parser.parse("org.jsoup.parser.Parser", "");
      assertNotNull(document3);
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Document document4 = Parser.parse("V0y]!}DbY2my]5TJJz4", "");
      assertNotNull(document4);
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.baseUri());
      assertEquals("", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      
      Parser parser4 = Parser.htmlParser();
      assertNotNull(parser4);
      assertFalse(parser4.isTrackErrors());
      assertFalse(parser4.equals((Object)parser0));
      assertFalse(parser4.equals((Object)parser3));
      assertFalse(parser4.equals((Object)parser2));
      assertFalse(parser4.equals((Object)parser1));
      assertNotSame(parser4, parser0);
      assertNotSame(parser4, parser3);
      assertNotSame(parser4, parser2);
      assertNotSame(parser4, parser1);
      
      Document document5 = parser2.parseInput("ScriptDataDoubleEscapeStart", "");
      assertNotNull(document5);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(parser2.isTrackErrors());
      assertFalse(parser0.equals((Object)parser4));
      assertFalse(parser1.equals((Object)parser4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(parser2.equals((Object)parser4));
      assertSame(xmlTreeBuilder0, treeBuilder0);
      assertSame(parser0, parser2);
      assertNotSame(parser0, parser4);
      assertSame(parser0, parser3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertNotSame(parser1, parser4);
      assertSame(parser1, parser3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertSame(parser2, parser3);
      assertNotSame(parser2, parser4);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Parser.parse("2~XO|}TLM1+t?424%q@", "2~XO|}TLM1+t?424%q@");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("2~XO|}TLM1+t?424%q@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("2~XO|}TLM1+t?424%q@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<Node> list0 = Parser.parseXmlFragment("@]kMzs=8g;BY-", "*7");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) null, "*7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      parser0.settings();
      StringReader stringReader0 = new StringReader("");
      parser0.parseInput((Reader) stringReader0, "4!tnbD:[@)CUzV");
      Parser.parseFragment("QUm/\"EE#A", (Element) document0, "");
      StringReader stringReader1 = new StringReader("/ABgdu74huw{$");
      parser0.parseInput((Reader) stringReader1, "");
      Parser.parseBodyFragment("QUm/\"EE#A", "");
      Parser.parseXmlFragment("", "");
      Parser.unescapeEntities("", true);
      Parser.xmlParser();
      Parser.htmlParser();
  }
}
